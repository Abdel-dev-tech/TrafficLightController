
TrafficLightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043e8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08004588  08004588  00014588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004638  08004638  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004638  08004638  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004638  08004638  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004638  08004638  00014638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800463c  0800463c  0001463c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042e4  20000010  08004650  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200042f4  08004650  000242f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f3a9  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026c4  00000000  00000000  0002f3e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  00031ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b98  00000000  00000000  00032760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172e5  00000000  00000000  000332f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd87  00000000  00000000  0004a5dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092075  00000000  00000000  00058364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea3d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003320  00000000  00000000  000ea42c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004570 	.word	0x08004570

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08004570 	.word	0x08004570

080001e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001e0:	b480      	push	{r7}
 80001e2:	b085      	sub	sp, #20
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	60f8      	str	r0, [r7, #12]
 80001e8:	60b9      	str	r1, [r7, #8]
 80001ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	4a07      	ldr	r2, [pc, #28]	; (800020c <vApplicationGetIdleTaskMemory+0x2c>)
 80001f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001f2:	68bb      	ldr	r3, [r7, #8]
 80001f4:	4a06      	ldr	r2, [pc, #24]	; (8000210 <vApplicationGetIdleTaskMemory+0x30>)
 80001f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2280      	movs	r2, #128	; 0x80
 80001fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001fe:	bf00      	nop
 8000200:	3714      	adds	r7, #20
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	2000002c 	.word	0x2000002c
 8000210:	20000080 	.word	0x20000080

08000214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000214:	b5b0      	push	{r4, r5, r7, lr}
 8000216:	b0a0      	sub	sp, #128	; 0x80
 8000218:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021a:	f000 fae5 	bl	80007e8 <HAL_Init>

  /* Configure the system clock */
//  SystemClock_Config();

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800021e:	f000 f87d 	bl	800031c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000222:	f000 f89b 	bl	800035c <MX_GPIO_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of SemaLightSet1 */
  osSemaphoreDef(SemaLightSet1);
 8000226:	2300      	movs	r3, #0
 8000228:	67bb      	str	r3, [r7, #120]	; 0x78
 800022a:	2300      	movs	r3, #0
 800022c:	67fb      	str	r3, [r7, #124]	; 0x7c
  SemaLightSet1Handle = osSemaphoreCreate(osSemaphore(SemaLightSet1), 1);
 800022e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000232:	2101      	movs	r1, #1
 8000234:	4618      	mov	r0, r3
 8000236:	f002 faae 	bl	8002796 <osSemaphoreCreate>
 800023a:	4603      	mov	r3, r0
 800023c:	4a2d      	ldr	r2, [pc, #180]	; (80002f4 <main+0xe0>)
 800023e:	6013      	str	r3, [r2, #0]

  /* definition and creation of SemaLightSet2 */
  osSemaphoreDef(SemaLightSet2);
 8000240:	2300      	movs	r3, #0
 8000242:	673b      	str	r3, [r7, #112]	; 0x70
 8000244:	2300      	movs	r3, #0
 8000246:	677b      	str	r3, [r7, #116]	; 0x74
  SemaLightSet2Handle = osSemaphoreCreate(osSemaphore(SemaLightSet2), 1);
 8000248:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800024c:	2101      	movs	r1, #1
 800024e:	4618      	mov	r0, r3
 8000250:	f002 faa1 	bl	8002796 <osSemaphoreCreate>
 8000254:	4603      	mov	r3, r0
 8000256:	4a28      	ldr	r2, [pc, #160]	; (80002f8 <main+0xe4>)
 8000258:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of FirstApproachTL */
  osThreadDef(FirstApproachTL, prvTrafficLightController, osPriorityNormal, 0, 128);
 800025a:	4b28      	ldr	r3, [pc, #160]	; (80002fc <main+0xe8>)
 800025c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000260:	461d      	mov	r5, r3
 8000262:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000266:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800026a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FirstApproachTLHandle = osThreadCreate(osThread(FirstApproachTL), NULL);
 800026e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000272:	2100      	movs	r1, #0
 8000274:	4618      	mov	r0, r3
 8000276:	f002 fa2e 	bl	80026d6 <osThreadCreate>
 800027a:	4603      	mov	r3, r0
 800027c:	4a20      	ldr	r2, [pc, #128]	; (8000300 <main+0xec>)
 800027e:	6013      	str	r3, [r2, #0]

  /* definition and creation of TimeManagementT */
  osThreadDef(TimeManagementT, prvTimeMgntTask, osPriorityIdle, 0, 128);
 8000280:	4b20      	ldr	r3, [pc, #128]	; (8000304 <main+0xf0>)
 8000282:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000286:	461d      	mov	r5, r3
 8000288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800028a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800028c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000290:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TimeManagementTHandle = osThreadCreate(osThread(TimeManagementT), NULL);
 8000294:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f002 fa1b 	bl	80026d6 <osThreadCreate>
 80002a0:	4603      	mov	r3, r0
 80002a2:	4a19      	ldr	r2, [pc, #100]	; (8000308 <main+0xf4>)
 80002a4:	6013      	str	r3, [r2, #0]

  /* definition and creation of LightSet1 */
  osThreadDef(LightSet1, prvLightSet1, osPriorityIdle, 0, 128);
 80002a6:	4b19      	ldr	r3, [pc, #100]	; (800030c <main+0xf8>)
 80002a8:	f107 041c 	add.w	r4, r7, #28
 80002ac:	461d      	mov	r5, r3
 80002ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LightSet1Handle = osThreadCreate(osThread(LightSet1), NULL);
 80002ba:	f107 031c 	add.w	r3, r7, #28
 80002be:	2100      	movs	r1, #0
 80002c0:	4618      	mov	r0, r3
 80002c2:	f002 fa08 	bl	80026d6 <osThreadCreate>
 80002c6:	4603      	mov	r3, r0
 80002c8:	4a11      	ldr	r2, [pc, #68]	; (8000310 <main+0xfc>)
 80002ca:	6013      	str	r3, [r2, #0]

  /* definition and creation of LightSet2 */
  osThreadDef(LightSet2, prvLightSet2, osPriorityIdle, 0, 128);
 80002cc:	4b11      	ldr	r3, [pc, #68]	; (8000314 <main+0x100>)
 80002ce:	463c      	mov	r4, r7
 80002d0:	461d      	mov	r5, r3
 80002d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LightSet2Handle = osThreadCreate(osThread(LightSet2), NULL);
 80002de:	463b      	mov	r3, r7
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f002 f9f7 	bl	80026d6 <osThreadCreate>
 80002e8:	4603      	mov	r3, r0
 80002ea:	4a0b      	ldr	r2, [pc, #44]	; (8000318 <main+0x104>)
 80002ec:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002ee:	f002 f9eb 	bl	80026c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002f2:	e7fe      	b.n	80002f2 <main+0xde>
 80002f4:	20000594 	.word	0x20000594
 80002f8:	20000598 	.word	0x20000598
 80002fc:	080045c0 	.word	0x080045c0
 8000300:	20000584 	.word	0x20000584
 8000304:	080045dc 	.word	0x080045dc
 8000308:	20000588 	.word	0x20000588
 800030c:	080045f8 	.word	0x080045f8
 8000310:	2000058c 	.word	0x2000058c
 8000314:	08004614 	.word	0x08004614
 8000318:	20000590 	.word	0x20000590

0800031c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b086      	sub	sp, #24
 8000320:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000322:	463b      	mov	r3, r7
 8000324:	2200      	movs	r2, #0
 8000326:	601a      	str	r2, [r3, #0]
 8000328:	605a      	str	r2, [r3, #4]
 800032a:	609a      	str	r2, [r3, #8]
 800032c:	60da      	str	r2, [r3, #12]
 800032e:	611a      	str	r2, [r3, #16]
 8000330:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000332:	2301      	movs	r3, #1
 8000334:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000336:	23c8      	movs	r3, #200	; 0xc8
 8000338:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800033a:	2305      	movs	r3, #5
 800033c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800033e:	2302      	movs	r3, #2
 8000340:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000342:	463b      	mov	r3, r7
 8000344:	4618      	mov	r0, r3
 8000346:	f001 fe93 	bl	8002070 <HAL_RCCEx_PeriphCLKConfig>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000350:	f000 f9ae 	bl	80006b0 <Error_Handler>
  }
}
 8000354:	bf00      	nop
 8000356:	3718      	adds	r7, #24
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}

0800035c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b08c      	sub	sp, #48	; 0x30
 8000360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000362:	f107 031c 	add.w	r3, r7, #28
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]
 8000370:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000372:	2300      	movs	r3, #0
 8000374:	61bb      	str	r3, [r7, #24]
 8000376:	4b5b      	ldr	r3, [pc, #364]	; (80004e4 <MX_GPIO_Init+0x188>)
 8000378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037a:	4a5a      	ldr	r2, [pc, #360]	; (80004e4 <MX_GPIO_Init+0x188>)
 800037c:	f043 0310 	orr.w	r3, r3, #16
 8000380:	6313      	str	r3, [r2, #48]	; 0x30
 8000382:	4b58      	ldr	r3, [pc, #352]	; (80004e4 <MX_GPIO_Init+0x188>)
 8000384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000386:	f003 0310 	and.w	r3, r3, #16
 800038a:	61bb      	str	r3, [r7, #24]
 800038c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800038e:	2300      	movs	r3, #0
 8000390:	617b      	str	r3, [r7, #20]
 8000392:	4b54      	ldr	r3, [pc, #336]	; (80004e4 <MX_GPIO_Init+0x188>)
 8000394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000396:	4a53      	ldr	r2, [pc, #332]	; (80004e4 <MX_GPIO_Init+0x188>)
 8000398:	f043 0304 	orr.w	r3, r3, #4
 800039c:	6313      	str	r3, [r2, #48]	; 0x30
 800039e:	4b51      	ldr	r3, [pc, #324]	; (80004e4 <MX_GPIO_Init+0x188>)
 80003a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a2:	f003 0304 	and.w	r3, r3, #4
 80003a6:	617b      	str	r3, [r7, #20]
 80003a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003aa:	2300      	movs	r3, #0
 80003ac:	613b      	str	r3, [r7, #16]
 80003ae:	4b4d      	ldr	r3, [pc, #308]	; (80004e4 <MX_GPIO_Init+0x188>)
 80003b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b2:	4a4c      	ldr	r2, [pc, #304]	; (80004e4 <MX_GPIO_Init+0x188>)
 80003b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003b8:	6313      	str	r3, [r2, #48]	; 0x30
 80003ba:	4b4a      	ldr	r3, [pc, #296]	; (80004e4 <MX_GPIO_Init+0x188>)
 80003bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003c2:	613b      	str	r3, [r7, #16]
 80003c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c6:	2300      	movs	r3, #0
 80003c8:	60fb      	str	r3, [r7, #12]
 80003ca:	4b46      	ldr	r3, [pc, #280]	; (80004e4 <MX_GPIO_Init+0x188>)
 80003cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ce:	4a45      	ldr	r2, [pc, #276]	; (80004e4 <MX_GPIO_Init+0x188>)
 80003d0:	f043 0301 	orr.w	r3, r3, #1
 80003d4:	6313      	str	r3, [r2, #48]	; 0x30
 80003d6:	4b43      	ldr	r3, [pc, #268]	; (80004e4 <MX_GPIO_Init+0x188>)
 80003d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003da:	f003 0301 	and.w	r3, r3, #1
 80003de:	60fb      	str	r3, [r7, #12]
 80003e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e2:	2300      	movs	r3, #0
 80003e4:	60bb      	str	r3, [r7, #8]
 80003e6:	4b3f      	ldr	r3, [pc, #252]	; (80004e4 <MX_GPIO_Init+0x188>)
 80003e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ea:	4a3e      	ldr	r2, [pc, #248]	; (80004e4 <MX_GPIO_Init+0x188>)
 80003ec:	f043 0302 	orr.w	r3, r3, #2
 80003f0:	6313      	str	r3, [r2, #48]	; 0x30
 80003f2:	4b3c      	ldr	r3, [pc, #240]	; (80004e4 <MX_GPIO_Init+0x188>)
 80003f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f6:	f003 0302 	and.w	r3, r3, #2
 80003fa:	60bb      	str	r3, [r7, #8]
 80003fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003fe:	2300      	movs	r3, #0
 8000400:	607b      	str	r3, [r7, #4]
 8000402:	4b38      	ldr	r3, [pc, #224]	; (80004e4 <MX_GPIO_Init+0x188>)
 8000404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000406:	4a37      	ldr	r2, [pc, #220]	; (80004e4 <MX_GPIO_Init+0x188>)
 8000408:	f043 0308 	orr.w	r3, r3, #8
 800040c:	6313      	str	r3, [r2, #48]	; 0x30
 800040e:	4b35      	ldr	r3, [pc, #212]	; (80004e4 <MX_GPIO_Init+0x188>)
 8000410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000412:	f003 0308 	and.w	r3, r3, #8
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	2108      	movs	r1, #8
 800041e:	4832      	ldr	r0, [pc, #200]	; (80004e8 <MX_GPIO_Init+0x18c>)
 8000420:	f000 fcbe 	bl	8000da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000424:	2201      	movs	r2, #1
 8000426:	2101      	movs	r1, #1
 8000428:	4830      	ldr	r0, [pc, #192]	; (80004ec <MX_GPIO_Init+0x190>)
 800042a:	f000 fcb9 	bl	8000da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800042e:	2200      	movs	r2, #0
 8000430:	f24f 0130 	movw	r1, #61488	; 0xf030
 8000434:	482e      	ldr	r0, [pc, #184]	; (80004f0 <MX_GPIO_Init+0x194>)
 8000436:	f000 fcb3 	bl	8000da0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800043a:	2304      	movs	r3, #4
 800043c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800043e:	2300      	movs	r3, #0
 8000440:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000442:	2300      	movs	r3, #0
 8000444:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000446:	f107 031c 	add.w	r3, r7, #28
 800044a:	4619      	mov	r1, r3
 800044c:	4826      	ldr	r0, [pc, #152]	; (80004e8 <MX_GPIO_Init+0x18c>)
 800044e:	f000 fb23 	bl	8000a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000452:	2308      	movs	r3, #8
 8000454:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000456:	2301      	movs	r3, #1
 8000458:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045a:	2300      	movs	r3, #0
 800045c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045e:	2300      	movs	r3, #0
 8000460:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000462:	f107 031c 	add.w	r3, r7, #28
 8000466:	4619      	mov	r1, r3
 8000468:	481f      	ldr	r0, [pc, #124]	; (80004e8 <MX_GPIO_Init+0x18c>)
 800046a:	f000 fb15 	bl	8000a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 800046e:	2332      	movs	r3, #50	; 0x32
 8000470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000472:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000476:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000478:	2300      	movs	r3, #0
 800047a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800047c:	f107 031c 	add.w	r3, r7, #28
 8000480:	4619      	mov	r1, r3
 8000482:	4819      	ldr	r0, [pc, #100]	; (80004e8 <MX_GPIO_Init+0x18c>)
 8000484:	f000 fb08 	bl	8000a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000488:	2301      	movs	r3, #1
 800048a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048c:	2301      	movs	r3, #1
 800048e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000490:	2300      	movs	r3, #0
 8000492:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000494:	2300      	movs	r3, #0
 8000496:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000498:	f107 031c 	add.w	r3, r7, #28
 800049c:	4619      	mov	r1, r3
 800049e:	4813      	ldr	r0, [pc, #76]	; (80004ec <MX_GPIO_Init+0x190>)
 80004a0:	f000 fafa 	bl	8000a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004a4:	2301      	movs	r3, #1
 80004a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80004a8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80004ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ae:	2300      	movs	r3, #0
 80004b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b2:	f107 031c 	add.w	r3, r7, #28
 80004b6:	4619      	mov	r1, r3
 80004b8:	480e      	ldr	r0, [pc, #56]	; (80004f4 <MX_GPIO_Init+0x198>)
 80004ba:	f000 faed 	bl	8000a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin PD5 */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80004be:	f24f 0330 	movw	r3, #61488	; 0xf030
 80004c2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c4:	2301      	movs	r3, #1
 80004c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c8:	2300      	movs	r3, #0
 80004ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004cc:	2300      	movs	r3, #0
 80004ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80004d0:	f107 031c 	add.w	r3, r7, #28
 80004d4:	4619      	mov	r1, r3
 80004d6:	4806      	ldr	r0, [pc, #24]	; (80004f0 <MX_GPIO_Init+0x194>)
 80004d8:	f000 fade 	bl	8000a98 <HAL_GPIO_Init>

}
 80004dc:	bf00      	nop
 80004de:	3730      	adds	r7, #48	; 0x30
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40023800 	.word	0x40023800
 80004e8:	40021000 	.word	0x40021000
 80004ec:	40020800 	.word	0x40020800
 80004f0:	40020c00 	.word	0x40020c00
 80004f4:	40020000 	.word	0x40020000

080004f8 <prvTrafficLightController>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_prvTrafficLightController */
void prvTrafficLightController(void const * argument)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	InitTrafficLeds();
 8000500:	f000 f896 	bl	8000630 <InitTrafficLeds>
	/*Turn off all the LEDs*/
	  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15,GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800050a:	483b      	ldr	r0, [pc, #236]	; (80005f8 <prvTrafficLightController+0x100>)
 800050c:	f000 fc48 	bl	8000da0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000516:	4839      	ldr	r0, [pc, #228]	; (80005fc <prvTrafficLightController+0x104>)
 8000518:	f000 fc42 	bl	8000da0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,GPIO_PIN_SET);
 800051c:	2201      	movs	r2, #1
 800051e:	2120      	movs	r1, #32
 8000520:	4835      	ldr	r0, [pc, #212]	; (80005f8 <prvTrafficLightController+0x100>)
 8000522:	f000 fc3d 	bl	8000da0 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
		/*turn on RED light of the first Set*/
	  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,GPIO_PIN_RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	2120      	movs	r1, #32
 800052a:	4833      	ldr	r0, [pc, #204]	; (80005f8 <prvTrafficLightController+0x100>)
 800052c:	f000 fc38 	bl	8000da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_SET);
 8000530:	2201      	movs	r2, #1
 8000532:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000536:	4830      	ldr	r0, [pc, #192]	; (80005f8 <prvTrafficLightController+0x100>)
 8000538:	f000 fc32 	bl	8000da0 <HAL_GPIO_WritePin>
		osDelay(1000);
 800053c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000540:	f002 f915 	bl	800276e <osDelay>

		/*turn off RED light of the first Set*/
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,GPIO_PIN_SET);
 8000544:	2201      	movs	r2, #1
 8000546:	2120      	movs	r1, #32
 8000548:	482b      	ldr	r0, [pc, #172]	; (80005f8 <prvTrafficLightController+0x100>)
 800054a:	f000 fc29 	bl	8000da0 <HAL_GPIO_WritePin>
		/*turn on Green light of the second Set*/
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 800054e:	2201      	movs	r2, #1
 8000550:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000554:	4829      	ldr	r0, [pc, #164]	; (80005fc <prvTrafficLightController+0x104>)
 8000556:	f000 fc23 	bl	8000da0 <HAL_GPIO_WritePin>
		osDelay(4000);
 800055a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800055e:	f002 f906 	bl	800276e <osDelay>

		/*turn off Green light of the second Set*/
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000568:	4824      	ldr	r0, [pc, #144]	; (80005fc <prvTrafficLightController+0x104>)
 800056a:	f000 fc19 	bl	8000da0 <HAL_GPIO_WritePin>


		/*turn on yellow light of the first Set*/
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_SET);
 800056e:	2201      	movs	r2, #1
 8000570:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000574:	4820      	ldr	r0, [pc, #128]	; (80005f8 <prvTrafficLightController+0x100>)
 8000576:	f000 fc13 	bl	8000da0 <HAL_GPIO_WritePin>
		osDelay(1500);
 800057a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800057e:	f002 f8f6 	bl	800276e <osDelay>
		/*turn off yellow light of the first Set*/
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000588:	481b      	ldr	r0, [pc, #108]	; (80005f8 <prvTrafficLightController+0x100>)
 800058a:	f000 fc09 	bl	8000da0 <HAL_GPIO_WritePin>



		/*turn on red light of the second Set*/
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	2120      	movs	r1, #32
 8000592:	4819      	ldr	r0, [pc, #100]	; (80005f8 <prvTrafficLightController+0x100>)
 8000594:	f000 fc04 	bl	8000da0 <HAL_GPIO_WritePin>
		osDelay(1000);
 8000598:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800059c:	f002 f8e7 	bl	800276e <osDelay>

		/*turn off RED light of the first Set*/
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005a6:	4814      	ldr	r0, [pc, #80]	; (80005f8 <prvTrafficLightController+0x100>)
 80005a8:	f000 fbfa 	bl	8000da0 <HAL_GPIO_WritePin>
		/*turn on green light of the first Set*/
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b2:	4811      	ldr	r0, [pc, #68]	; (80005f8 <prvTrafficLightController+0x100>)
 80005b4:	f000 fbf4 	bl	8000da0 <HAL_GPIO_WritePin>
		osDelay(4000);
 80005b8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80005bc:	f002 f8d7 	bl	800276e <osDelay>

		/*turn off green light of the first Set*/
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c6:	480c      	ldr	r0, [pc, #48]	; (80005f8 <prvTrafficLightController+0x100>)
 80005c8:	f000 fbea 	bl	8000da0 <HAL_GPIO_WritePin>
		/*turn on yellow light of the first Set*/
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d2:	4809      	ldr	r0, [pc, #36]	; (80005f8 <prvTrafficLightController+0x100>)
 80005d4:	f000 fbe4 	bl	8000da0 <HAL_GPIO_WritePin>
		osDelay(1500);
 80005d8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80005dc:	f002 f8c7 	bl	800276e <osDelay>
		/*turn off yellow light of the first Set*/
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e6:	4804      	ldr	r0, [pc, #16]	; (80005f8 <prvTrafficLightController+0x100>)
 80005e8:	f000 fbda 	bl	8000da0 <HAL_GPIO_WritePin>


		/*turn off red light of the second Set*/
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,GPIO_PIN_SET);
 80005ec:	2201      	movs	r2, #1
 80005ee:	2120      	movs	r1, #32
 80005f0:	4801      	ldr	r0, [pc, #4]	; (80005f8 <prvTrafficLightController+0x100>)
 80005f2:	f000 fbd5 	bl	8000da0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,GPIO_PIN_RESET);
 80005f6:	e796      	b.n	8000526 <prvTrafficLightController+0x2e>
 80005f8:	40020c00 	.word	0x40020c00
 80005fc:	40020000 	.word	0x40020000

08000600 <prvTimeMgntTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_prvTimeMgntTask */
void prvTimeMgntTask(void const * argument)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN prvTimeMgntTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000608:	2001      	movs	r0, #1
 800060a:	f002 f8b0 	bl	800276e <osDelay>
 800060e:	e7fb      	b.n	8000608 <prvTimeMgntTask+0x8>

08000610 <prvLightSet1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_prvLightSet1 */
void prvLightSet1(void const * argument)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN prvLightSet1 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000618:	2001      	movs	r0, #1
 800061a:	f002 f8a8 	bl	800276e <osDelay>
 800061e:	e7fb      	b.n	8000618 <prvLightSet1+0x8>

08000620 <prvLightSet2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_prvLightSet2 */
void prvLightSet2(void const * argument)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN prvLightSet2 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000628:	2001      	movs	r0, #1
 800062a:	f002 f8a0 	bl	800276e <osDelay>
 800062e:	e7fb      	b.n	8000628 <prvLightSet2+0x8>

08000630 <InitTrafficLeds>:
* @param argument: Not used
* @retval None
*/

void InitTrafficLeds(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08c      	sub	sp, #48	; 0x30
 8000634:	af00      	add	r7, sp, #0
	 __HAL_RCC_GPIOD_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <InitTrafficLeds+0x74>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a19      	ldr	r2, [pc, #100]	; (80006a4 <InitTrafficLeds+0x74>)
 8000640:	f043 0308 	orr.w	r3, r3, #8
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <InitTrafficLeds+0x74>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0308 	and.w	r3, r3, #8
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <InitTrafficLeds+0x74>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a12      	ldr	r2, [pc, #72]	; (80006a4 <InitTrafficLeds+0x74>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <InitTrafficLeds+0x74>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef BoardLEDs, USB_RED_LED;

	BoardLEDs.Mode = GPIO_MODE_OUTPUT_PP;
 800066e:	2301      	movs	r3, #1
 8000670:	623b      	str	r3, [r7, #32]
	USB_RED_LED.Mode = GPIO_MODE_OUTPUT_PP;
 8000672:	2301      	movs	r3, #1
 8000674:	60fb      	str	r3, [r7, #12]

	BoardLEDs.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000676:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800067a:	61fb      	str	r3, [r7, #28]
	USB_RED_LED.Pin = GPIO_PIN_9;
 800067c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000680:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOD, &BoardLEDs);
 8000682:	f107 031c 	add.w	r3, r7, #28
 8000686:	4619      	mov	r1, r3
 8000688:	4807      	ldr	r0, [pc, #28]	; (80006a8 <InitTrafficLeds+0x78>)
 800068a:	f000 fa05 	bl	8000a98 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOA, &USB_RED_LED);
 800068e:	f107 0308 	add.w	r3, r7, #8
 8000692:	4619      	mov	r1, r3
 8000694:	4805      	ldr	r0, [pc, #20]	; (80006ac <InitTrafficLeds+0x7c>)
 8000696:	f000 f9ff 	bl	8000a98 <HAL_GPIO_Init>
}
 800069a:	bf00      	nop
 800069c:	3730      	adds	r7, #48	; 0x30
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40020c00 	.word	0x40020c00
 80006ac:	40020000 	.word	0x40020000

080006b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b4:	b672      	cpsid	i
}
 80006b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <Error_Handler+0x8>
	...

080006bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	4b12      	ldr	r3, [pc, #72]	; (8000710 <HAL_MspInit+0x54>)
 80006c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ca:	4a11      	ldr	r2, [pc, #68]	; (8000710 <HAL_MspInit+0x54>)
 80006cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d0:	6453      	str	r3, [r2, #68]	; 0x44
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <HAL_MspInit+0x54>)
 80006d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <HAL_MspInit+0x54>)
 80006e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e6:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <HAL_MspInit+0x54>)
 80006e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ec:	6413      	str	r3, [r2, #64]	; 0x40
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <HAL_MspInit+0x54>)
 80006f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	210f      	movs	r1, #15
 80006fe:	f06f 0001 	mvn.w	r0, #1
 8000702:	f000 f9a0 	bl	8000a46 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800

08000714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000718:	e7fe      	b.n	8000718 <NMI_Handler+0x4>

0800071a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800071e:	e7fe      	b.n	800071e <HardFault_Handler+0x4>

08000720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000724:	e7fe      	b.n	8000724 <MemManage_Handler+0x4>

08000726 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800072a:	e7fe      	b.n	800072a <BusFault_Handler+0x4>

0800072c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000730:	e7fe      	b.n	8000730 <UsageFault_Handler+0x4>

08000732 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000744:	f000 f8a2 	bl	800088c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000748:	f003 f9de 	bl	8003b08 <xTaskGetSchedulerState>
 800074c:	4603      	mov	r3, r0
 800074e:	2b01      	cmp	r3, #1
 8000750:	d001      	beq.n	8000756 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000752:	f003 fca1 	bl	8004098 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
	...

0800075c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000760:	4802      	ldr	r0, [pc, #8]	; (800076c <OTG_FS_IRQHandler+0x10>)
 8000762:	f000 fb36 	bl	8000dd2 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000280 	.word	0x20000280

08000770 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <SystemInit+0x20>)
 8000776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800077a:	4a05      	ldr	r2, [pc, #20]	; (8000790 <SystemInit+0x20>)
 800077c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000780:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000794:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000798:	480d      	ldr	r0, [pc, #52]	; (80007d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800079a:	490e      	ldr	r1, [pc, #56]	; (80007d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800079c:	4a0e      	ldr	r2, [pc, #56]	; (80007d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800079e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a0:	e002      	b.n	80007a8 <LoopCopyDataInit>

080007a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007a6:	3304      	adds	r3, #4

080007a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007ac:	d3f9      	bcc.n	80007a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ae:	4a0b      	ldr	r2, [pc, #44]	; (80007dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80007b0:	4c0b      	ldr	r4, [pc, #44]	; (80007e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80007b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007b4:	e001      	b.n	80007ba <LoopFillZerobss>

080007b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b8:	3204      	adds	r2, #4

080007ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007bc:	d3fb      	bcc.n	80007b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007be:	f7ff ffd7 	bl	8000770 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007c2:	f003 fea3 	bl	800450c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007c6:	f7ff fd25 	bl	8000214 <main>
  bx  lr    
 80007ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80007cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80007d8:	08004640 	.word	0x08004640
  ldr r2, =_sbss
 80007dc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80007e0:	200042f4 	.word	0x200042f4

080007e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007e4:	e7fe      	b.n	80007e4 <ADC_IRQHandler>
	...

080007e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007ec:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <HAL_Init+0x40>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a0d      	ldr	r2, [pc, #52]	; (8000828 <HAL_Init+0x40>)
 80007f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007f8:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <HAL_Init+0x40>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <HAL_Init+0x40>)
 80007fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000802:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <HAL_Init+0x40>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a07      	ldr	r2, [pc, #28]	; (8000828 <HAL_Init+0x40>)
 800080a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800080e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000810:	2003      	movs	r0, #3
 8000812:	f000 f90d 	bl	8000a30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000816:	200f      	movs	r0, #15
 8000818:	f000 f808 	bl	800082c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800081c:	f7ff ff4e 	bl	80006bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000820:	2300      	movs	r3, #0
}
 8000822:	4618      	mov	r0, r3
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40023c00 	.word	0x40023c00

0800082c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <HAL_InitTick+0x54>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <HAL_InitTick+0x58>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	4619      	mov	r1, r3
 800083e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000842:	fbb3 f3f1 	udiv	r3, r3, r1
 8000846:	fbb2 f3f3 	udiv	r3, r2, r3
 800084a:	4618      	mov	r0, r3
 800084c:	f000 f917 	bl	8000a7e <HAL_SYSTICK_Config>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	e00e      	b.n	8000878 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b0f      	cmp	r3, #15
 800085e:	d80a      	bhi.n	8000876 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000860:	2200      	movs	r2, #0
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	f04f 30ff 	mov.w	r0, #4294967295
 8000868:	f000 f8ed 	bl	8000a46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800086c:	4a06      	ldr	r2, [pc, #24]	; (8000888 <HAL_InitTick+0x5c>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000872:	2300      	movs	r3, #0
 8000874:	e000      	b.n	8000878 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000876:	2301      	movs	r3, #1
}
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000000 	.word	0x20000000
 8000884:	20000008 	.word	0x20000008
 8000888:	20000004 	.word	0x20000004

0800088c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <HAL_IncTick+0x20>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	461a      	mov	r2, r3
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <HAL_IncTick+0x24>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4413      	add	r3, r2
 800089c:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <HAL_IncTick+0x24>)
 800089e:	6013      	str	r3, [r2, #0]
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	20000008 	.word	0x20000008
 80008b0:	2000059c 	.word	0x2000059c

080008b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  return uwTick;
 80008b8:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <HAL_GetTick+0x14>)
 80008ba:	681b      	ldr	r3, [r3, #0]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	2000059c 	.word	0x2000059c

080008cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f003 0307 	and.w	r3, r3, #7
 80008da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <__NVIC_SetPriorityGrouping+0x44>)
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008e2:	68ba      	ldr	r2, [r7, #8]
 80008e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008e8:	4013      	ands	r3, r2
 80008ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008fe:	4a04      	ldr	r2, [pc, #16]	; (8000910 <__NVIC_SetPriorityGrouping+0x44>)
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	60d3      	str	r3, [r2, #12]
}
 8000904:	bf00      	nop
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000918:	4b04      	ldr	r3, [pc, #16]	; (800092c <__NVIC_GetPriorityGrouping+0x18>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	0a1b      	lsrs	r3, r3, #8
 800091e:	f003 0307 	and.w	r3, r3, #7
}
 8000922:	4618      	mov	r0, r3
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	6039      	str	r1, [r7, #0]
 800093a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800093c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000940:	2b00      	cmp	r3, #0
 8000942:	db0a      	blt.n	800095a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	b2da      	uxtb	r2, r3
 8000948:	490c      	ldr	r1, [pc, #48]	; (800097c <__NVIC_SetPriority+0x4c>)
 800094a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094e:	0112      	lsls	r2, r2, #4
 8000950:	b2d2      	uxtb	r2, r2
 8000952:	440b      	add	r3, r1
 8000954:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000958:	e00a      	b.n	8000970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4908      	ldr	r1, [pc, #32]	; (8000980 <__NVIC_SetPriority+0x50>)
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	f003 030f 	and.w	r3, r3, #15
 8000966:	3b04      	subs	r3, #4
 8000968:	0112      	lsls	r2, r2, #4
 800096a:	b2d2      	uxtb	r2, r2
 800096c:	440b      	add	r3, r1
 800096e:	761a      	strb	r2, [r3, #24]
}
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	e000e100 	.word	0xe000e100
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000984:	b480      	push	{r7}
 8000986:	b089      	sub	sp, #36	; 0x24
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	f003 0307 	and.w	r3, r3, #7
 8000996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	f1c3 0307 	rsb	r3, r3, #7
 800099e:	2b04      	cmp	r3, #4
 80009a0:	bf28      	it	cs
 80009a2:	2304      	movcs	r3, #4
 80009a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	3304      	adds	r3, #4
 80009aa:	2b06      	cmp	r3, #6
 80009ac:	d902      	bls.n	80009b4 <NVIC_EncodePriority+0x30>
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	3b03      	subs	r3, #3
 80009b2:	e000      	b.n	80009b6 <NVIC_EncodePriority+0x32>
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b8:	f04f 32ff 	mov.w	r2, #4294967295
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43da      	mvns	r2, r3
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	401a      	ands	r2, r3
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009cc:	f04f 31ff 	mov.w	r1, #4294967295
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	fa01 f303 	lsl.w	r3, r1, r3
 80009d6:	43d9      	mvns	r1, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009dc:	4313      	orrs	r3, r2
         );
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3724      	adds	r7, #36	; 0x24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
	...

080009ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009fc:	d301      	bcc.n	8000a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009fe:	2301      	movs	r3, #1
 8000a00:	e00f      	b.n	8000a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a02:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <SysTick_Config+0x40>)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a0a:	210f      	movs	r1, #15
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a10:	f7ff ff8e 	bl	8000930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <SysTick_Config+0x40>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a1a:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <SysTick_Config+0x40>)
 8000a1c:	2207      	movs	r2, #7
 8000a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	e000e010 	.word	0xe000e010

08000a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f7ff ff47 	bl	80008cc <__NVIC_SetPriorityGrouping>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b086      	sub	sp, #24
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	60b9      	str	r1, [r7, #8]
 8000a50:	607a      	str	r2, [r7, #4]
 8000a52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a58:	f7ff ff5c 	bl	8000914 <__NVIC_GetPriorityGrouping>
 8000a5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	68b9      	ldr	r1, [r7, #8]
 8000a62:	6978      	ldr	r0, [r7, #20]
 8000a64:	f7ff ff8e 	bl	8000984 <NVIC_EncodePriority>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a6e:	4611      	mov	r1, r2
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ff5d 	bl	8000930 <__NVIC_SetPriority>
}
 8000a76:	bf00      	nop
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b082      	sub	sp, #8
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f7ff ffb0 	bl	80009ec <SysTick_Config>
 8000a8c:	4603      	mov	r3, r0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b089      	sub	sp, #36	; 0x24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
 8000ab2:	e159      	b.n	8000d68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8000abc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	697a      	ldr	r2, [r7, #20]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	f040 8148 	bne.w	8000d62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f003 0303 	and.w	r3, r3, #3
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d005      	beq.n	8000aea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d130      	bne.n	8000b4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	2203      	movs	r2, #3
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	43db      	mvns	r3, r3
 8000afc:	69ba      	ldr	r2, [r7, #24]
 8000afe:	4013      	ands	r3, r2
 8000b00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	68da      	ldr	r2, [r3, #12]
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	69ba      	ldr	r2, [r7, #24]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	69ba      	ldr	r2, [r7, #24]
 8000b18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b20:	2201      	movs	r2, #1
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	69ba      	ldr	r2, [r7, #24]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	091b      	lsrs	r3, r3, #4
 8000b36:	f003 0201 	and.w	r2, r3, #1
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	69ba      	ldr	r2, [r7, #24]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	69ba      	ldr	r2, [r7, #24]
 8000b4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f003 0303 	and.w	r3, r3, #3
 8000b54:	2b03      	cmp	r3, #3
 8000b56:	d017      	beq.n	8000b88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	2203      	movs	r2, #3
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	69ba      	ldr	r2, [r7, #24]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	689a      	ldr	r2, [r3, #8]
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	69ba      	ldr	r2, [r7, #24]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	69ba      	ldr	r2, [r7, #24]
 8000b86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f003 0303 	and.w	r3, r3, #3
 8000b90:	2b02      	cmp	r3, #2
 8000b92:	d123      	bne.n	8000bdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	08da      	lsrs	r2, r3, #3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3208      	adds	r2, #8
 8000b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	f003 0307 	and.w	r3, r3, #7
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	220f      	movs	r2, #15
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	69ba      	ldr	r2, [r7, #24]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	691a      	ldr	r2, [r3, #16]
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	69ba      	ldr	r2, [r7, #24]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	08da      	lsrs	r2, r3, #3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	3208      	adds	r2, #8
 8000bd6:	69b9      	ldr	r1, [r7, #24]
 8000bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	2203      	movs	r2, #3
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	43db      	mvns	r3, r3
 8000bee:	69ba      	ldr	r2, [r7, #24]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f003 0203 	and.w	r2, r3, #3
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	f000 80a2 	beq.w	8000d62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	4b57      	ldr	r3, [pc, #348]	; (8000d80 <HAL_GPIO_Init+0x2e8>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	4a56      	ldr	r2, [pc, #344]	; (8000d80 <HAL_GPIO_Init+0x2e8>)
 8000c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2e:	4b54      	ldr	r3, [pc, #336]	; (8000d80 <HAL_GPIO_Init+0x2e8>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c3a:	4a52      	ldr	r2, [pc, #328]	; (8000d84 <HAL_GPIO_Init+0x2ec>)
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	089b      	lsrs	r3, r3, #2
 8000c40:	3302      	adds	r3, #2
 8000c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	f003 0303 	and.w	r3, r3, #3
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	220f      	movs	r2, #15
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43db      	mvns	r3, r3
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a49      	ldr	r2, [pc, #292]	; (8000d88 <HAL_GPIO_Init+0x2f0>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d019      	beq.n	8000c9a <HAL_GPIO_Init+0x202>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a48      	ldr	r2, [pc, #288]	; (8000d8c <HAL_GPIO_Init+0x2f4>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d013      	beq.n	8000c96 <HAL_GPIO_Init+0x1fe>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a47      	ldr	r2, [pc, #284]	; (8000d90 <HAL_GPIO_Init+0x2f8>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d00d      	beq.n	8000c92 <HAL_GPIO_Init+0x1fa>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a46      	ldr	r2, [pc, #280]	; (8000d94 <HAL_GPIO_Init+0x2fc>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d007      	beq.n	8000c8e <HAL_GPIO_Init+0x1f6>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a45      	ldr	r2, [pc, #276]	; (8000d98 <HAL_GPIO_Init+0x300>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d101      	bne.n	8000c8a <HAL_GPIO_Init+0x1f2>
 8000c86:	2304      	movs	r3, #4
 8000c88:	e008      	b.n	8000c9c <HAL_GPIO_Init+0x204>
 8000c8a:	2307      	movs	r3, #7
 8000c8c:	e006      	b.n	8000c9c <HAL_GPIO_Init+0x204>
 8000c8e:	2303      	movs	r3, #3
 8000c90:	e004      	b.n	8000c9c <HAL_GPIO_Init+0x204>
 8000c92:	2302      	movs	r3, #2
 8000c94:	e002      	b.n	8000c9c <HAL_GPIO_Init+0x204>
 8000c96:	2301      	movs	r3, #1
 8000c98:	e000      	b.n	8000c9c <HAL_GPIO_Init+0x204>
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	69fa      	ldr	r2, [r7, #28]
 8000c9e:	f002 0203 	and.w	r2, r2, #3
 8000ca2:	0092      	lsls	r2, r2, #2
 8000ca4:	4093      	lsls	r3, r2
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cac:	4935      	ldr	r1, [pc, #212]	; (8000d84 <HAL_GPIO_Init+0x2ec>)
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	089b      	lsrs	r3, r3, #2
 8000cb2:	3302      	adds	r3, #2
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cba:	4b38      	ldr	r3, [pc, #224]	; (8000d9c <HAL_GPIO_Init+0x304>)
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d003      	beq.n	8000cde <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000cde:	4a2f      	ldr	r2, [pc, #188]	; (8000d9c <HAL_GPIO_Init+0x304>)
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ce4:	4b2d      	ldr	r3, [pc, #180]	; (8000d9c <HAL_GPIO_Init+0x304>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	43db      	mvns	r3, r3
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d003      	beq.n	8000d08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d08:	4a24      	ldr	r2, [pc, #144]	; (8000d9c <HAL_GPIO_Init+0x304>)
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d0e:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <HAL_GPIO_Init+0x304>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	43db      	mvns	r3, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d003      	beq.n	8000d32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d32:	4a1a      	ldr	r2, [pc, #104]	; (8000d9c <HAL_GPIO_Init+0x304>)
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d38:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <HAL_GPIO_Init+0x304>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	43db      	mvns	r3, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d003      	beq.n	8000d5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d5c:	4a0f      	ldr	r2, [pc, #60]	; (8000d9c <HAL_GPIO_Init+0x304>)
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3301      	adds	r3, #1
 8000d66:	61fb      	str	r3, [r7, #28]
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	2b0f      	cmp	r3, #15
 8000d6c:	f67f aea2 	bls.w	8000ab4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
 8000d74:	3724      	adds	r7, #36	; 0x24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40013800 	.word	0x40013800
 8000d88:	40020000 	.word	0x40020000
 8000d8c:	40020400 	.word	0x40020400
 8000d90:	40020800 	.word	0x40020800
 8000d94:	40020c00 	.word	0x40020c00
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	40013c00 	.word	0x40013c00

08000da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	460b      	mov	r3, r1
 8000daa:	807b      	strh	r3, [r7, #2]
 8000dac:	4613      	mov	r3, r2
 8000dae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000db0:	787b      	ldrb	r3, [r7, #1]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000db6:	887a      	ldrh	r2, [r7, #2]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000dbc:	e003      	b.n	8000dc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000dbe:	887b      	ldrh	r3, [r7, #2]
 8000dc0:	041a      	lsls	r2, r3, #16
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	619a      	str	r2, [r3, #24]
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b086      	sub	sp, #24
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f001 fb00 	bl	80023ee <USB_GetMode>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	f040 80f6 	bne.w	8000fe2 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f001 fae4 	bl	80023c8 <USB_ReadInterrupts>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f000 80ec 	beq.w	8000fe0 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f001 fadb 	bl	80023c8 <USB_ReadInterrupts>
 8000e12:	4603      	mov	r3, r0
 8000e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000e1c:	d104      	bne.n	8000e28 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000e26:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f001 facb 	bl	80023c8 <USB_ReadInterrupts>
 8000e32:	4603      	mov	r3, r0
 8000e34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000e3c:	d104      	bne.n	8000e48 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000e46:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f001 fabb 	bl	80023c8 <USB_ReadInterrupts>
 8000e52:	4603      	mov	r3, r0
 8000e54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000e5c:	d104      	bne.n	8000e68 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000e66:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f001 faab 	bl	80023c8 <USB_ReadInterrupts>
 8000e72:	4603      	mov	r3, r0
 8000e74:	f003 0302 	and.w	r3, r3, #2
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d103      	bne.n	8000e84 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2202      	movs	r2, #2
 8000e82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f001 fa9d 	bl	80023c8 <USB_ReadInterrupts>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e98:	d11c      	bne.n	8000ed4 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000ea2:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d10f      	bne.n	8000ed4 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8000eb4:	2110      	movs	r1, #16
 8000eb6:	6938      	ldr	r0, [r7, #16]
 8000eb8:	f001 f9ca 	bl	8002250 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8000ebc:	6938      	ldr	r0, [r7, #16]
 8000ebe:	f001 f9fb 	bl	80022b8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f001 fa9e 	bl	800240a <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f000 f89e 	bl	8001010 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f001 fa75 	bl	80023c8 <USB_ReadInterrupts>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ee8:	d102      	bne.n	8000ef0 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f001 f84c 	bl	8001f88 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f001 fa67 	bl	80023c8 <USB_ReadInterrupts>
 8000efa:	4603      	mov	r3, r0
 8000efc:	f003 0308 	and.w	r3, r3, #8
 8000f00:	2b08      	cmp	r3, #8
 8000f02:	d106      	bne.n	8000f12 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f000 f86f 	bl	8000fe8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2208      	movs	r2, #8
 8000f10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f001 fa56 	bl	80023c8 <USB_ReadInterrupts>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	f003 0310 	and.w	r3, r3, #16
 8000f22:	2b10      	cmp	r3, #16
 8000f24:	d101      	bne.n	8000f2a <HAL_HCD_IRQHandler+0x158>
 8000f26:	2301      	movs	r3, #1
 8000f28:	e000      	b.n	8000f2c <HAL_HCD_IRQHandler+0x15a>
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d012      	beq.n	8000f56 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	699a      	ldr	r2, [r3, #24]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f022 0210 	bic.w	r2, r2, #16
 8000f3e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f000 ff4f 	bl	8001de4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	699a      	ldr	r2, [r3, #24]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f042 0210 	orr.w	r2, r2, #16
 8000f54:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f001 fa34 	bl	80023c8 <USB_ReadInterrupts>
 8000f60:	4603      	mov	r3, r0
 8000f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000f6a:	d13a      	bne.n	8000fe2 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f001 fa84 	bl	800247e <USB_HC_ReadInterrupt>
 8000f76:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	e025      	b.n	8000fca <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	f003 030f 	and.w	r3, r3, #15
 8000f84:	68ba      	ldr	r2, [r7, #8]
 8000f86:	fa22 f303 	lsr.w	r3, r2, r3
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d018      	beq.n	8000fc4 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	015a      	lsls	r2, r3, #5
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4413      	add	r3, r2
 8000f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000fa8:	d106      	bne.n	8000fb8 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	4619      	mov	r1, r3
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f000 f859 	bl	8001068 <HCD_HC_IN_IRQHandler>
 8000fb6:	e005      	b.n	8000fc4 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f000 fba7 	bl	8001712 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	697a      	ldr	r2, [r7, #20]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d3d4      	bcc.n	8000f7e <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000fdc:	615a      	str	r2, [r3, #20]
 8000fde:	e000      	b.n	8000fe2 <HAL_HCD_IRQHandler+0x210>
      return;
 8000fe0:	bf00      	nop
    }
  }
}
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	70fb      	strb	r3, [r7, #3]
 8001058:	4613      	mov	r3, r2
 800105a:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800107e:	78fb      	ldrb	r3, [r7, #3]
 8001080:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	015a      	lsls	r2, r3, #5
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	4413      	add	r3, r2
 800108a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	f003 0304 	and.w	r3, r3, #4
 8001094:	2b04      	cmp	r3, #4
 8001096:	d11a      	bne.n	80010ce <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	015a      	lsls	r2, r3, #5
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	4413      	add	r3, r2
 80010a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010a4:	461a      	mov	r2, r3
 80010a6:	2304      	movs	r3, #4
 80010a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	212c      	movs	r1, #44	; 0x2c
 80010b0:	fb01 f303 	mul.w	r3, r1, r3
 80010b4:	4413      	add	r3, r2
 80010b6:	3361      	adds	r3, #97	; 0x61
 80010b8:	2206      	movs	r2, #6
 80010ba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	68fa      	ldr	r2, [r7, #12]
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	4611      	mov	r1, r2
 80010c6:	4618      	mov	r0, r3
 80010c8:	f001 f9ea 	bl	80024a0 <USB_HC_Halt>
 80010cc:	e0af      	b.n	800122e <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	015a      	lsls	r2, r3, #5
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	4413      	add	r3, r2
 80010d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010e4:	d11b      	bne.n	800111e <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	015a      	lsls	r2, r3, #5
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	4413      	add	r3, r2
 80010ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010f2:	461a      	mov	r2, r3
 80010f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	212c      	movs	r1, #44	; 0x2c
 8001100:	fb01 f303 	mul.w	r3, r1, r3
 8001104:	4413      	add	r3, r2
 8001106:	3361      	adds	r3, #97	; 0x61
 8001108:	2207      	movs	r2, #7
 800110a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	68fa      	ldr	r2, [r7, #12]
 8001112:	b2d2      	uxtb	r2, r2
 8001114:	4611      	mov	r1, r2
 8001116:	4618      	mov	r0, r3
 8001118:	f001 f9c2 	bl	80024a0 <USB_HC_Halt>
 800111c:	e087      	b.n	800122e <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	015a      	lsls	r2, r3, #5
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	4413      	add	r3, r2
 8001126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f003 0320 	and.w	r3, r3, #32
 8001130:	2b20      	cmp	r3, #32
 8001132:	d109      	bne.n	8001148 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	015a      	lsls	r2, r3, #5
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4413      	add	r3, r2
 800113c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001140:	461a      	mov	r2, r3
 8001142:	2320      	movs	r3, #32
 8001144:	6093      	str	r3, [r2, #8]
 8001146:	e072      	b.n	800122e <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	015a      	lsls	r2, r3, #5
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4413      	add	r3, r2
 8001150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f003 0308 	and.w	r3, r3, #8
 800115a:	2b08      	cmp	r3, #8
 800115c:	d11a      	bne.n	8001194 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	015a      	lsls	r2, r3, #5
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	4413      	add	r3, r2
 8001166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800116a:	461a      	mov	r2, r3
 800116c:	2308      	movs	r3, #8
 800116e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	212c      	movs	r1, #44	; 0x2c
 8001176:	fb01 f303 	mul.w	r3, r1, r3
 800117a:	4413      	add	r3, r2
 800117c:	3361      	adds	r3, #97	; 0x61
 800117e:	2205      	movs	r2, #5
 8001180:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f001 f987 	bl	80024a0 <USB_HC_Halt>
 8001192:	e04c      	b.n	800122e <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	015a      	lsls	r2, r3, #5
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4413      	add	r3, r2
 800119c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011aa:	d11b      	bne.n	80011e4 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	015a      	lsls	r2, r3, #5
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4413      	add	r3, r2
 80011b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011b8:	461a      	mov	r2, r3
 80011ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011be:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	212c      	movs	r1, #44	; 0x2c
 80011c6:	fb01 f303 	mul.w	r3, r1, r3
 80011ca:	4413      	add	r3, r2
 80011cc:	3361      	adds	r3, #97	; 0x61
 80011ce:	2208      	movs	r2, #8
 80011d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	4611      	mov	r1, r2
 80011dc:	4618      	mov	r0, r3
 80011de:	f001 f95f 	bl	80024a0 <USB_HC_Halt>
 80011e2:	e024      	b.n	800122e <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	015a      	lsls	r2, r3, #5
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	4413      	add	r3, r2
 80011ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f6:	2b80      	cmp	r3, #128	; 0x80
 80011f8:	d119      	bne.n	800122e <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	015a      	lsls	r2, r3, #5
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	4413      	add	r3, r2
 8001202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001206:	461a      	mov	r2, r3
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	212c      	movs	r1, #44	; 0x2c
 8001212:	fb01 f303 	mul.w	r3, r1, r3
 8001216:	4413      	add	r3, r2
 8001218:	3361      	adds	r3, #97	; 0x61
 800121a:	2206      	movs	r2, #6
 800121c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f001 f939 	bl	80024a0 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	015a      	lsls	r2, r3, #5
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	4413      	add	r3, r2
 8001236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001244:	d112      	bne.n	800126c <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f001 f925 	bl	80024a0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	015a      	lsls	r2, r3, #5
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	4413      	add	r3, r2
 800125e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001262:	461a      	mov	r2, r3
 8001264:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001268:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800126a:	e24e      	b.n	800170a <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	015a      	lsls	r2, r3, #5
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4413      	add	r3, r2
 8001274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	2b01      	cmp	r3, #1
 8001280:	f040 80df 	bne.w	8001442 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	691b      	ldr	r3, [r3, #16]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d019      	beq.n	80012c0 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	212c      	movs	r1, #44	; 0x2c
 8001292:	fb01 f303 	mul.w	r3, r1, r3
 8001296:	4413      	add	r3, r2
 8001298:	3348      	adds	r3, #72	; 0x48
 800129a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	0159      	lsls	r1, r3, #5
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	440b      	add	r3, r1
 80012a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80012ae:	1ad2      	subs	r2, r2, r3
 80012b0:	6879      	ldr	r1, [r7, #4]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	202c      	movs	r0, #44	; 0x2c
 80012b6:	fb00 f303 	mul.w	r3, r0, r3
 80012ba:	440b      	add	r3, r1
 80012bc:	3350      	adds	r3, #80	; 0x50
 80012be:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	212c      	movs	r1, #44	; 0x2c
 80012c6:	fb01 f303 	mul.w	r3, r1, r3
 80012ca:	4413      	add	r3, r2
 80012cc:	3361      	adds	r3, #97	; 0x61
 80012ce:	2201      	movs	r2, #1
 80012d0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	212c      	movs	r1, #44	; 0x2c
 80012d8:	fb01 f303 	mul.w	r3, r1, r3
 80012dc:	4413      	add	r3, r2
 80012de:	335c      	adds	r3, #92	; 0x5c
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4413      	add	r3, r2
 80012ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012f0:	461a      	mov	r2, r3
 80012f2:	2301      	movs	r3, #1
 80012f4:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	212c      	movs	r1, #44	; 0x2c
 80012fc:	fb01 f303 	mul.w	r3, r1, r3
 8001300:	4413      	add	r3, r2
 8001302:	333f      	adds	r3, #63	; 0x3f
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d009      	beq.n	800131e <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	212c      	movs	r1, #44	; 0x2c
 8001310:	fb01 f303 	mul.w	r3, r1, r3
 8001314:	4413      	add	r3, r2
 8001316:	333f      	adds	r3, #63	; 0x3f
 8001318:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800131a:	2b02      	cmp	r3, #2
 800131c:	d111      	bne.n	8001342 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	b2d2      	uxtb	r2, r2
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f001 f8b9 	bl	80024a0 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	015a      	lsls	r2, r3, #5
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4413      	add	r3, r2
 8001336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800133a:	461a      	mov	r2, r3
 800133c:	2310      	movs	r3, #16
 800133e:	6093      	str	r3, [r2, #8]
 8001340:	e03a      	b.n	80013b8 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	212c      	movs	r1, #44	; 0x2c
 8001348:	fb01 f303 	mul.w	r3, r1, r3
 800134c:	4413      	add	r3, r2
 800134e:	333f      	adds	r3, #63	; 0x3f
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b03      	cmp	r3, #3
 8001354:	d009      	beq.n	800136a <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	212c      	movs	r1, #44	; 0x2c
 800135c:	fb01 f303 	mul.w	r3, r1, r3
 8001360:	4413      	add	r3, r2
 8001362:	333f      	adds	r3, #63	; 0x3f
 8001364:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001366:	2b01      	cmp	r3, #1
 8001368:	d126      	bne.n	80013b8 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	015a      	lsls	r2, r3, #5
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	4413      	add	r3, r2
 8001372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	0151      	lsls	r1, r2, #5
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	440a      	add	r2, r1
 8001380:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001384:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001388:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	212c      	movs	r1, #44	; 0x2c
 8001390:	fb01 f303 	mul.w	r3, r1, r3
 8001394:	4413      	add	r3, r2
 8001396:	3360      	adds	r3, #96	; 0x60
 8001398:	2201      	movs	r2, #1
 800139a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	b2d9      	uxtb	r1, r3
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	202c      	movs	r0, #44	; 0x2c
 80013a6:	fb00 f303 	mul.w	r3, r0, r3
 80013aa:	4413      	add	r3, r2
 80013ac:	3360      	adds	r3, #96	; 0x60
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	461a      	mov	r2, r3
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff fe4a 	bl	800104c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d12b      	bne.n	8001418 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	212c      	movs	r1, #44	; 0x2c
 80013c6:	fb01 f303 	mul.w	r3, r1, r3
 80013ca:	4413      	add	r3, r2
 80013cc:	3348      	adds	r3, #72	; 0x48
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	202c      	movs	r0, #44	; 0x2c
 80013d6:	fb00 f202 	mul.w	r2, r0, r2
 80013da:	440a      	add	r2, r1
 80013dc:	3240      	adds	r2, #64	; 0x40
 80013de:	8812      	ldrh	r2, [r2, #0]
 80013e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	f000 818e 	beq.w	800170a <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	212c      	movs	r1, #44	; 0x2c
 80013f4:	fb01 f303 	mul.w	r3, r1, r3
 80013f8:	4413      	add	r3, r2
 80013fa:	3354      	adds	r3, #84	; 0x54
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	f083 0301 	eor.w	r3, r3, #1
 8001402:	b2d8      	uxtb	r0, r3
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	212c      	movs	r1, #44	; 0x2c
 800140a:	fb01 f303 	mul.w	r3, r1, r3
 800140e:	4413      	add	r3, r2
 8001410:	3354      	adds	r3, #84	; 0x54
 8001412:	4602      	mov	r2, r0
 8001414:	701a      	strb	r2, [r3, #0]
}
 8001416:	e178      	b.n	800170a <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	212c      	movs	r1, #44	; 0x2c
 800141e:	fb01 f303 	mul.w	r3, r1, r3
 8001422:	4413      	add	r3, r2
 8001424:	3354      	adds	r3, #84	; 0x54
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	f083 0301 	eor.w	r3, r3, #1
 800142c:	b2d8      	uxtb	r0, r3
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	212c      	movs	r1, #44	; 0x2c
 8001434:	fb01 f303 	mul.w	r3, r1, r3
 8001438:	4413      	add	r3, r2
 800143a:	3354      	adds	r3, #84	; 0x54
 800143c:	4602      	mov	r2, r0
 800143e:	701a      	strb	r2, [r3, #0]
}
 8001440:	e163      	b.n	800170a <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	015a      	lsls	r2, r3, #5
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	4413      	add	r3, r2
 800144a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b02      	cmp	r3, #2
 8001456:	f040 80f6 	bne.w	8001646 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	212c      	movs	r1, #44	; 0x2c
 8001460:	fb01 f303 	mul.w	r3, r1, r3
 8001464:	4413      	add	r3, r2
 8001466:	3361      	adds	r3, #97	; 0x61
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d109      	bne.n	8001482 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	212c      	movs	r1, #44	; 0x2c
 8001474:	fb01 f303 	mul.w	r3, r1, r3
 8001478:	4413      	add	r3, r2
 800147a:	3360      	adds	r3, #96	; 0x60
 800147c:	2201      	movs	r2, #1
 800147e:	701a      	strb	r2, [r3, #0]
 8001480:	e0c9      	b.n	8001616 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	212c      	movs	r1, #44	; 0x2c
 8001488:	fb01 f303 	mul.w	r3, r1, r3
 800148c:	4413      	add	r3, r2
 800148e:	3361      	adds	r3, #97	; 0x61
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b05      	cmp	r3, #5
 8001494:	d109      	bne.n	80014aa <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	212c      	movs	r1, #44	; 0x2c
 800149c:	fb01 f303 	mul.w	r3, r1, r3
 80014a0:	4413      	add	r3, r2
 80014a2:	3360      	adds	r3, #96	; 0x60
 80014a4:	2205      	movs	r2, #5
 80014a6:	701a      	strb	r2, [r3, #0]
 80014a8:	e0b5      	b.n	8001616 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	212c      	movs	r1, #44	; 0x2c
 80014b0:	fb01 f303 	mul.w	r3, r1, r3
 80014b4:	4413      	add	r3, r2
 80014b6:	3361      	adds	r3, #97	; 0x61
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b06      	cmp	r3, #6
 80014bc:	d009      	beq.n	80014d2 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	212c      	movs	r1, #44	; 0x2c
 80014c4:	fb01 f303 	mul.w	r3, r1, r3
 80014c8:	4413      	add	r3, r2
 80014ca:	3361      	adds	r3, #97	; 0x61
 80014cc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80014ce:	2b08      	cmp	r3, #8
 80014d0:	d150      	bne.n	8001574 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	212c      	movs	r1, #44	; 0x2c
 80014d8:	fb01 f303 	mul.w	r3, r1, r3
 80014dc:	4413      	add	r3, r2
 80014de:	335c      	adds	r3, #92	; 0x5c
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	1c5a      	adds	r2, r3, #1
 80014e4:	6879      	ldr	r1, [r7, #4]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	202c      	movs	r0, #44	; 0x2c
 80014ea:	fb00 f303 	mul.w	r3, r0, r3
 80014ee:	440b      	add	r3, r1
 80014f0:	335c      	adds	r3, #92	; 0x5c
 80014f2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	212c      	movs	r1, #44	; 0x2c
 80014fa:	fb01 f303 	mul.w	r3, r1, r3
 80014fe:	4413      	add	r3, r2
 8001500:	335c      	adds	r3, #92	; 0x5c
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b02      	cmp	r3, #2
 8001506:	d912      	bls.n	800152e <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	212c      	movs	r1, #44	; 0x2c
 800150e:	fb01 f303 	mul.w	r3, r1, r3
 8001512:	4413      	add	r3, r2
 8001514:	335c      	adds	r3, #92	; 0x5c
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	212c      	movs	r1, #44	; 0x2c
 8001520:	fb01 f303 	mul.w	r3, r1, r3
 8001524:	4413      	add	r3, r2
 8001526:	3360      	adds	r3, #96	; 0x60
 8001528:	2204      	movs	r2, #4
 800152a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800152c:	e073      	b.n	8001616 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	212c      	movs	r1, #44	; 0x2c
 8001534:	fb01 f303 	mul.w	r3, r1, r3
 8001538:	4413      	add	r3, r2
 800153a:	3360      	adds	r3, #96	; 0x60
 800153c:	2202      	movs	r2, #2
 800153e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	015a      	lsls	r2, r3, #5
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	4413      	add	r3, r2
 8001548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001556:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800155e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	015a      	lsls	r2, r3, #5
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4413      	add	r3, r2
 8001568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800156c:	461a      	mov	r2, r3
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001572:	e050      	b.n	8001616 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	212c      	movs	r1, #44	; 0x2c
 800157a:	fb01 f303 	mul.w	r3, r1, r3
 800157e:	4413      	add	r3, r2
 8001580:	3361      	adds	r3, #97	; 0x61
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b03      	cmp	r3, #3
 8001586:	d122      	bne.n	80015ce <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	212c      	movs	r1, #44	; 0x2c
 800158e:	fb01 f303 	mul.w	r3, r1, r3
 8001592:	4413      	add	r3, r2
 8001594:	3360      	adds	r3, #96	; 0x60
 8001596:	2202      	movs	r2, #2
 8001598:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	015a      	lsls	r2, r3, #5
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	4413      	add	r3, r2
 80015a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80015b0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80015b8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	015a      	lsls	r2, r3, #5
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	4413      	add	r3, r2
 80015c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015c6:	461a      	mov	r2, r3
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	e023      	b.n	8001616 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	212c      	movs	r1, #44	; 0x2c
 80015d4:	fb01 f303 	mul.w	r3, r1, r3
 80015d8:	4413      	add	r3, r2
 80015da:	3361      	adds	r3, #97	; 0x61
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b07      	cmp	r3, #7
 80015e0:	d119      	bne.n	8001616 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	212c      	movs	r1, #44	; 0x2c
 80015e8:	fb01 f303 	mul.w	r3, r1, r3
 80015ec:	4413      	add	r3, r2
 80015ee:	335c      	adds	r3, #92	; 0x5c
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	1c5a      	adds	r2, r3, #1
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	202c      	movs	r0, #44	; 0x2c
 80015fa:	fb00 f303 	mul.w	r3, r0, r3
 80015fe:	440b      	add	r3, r1
 8001600:	335c      	adds	r3, #92	; 0x5c
 8001602:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	212c      	movs	r1, #44	; 0x2c
 800160a:	fb01 f303 	mul.w	r3, r1, r3
 800160e:	4413      	add	r3, r2
 8001610:	3360      	adds	r3, #96	; 0x60
 8001612:	2204      	movs	r2, #4
 8001614:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	015a      	lsls	r2, r3, #5
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	4413      	add	r3, r2
 800161e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001622:	461a      	mov	r2, r3
 8001624:	2302      	movs	r3, #2
 8001626:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	b2d9      	uxtb	r1, r3
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	202c      	movs	r0, #44	; 0x2c
 8001632:	fb00 f303 	mul.w	r3, r0, r3
 8001636:	4413      	add	r3, r2
 8001638:	3360      	adds	r3, #96	; 0x60
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	461a      	mov	r2, r3
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff fd04 	bl	800104c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001644:	e061      	b.n	800170a <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	015a      	lsls	r2, r3, #5
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	4413      	add	r3, r2
 800164e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 0310 	and.w	r3, r3, #16
 8001658:	2b10      	cmp	r3, #16
 800165a:	d156      	bne.n	800170a <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	212c      	movs	r1, #44	; 0x2c
 8001662:	fb01 f303 	mul.w	r3, r1, r3
 8001666:	4413      	add	r3, r2
 8001668:	333f      	adds	r3, #63	; 0x3f
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b03      	cmp	r3, #3
 800166e:	d111      	bne.n	8001694 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	212c      	movs	r1, #44	; 0x2c
 8001676:	fb01 f303 	mul.w	r3, r1, r3
 800167a:	4413      	add	r3, r2
 800167c:	335c      	adds	r3, #92	; 0x5c
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	4611      	mov	r1, r2
 800168c:	4618      	mov	r0, r3
 800168e:	f000 ff07 	bl	80024a0 <USB_HC_Halt>
 8001692:	e031      	b.n	80016f8 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	212c      	movs	r1, #44	; 0x2c
 800169a:	fb01 f303 	mul.w	r3, r1, r3
 800169e:	4413      	add	r3, r2
 80016a0:	333f      	adds	r3, #63	; 0x3f
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d009      	beq.n	80016bc <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	212c      	movs	r1, #44	; 0x2c
 80016ae:	fb01 f303 	mul.w	r3, r1, r3
 80016b2:	4413      	add	r3, r2
 80016b4:	333f      	adds	r3, #63	; 0x3f
 80016b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d11d      	bne.n	80016f8 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	212c      	movs	r1, #44	; 0x2c
 80016c2:	fb01 f303 	mul.w	r3, r1, r3
 80016c6:	4413      	add	r3, r2
 80016c8:	335c      	adds	r3, #92	; 0x5c
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d110      	bne.n	80016f8 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	212c      	movs	r1, #44	; 0x2c
 80016dc:	fb01 f303 	mul.w	r3, r1, r3
 80016e0:	4413      	add	r3, r2
 80016e2:	3361      	adds	r3, #97	; 0x61
 80016e4:	2203      	movs	r2, #3
 80016e6:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	4611      	mov	r1, r2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 fed4 	bl	80024a0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	015a      	lsls	r2, r3, #5
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	4413      	add	r3, r2
 8001700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001704:	461a      	mov	r2, r3
 8001706:	2310      	movs	r3, #16
 8001708:	6093      	str	r3, [r2, #8]
}
 800170a:	bf00      	nop
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b088      	sub	sp, #32
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	460b      	mov	r3, r1
 800171c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8001728:	78fb      	ldrb	r3, [r7, #3]
 800172a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	015a      	lsls	r2, r3, #5
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	4413      	add	r3, r2
 8001734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	2b04      	cmp	r3, #4
 8001740:	d11a      	bne.n	8001778 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	015a      	lsls	r2, r3, #5
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	4413      	add	r3, r2
 800174a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800174e:	461a      	mov	r2, r3
 8001750:	2304      	movs	r3, #4
 8001752:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	212c      	movs	r1, #44	; 0x2c
 800175a:	fb01 f303 	mul.w	r3, r1, r3
 800175e:	4413      	add	r3, r2
 8001760:	3361      	adds	r3, #97	; 0x61
 8001762:	2206      	movs	r2, #6
 8001764:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	4611      	mov	r1, r2
 8001770:	4618      	mov	r0, r3
 8001772:	f000 fe95 	bl	80024a0 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8001776:	e331      	b.n	8001ddc <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	015a      	lsls	r2, r3, #5
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	4413      	add	r3, r2
 8001780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 0320 	and.w	r3, r3, #32
 800178a:	2b20      	cmp	r3, #32
 800178c:	d12e      	bne.n	80017ec <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	015a      	lsls	r2, r3, #5
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	4413      	add	r3, r2
 8001796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800179a:	461a      	mov	r2, r3
 800179c:	2320      	movs	r3, #32
 800179e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	212c      	movs	r1, #44	; 0x2c
 80017a6:	fb01 f303 	mul.w	r3, r1, r3
 80017aa:	4413      	add	r3, r2
 80017ac:	333d      	adds	r3, #61	; 0x3d
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	f040 8313 	bne.w	8001ddc <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	212c      	movs	r1, #44	; 0x2c
 80017bc:	fb01 f303 	mul.w	r3, r1, r3
 80017c0:	4413      	add	r3, r2
 80017c2:	333d      	adds	r3, #61	; 0x3d
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	212c      	movs	r1, #44	; 0x2c
 80017ce:	fb01 f303 	mul.w	r3, r1, r3
 80017d2:	4413      	add	r3, r2
 80017d4:	3360      	adds	r3, #96	; 0x60
 80017d6:	2202      	movs	r2, #2
 80017d8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	4611      	mov	r1, r2
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 fe5b 	bl	80024a0 <USB_HC_Halt>
}
 80017ea:	e2f7      	b.n	8001ddc <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	015a      	lsls	r2, r3, #5
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	4413      	add	r3, r2
 80017f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001802:	d112      	bne.n	800182a <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	015a      	lsls	r2, r3, #5
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	4413      	add	r3, r2
 800180c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001810:	461a      	mov	r2, r3
 8001812:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001816:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	4611      	mov	r1, r2
 8001822:	4618      	mov	r0, r3
 8001824:	f000 fe3c 	bl	80024a0 <USB_HC_Halt>
}
 8001828:	e2d8      	b.n	8001ddc <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	015a      	lsls	r2, r3, #5
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	4413      	add	r3, r2
 8001832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b01      	cmp	r3, #1
 800183e:	d140      	bne.n	80018c2 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	212c      	movs	r1, #44	; 0x2c
 8001846:	fb01 f303 	mul.w	r3, r1, r3
 800184a:	4413      	add	r3, r2
 800184c:	335c      	adds	r3, #92	; 0x5c
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	015a      	lsls	r2, r3, #5
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	4413      	add	r3, r2
 800185a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001864:	2b40      	cmp	r3, #64	; 0x40
 8001866:	d111      	bne.n	800188c <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	212c      	movs	r1, #44	; 0x2c
 800186e:	fb01 f303 	mul.w	r3, r1, r3
 8001872:	4413      	add	r3, r2
 8001874:	333d      	adds	r3, #61	; 0x3d
 8001876:	2201      	movs	r2, #1
 8001878:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	015a      	lsls	r2, r3, #5
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	4413      	add	r3, r2
 8001882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001886:	461a      	mov	r2, r3
 8001888:	2340      	movs	r3, #64	; 0x40
 800188a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	015a      	lsls	r2, r3, #5
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	4413      	add	r3, r2
 8001894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001898:	461a      	mov	r2, r3
 800189a:	2301      	movs	r3, #1
 800189c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	212c      	movs	r1, #44	; 0x2c
 80018a4:	fb01 f303 	mul.w	r3, r1, r3
 80018a8:	4413      	add	r3, r2
 80018aa:	3361      	adds	r3, #97	; 0x61
 80018ac:	2201      	movs	r2, #1
 80018ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	4611      	mov	r1, r2
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 fdf0 	bl	80024a0 <USB_HC_Halt>
}
 80018c0:	e28c      	b.n	8001ddc <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	015a      	lsls	r2, r3, #5
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	4413      	add	r3, r2
 80018ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018d4:	2b40      	cmp	r3, #64	; 0x40
 80018d6:	d12c      	bne.n	8001932 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	212c      	movs	r1, #44	; 0x2c
 80018de:	fb01 f303 	mul.w	r3, r1, r3
 80018e2:	4413      	add	r3, r2
 80018e4:	3361      	adds	r3, #97	; 0x61
 80018e6:	2204      	movs	r2, #4
 80018e8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	212c      	movs	r1, #44	; 0x2c
 80018f0:	fb01 f303 	mul.w	r3, r1, r3
 80018f4:	4413      	add	r3, r2
 80018f6:	333d      	adds	r3, #61	; 0x3d
 80018f8:	2201      	movs	r2, #1
 80018fa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	212c      	movs	r1, #44	; 0x2c
 8001902:	fb01 f303 	mul.w	r3, r1, r3
 8001906:	4413      	add	r3, r2
 8001908:	335c      	adds	r3, #92	; 0x5c
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	4611      	mov	r1, r2
 8001918:	4618      	mov	r0, r3
 800191a:	f000 fdc1 	bl	80024a0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	015a      	lsls	r2, r3, #5
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	4413      	add	r3, r2
 8001926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800192a:	461a      	mov	r2, r3
 800192c:	2340      	movs	r3, #64	; 0x40
 800192e:	6093      	str	r3, [r2, #8]
}
 8001930:	e254      	b.n	8001ddc <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	015a      	lsls	r2, r3, #5
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	4413      	add	r3, r2
 800193a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 0308 	and.w	r3, r3, #8
 8001944:	2b08      	cmp	r3, #8
 8001946:	d11a      	bne.n	800197e <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	015a      	lsls	r2, r3, #5
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	4413      	add	r3, r2
 8001950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001954:	461a      	mov	r2, r3
 8001956:	2308      	movs	r3, #8
 8001958:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	212c      	movs	r1, #44	; 0x2c
 8001960:	fb01 f303 	mul.w	r3, r1, r3
 8001964:	4413      	add	r3, r2
 8001966:	3361      	adds	r3, #97	; 0x61
 8001968:	2205      	movs	r2, #5
 800196a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	4611      	mov	r1, r2
 8001976:	4618      	mov	r0, r3
 8001978:	f000 fd92 	bl	80024a0 <USB_HC_Halt>
}
 800197c:	e22e      	b.n	8001ddc <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	015a      	lsls	r2, r3, #5
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	4413      	add	r3, r2
 8001986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 0310 	and.w	r3, r3, #16
 8001990:	2b10      	cmp	r3, #16
 8001992:	d140      	bne.n	8001a16 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	212c      	movs	r1, #44	; 0x2c
 800199a:	fb01 f303 	mul.w	r3, r1, r3
 800199e:	4413      	add	r3, r2
 80019a0:	335c      	adds	r3, #92	; 0x5c
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	212c      	movs	r1, #44	; 0x2c
 80019ac:	fb01 f303 	mul.w	r3, r1, r3
 80019b0:	4413      	add	r3, r2
 80019b2:	3361      	adds	r3, #97	; 0x61
 80019b4:	2203      	movs	r2, #3
 80019b6:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	212c      	movs	r1, #44	; 0x2c
 80019be:	fb01 f303 	mul.w	r3, r1, r3
 80019c2:	4413      	add	r3, r2
 80019c4:	333d      	adds	r3, #61	; 0x3d
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d112      	bne.n	80019f2 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	212c      	movs	r1, #44	; 0x2c
 80019d2:	fb01 f303 	mul.w	r3, r1, r3
 80019d6:	4413      	add	r3, r2
 80019d8:	333c      	adds	r3, #60	; 0x3c
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d108      	bne.n	80019f2 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	212c      	movs	r1, #44	; 0x2c
 80019e6:	fb01 f303 	mul.w	r3, r1, r3
 80019ea:	4413      	add	r3, r2
 80019ec:	333d      	adds	r3, #61	; 0x3d
 80019ee:	2201      	movs	r2, #1
 80019f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 fd4f 	bl	80024a0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	015a      	lsls	r2, r3, #5
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	4413      	add	r3, r2
 8001a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a0e:	461a      	mov	r2, r3
 8001a10:	2310      	movs	r3, #16
 8001a12:	6093      	str	r3, [r2, #8]
}
 8001a14:	e1e2      	b.n	8001ddc <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	015a      	lsls	r2, r3, #5
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a28:	2b80      	cmp	r3, #128	; 0x80
 8001a2a:	d164      	bne.n	8001af6 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d111      	bne.n	8001a58 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	212c      	movs	r1, #44	; 0x2c
 8001a3a:	fb01 f303 	mul.w	r3, r1, r3
 8001a3e:	4413      	add	r3, r2
 8001a40:	3361      	adds	r3, #97	; 0x61
 8001a42:	2206      	movs	r2, #6
 8001a44:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 fd25 	bl	80024a0 <USB_HC_Halt>
 8001a56:	e044      	b.n	8001ae2 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	212c      	movs	r1, #44	; 0x2c
 8001a5e:	fb01 f303 	mul.w	r3, r1, r3
 8001a62:	4413      	add	r3, r2
 8001a64:	335c      	adds	r3, #92	; 0x5c
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	1c5a      	adds	r2, r3, #1
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	202c      	movs	r0, #44	; 0x2c
 8001a70:	fb00 f303 	mul.w	r3, r0, r3
 8001a74:	440b      	add	r3, r1
 8001a76:	335c      	adds	r3, #92	; 0x5c
 8001a78:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	212c      	movs	r1, #44	; 0x2c
 8001a80:	fb01 f303 	mul.w	r3, r1, r3
 8001a84:	4413      	add	r3, r2
 8001a86:	335c      	adds	r3, #92	; 0x5c
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d920      	bls.n	8001ad0 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	212c      	movs	r1, #44	; 0x2c
 8001a94:	fb01 f303 	mul.w	r3, r1, r3
 8001a98:	4413      	add	r3, r2
 8001a9a:	335c      	adds	r3, #92	; 0x5c
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	212c      	movs	r1, #44	; 0x2c
 8001aa6:	fb01 f303 	mul.w	r3, r1, r3
 8001aaa:	4413      	add	r3, r2
 8001aac:	3360      	adds	r3, #96	; 0x60
 8001aae:	2204      	movs	r2, #4
 8001ab0:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	b2d9      	uxtb	r1, r3
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	202c      	movs	r0, #44	; 0x2c
 8001abc:	fb00 f303 	mul.w	r3, r0, r3
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3360      	adds	r3, #96	; 0x60
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff fabf 	bl	800104c <HAL_HCD_HC_NotifyURBChange_Callback>
 8001ace:	e008      	b.n	8001ae2 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	212c      	movs	r1, #44	; 0x2c
 8001ad6:	fb01 f303 	mul.w	r3, r1, r3
 8001ada:	4413      	add	r3, r2
 8001adc:	3360      	adds	r3, #96	; 0x60
 8001ade:	2202      	movs	r2, #2
 8001ae0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	015a      	lsls	r2, r3, #5
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	4413      	add	r3, r2
 8001aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aee:	461a      	mov	r2, r3
 8001af0:	2380      	movs	r3, #128	; 0x80
 8001af2:	6093      	str	r3, [r2, #8]
}
 8001af4:	e172      	b.n	8001ddc <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	015a      	lsls	r2, r3, #5
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	4413      	add	r3, r2
 8001afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b0c:	d11b      	bne.n	8001b46 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	212c      	movs	r1, #44	; 0x2c
 8001b14:	fb01 f303 	mul.w	r3, r1, r3
 8001b18:	4413      	add	r3, r2
 8001b1a:	3361      	adds	r3, #97	; 0x61
 8001b1c:	2208      	movs	r2, #8
 8001b1e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	4611      	mov	r1, r2
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 fcb8 	bl	80024a0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	015a      	lsls	r2, r3, #5
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	4413      	add	r3, r2
 8001b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b42:	6093      	str	r3, [r2, #8]
}
 8001b44:	e14a      	b.n	8001ddc <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	015a      	lsls	r2, r3, #5
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	f040 813f 	bne.w	8001ddc <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	212c      	movs	r1, #44	; 0x2c
 8001b64:	fb01 f303 	mul.w	r3, r1, r3
 8001b68:	4413      	add	r3, r2
 8001b6a:	3361      	adds	r3, #97	; 0x61
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d17d      	bne.n	8001c6e <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	212c      	movs	r1, #44	; 0x2c
 8001b78:	fb01 f303 	mul.w	r3, r1, r3
 8001b7c:	4413      	add	r3, r2
 8001b7e:	3360      	adds	r3, #96	; 0x60
 8001b80:	2201      	movs	r2, #1
 8001b82:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	212c      	movs	r1, #44	; 0x2c
 8001b8a:	fb01 f303 	mul.w	r3, r1, r3
 8001b8e:	4413      	add	r3, r2
 8001b90:	333f      	adds	r3, #63	; 0x3f
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d00a      	beq.n	8001bae <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	212c      	movs	r1, #44	; 0x2c
 8001b9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	333f      	adds	r3, #63	; 0x3f
 8001ba6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	f040 8100 	bne.w	8001dae <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d113      	bne.n	8001bde <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	212c      	movs	r1, #44	; 0x2c
 8001bbc:	fb01 f303 	mul.w	r3, r1, r3
 8001bc0:	4413      	add	r3, r2
 8001bc2:	3355      	adds	r3, #85	; 0x55
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	f083 0301 	eor.w	r3, r3, #1
 8001bca:	b2d8      	uxtb	r0, r3
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	212c      	movs	r1, #44	; 0x2c
 8001bd2:	fb01 f303 	mul.w	r3, r1, r3
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3355      	adds	r3, #85	; 0x55
 8001bda:	4602      	mov	r2, r0
 8001bdc:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	f040 80e3 	bne.w	8001dae <HCD_HC_OUT_IRQHandler+0x69c>
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	212c      	movs	r1, #44	; 0x2c
 8001bee:	fb01 f303 	mul.w	r3, r1, r3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	334c      	adds	r3, #76	; 0x4c
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 80d8 	beq.w	8001dae <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	212c      	movs	r1, #44	; 0x2c
 8001c04:	fb01 f303 	mul.w	r3, r1, r3
 8001c08:	4413      	add	r3, r2
 8001c0a:	334c      	adds	r3, #76	; 0x4c
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	202c      	movs	r0, #44	; 0x2c
 8001c14:	fb00 f202 	mul.w	r2, r0, r2
 8001c18:	440a      	add	r2, r1
 8001c1a:	3240      	adds	r2, #64	; 0x40
 8001c1c:	8812      	ldrh	r2, [r2, #0]
 8001c1e:	4413      	add	r3, r2
 8001c20:	3b01      	subs	r3, #1
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	202c      	movs	r0, #44	; 0x2c
 8001c28:	fb00 f202 	mul.w	r2, r0, r2
 8001c2c:	440a      	add	r2, r1
 8001c2e:	3240      	adds	r2, #64	; 0x40
 8001c30:	8812      	ldrh	r2, [r2, #0]
 8001c32:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c36:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 80b5 	beq.w	8001dae <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	212c      	movs	r1, #44	; 0x2c
 8001c4a:	fb01 f303 	mul.w	r3, r1, r3
 8001c4e:	4413      	add	r3, r2
 8001c50:	3355      	adds	r3, #85	; 0x55
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	f083 0301 	eor.w	r3, r3, #1
 8001c58:	b2d8      	uxtb	r0, r3
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	212c      	movs	r1, #44	; 0x2c
 8001c60:	fb01 f303 	mul.w	r3, r1, r3
 8001c64:	4413      	add	r3, r2
 8001c66:	3355      	adds	r3, #85	; 0x55
 8001c68:	4602      	mov	r2, r0
 8001c6a:	701a      	strb	r2, [r3, #0]
 8001c6c:	e09f      	b.n	8001dae <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	212c      	movs	r1, #44	; 0x2c
 8001c74:	fb01 f303 	mul.w	r3, r1, r3
 8001c78:	4413      	add	r3, r2
 8001c7a:	3361      	adds	r3, #97	; 0x61
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b03      	cmp	r3, #3
 8001c80:	d109      	bne.n	8001c96 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	212c      	movs	r1, #44	; 0x2c
 8001c88:	fb01 f303 	mul.w	r3, r1, r3
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3360      	adds	r3, #96	; 0x60
 8001c90:	2202      	movs	r2, #2
 8001c92:	701a      	strb	r2, [r3, #0]
 8001c94:	e08b      	b.n	8001dae <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	212c      	movs	r1, #44	; 0x2c
 8001c9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3361      	adds	r3, #97	; 0x61
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d109      	bne.n	8001cbe <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	212c      	movs	r1, #44	; 0x2c
 8001cb0:	fb01 f303 	mul.w	r3, r1, r3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	3360      	adds	r3, #96	; 0x60
 8001cb8:	2202      	movs	r2, #2
 8001cba:	701a      	strb	r2, [r3, #0]
 8001cbc:	e077      	b.n	8001dae <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	212c      	movs	r1, #44	; 0x2c
 8001cc4:	fb01 f303 	mul.w	r3, r1, r3
 8001cc8:	4413      	add	r3, r2
 8001cca:	3361      	adds	r3, #97	; 0x61
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b05      	cmp	r3, #5
 8001cd0:	d109      	bne.n	8001ce6 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	212c      	movs	r1, #44	; 0x2c
 8001cd8:	fb01 f303 	mul.w	r3, r1, r3
 8001cdc:	4413      	add	r3, r2
 8001cde:	3360      	adds	r3, #96	; 0x60
 8001ce0:	2205      	movs	r2, #5
 8001ce2:	701a      	strb	r2, [r3, #0]
 8001ce4:	e063      	b.n	8001dae <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	212c      	movs	r1, #44	; 0x2c
 8001cec:	fb01 f303 	mul.w	r3, r1, r3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3361      	adds	r3, #97	; 0x61
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b06      	cmp	r3, #6
 8001cf8:	d009      	beq.n	8001d0e <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	212c      	movs	r1, #44	; 0x2c
 8001d00:	fb01 f303 	mul.w	r3, r1, r3
 8001d04:	4413      	add	r3, r2
 8001d06:	3361      	adds	r3, #97	; 0x61
 8001d08:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d14f      	bne.n	8001dae <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	212c      	movs	r1, #44	; 0x2c
 8001d14:	fb01 f303 	mul.w	r3, r1, r3
 8001d18:	4413      	add	r3, r2
 8001d1a:	335c      	adds	r3, #92	; 0x5c
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	1c5a      	adds	r2, r3, #1
 8001d20:	6879      	ldr	r1, [r7, #4]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	202c      	movs	r0, #44	; 0x2c
 8001d26:	fb00 f303 	mul.w	r3, r0, r3
 8001d2a:	440b      	add	r3, r1
 8001d2c:	335c      	adds	r3, #92	; 0x5c
 8001d2e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	212c      	movs	r1, #44	; 0x2c
 8001d36:	fb01 f303 	mul.w	r3, r1, r3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	335c      	adds	r3, #92	; 0x5c
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d912      	bls.n	8001d6a <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	212c      	movs	r1, #44	; 0x2c
 8001d4a:	fb01 f303 	mul.w	r3, r1, r3
 8001d4e:	4413      	add	r3, r2
 8001d50:	335c      	adds	r3, #92	; 0x5c
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	212c      	movs	r1, #44	; 0x2c
 8001d5c:	fb01 f303 	mul.w	r3, r1, r3
 8001d60:	4413      	add	r3, r2
 8001d62:	3360      	adds	r3, #96	; 0x60
 8001d64:	2204      	movs	r2, #4
 8001d66:	701a      	strb	r2, [r3, #0]
 8001d68:	e021      	b.n	8001dae <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	212c      	movs	r1, #44	; 0x2c
 8001d70:	fb01 f303 	mul.w	r3, r1, r3
 8001d74:	4413      	add	r3, r2
 8001d76:	3360      	adds	r3, #96	; 0x60
 8001d78:	2202      	movs	r2, #2
 8001d7a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	015a      	lsls	r2, r3, #5
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	4413      	add	r3, r2
 8001d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001d92:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001d9a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	015a      	lsls	r2, r3, #5
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	4413      	add	r3, r2
 8001da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da8:	461a      	mov	r2, r3
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	015a      	lsls	r2, r3, #5
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	4413      	add	r3, r2
 8001db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dba:	461a      	mov	r2, r3
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	b2d9      	uxtb	r1, r3
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	202c      	movs	r0, #44	; 0x2c
 8001dca:	fb00 f303 	mul.w	r3, r0, r3
 8001dce:	4413      	add	r3, r2
 8001dd0:	3360      	adds	r3, #96	; 0x60
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff f938 	bl	800104c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001ddc:	bf00      	nop
 8001dde:	3720      	adds	r7, #32
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	; 0x28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	f003 030f 	and.w	r3, r3, #15
 8001e04:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	0c5b      	lsrs	r3, r3, #17
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	091b      	lsrs	r3, r3, #4
 8001e14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e18:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d004      	beq.n	8001e2a <HCD_RXQLVL_IRQHandler+0x46>
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	2b05      	cmp	r3, #5
 8001e24:	f000 80a9 	beq.w	8001f7a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8001e28:	e0aa      	b.n	8001f80 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f000 80a6 	beq.w	8001f7e <HCD_RXQLVL_IRQHandler+0x19a>
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	212c      	movs	r1, #44	; 0x2c
 8001e38:	fb01 f303 	mul.w	r3, r1, r3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3344      	adds	r3, #68	; 0x44
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 809b 	beq.w	8001f7e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	212c      	movs	r1, #44	; 0x2c
 8001e4e:	fb01 f303 	mul.w	r3, r1, r3
 8001e52:	4413      	add	r3, r2
 8001e54:	3350      	adds	r3, #80	; 0x50
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	441a      	add	r2, r3
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	202c      	movs	r0, #44	; 0x2c
 8001e62:	fb00 f303 	mul.w	r3, r0, r3
 8001e66:	440b      	add	r3, r1
 8001e68:	334c      	adds	r3, #76	; 0x4c
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d87a      	bhi.n	8001f66 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6818      	ldr	r0, [r3, #0]
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	212c      	movs	r1, #44	; 0x2c
 8001e7a:	fb01 f303 	mul.w	r3, r1, r3
 8001e7e:	4413      	add	r3, r2
 8001e80:	3344      	adds	r3, #68	; 0x44
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	b292      	uxth	r2, r2
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f000 fa45 	bl	8002318 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	212c      	movs	r1, #44	; 0x2c
 8001e94:	fb01 f303 	mul.w	r3, r1, r3
 8001e98:	4413      	add	r3, r2
 8001e9a:	3344      	adds	r3, #68	; 0x44
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	441a      	add	r2, r3
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	202c      	movs	r0, #44	; 0x2c
 8001ea8:	fb00 f303 	mul.w	r3, r0, r3
 8001eac:	440b      	add	r3, r1
 8001eae:	3344      	adds	r3, #68	; 0x44
 8001eb0:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	212c      	movs	r1, #44	; 0x2c
 8001eb8:	fb01 f303 	mul.w	r3, r1, r3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	3350      	adds	r3, #80	; 0x50
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	441a      	add	r2, r3
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	202c      	movs	r0, #44	; 0x2c
 8001ecc:	fb00 f303 	mul.w	r3, r0, r3
 8001ed0:	440b      	add	r3, r1
 8001ed2:	3350      	adds	r3, #80	; 0x50
 8001ed4:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	015a      	lsls	r2, r3, #5
 8001eda:	6a3b      	ldr	r3, [r7, #32]
 8001edc:	4413      	add	r3, r2
 8001ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	0cdb      	lsrs	r3, r3, #19
 8001ee6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eea:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	212c      	movs	r1, #44	; 0x2c
 8001ef2:	fb01 f303 	mul.w	r3, r1, r3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3340      	adds	r3, #64	; 0x40
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	461a      	mov	r2, r3
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d13c      	bne.n	8001f7e <HCD_RXQLVL_IRQHandler+0x19a>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d039      	beq.n	8001f7e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	015a      	lsls	r2, r3, #5
 8001f0e:	6a3b      	ldr	r3, [r7, #32]
 8001f10:	4413      	add	r3, r2
 8001f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001f20:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f28:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	015a      	lsls	r2, r3, #5
 8001f2e:	6a3b      	ldr	r3, [r7, #32]
 8001f30:	4413      	add	r3, r2
 8001f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f36:	461a      	mov	r2, r3
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	212c      	movs	r1, #44	; 0x2c
 8001f42:	fb01 f303 	mul.w	r3, r1, r3
 8001f46:	4413      	add	r3, r2
 8001f48:	3354      	adds	r3, #84	; 0x54
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	f083 0301 	eor.w	r3, r3, #1
 8001f50:	b2d8      	uxtb	r0, r3
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	212c      	movs	r1, #44	; 0x2c
 8001f58:	fb01 f303 	mul.w	r3, r1, r3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3354      	adds	r3, #84	; 0x54
 8001f60:	4602      	mov	r2, r0
 8001f62:	701a      	strb	r2, [r3, #0]
      break;
 8001f64:	e00b      	b.n	8001f7e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	212c      	movs	r1, #44	; 0x2c
 8001f6c:	fb01 f303 	mul.w	r3, r1, r3
 8001f70:	4413      	add	r3, r2
 8001f72:	3360      	adds	r3, #96	; 0x60
 8001f74:	2204      	movs	r2, #4
 8001f76:	701a      	strb	r2, [r3, #0]
      break;
 8001f78:	e001      	b.n	8001f7e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8001f7a:	bf00      	nop
 8001f7c:	e000      	b.n	8001f80 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8001f7e:	bf00      	nop
  }
}
 8001f80:	bf00      	nop
 8001f82:	3728      	adds	r7, #40	; 0x28
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001fb4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d10b      	bne.n	8001fd8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d102      	bne.n	8001fd0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff f816 	bl	8000ffc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	f043 0302 	orr.w	r3, r3, #2
 8001fd6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d132      	bne.n	8002048 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	f043 0308 	orr.w	r3, r3, #8
 8001fe8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d126      	bne.n	8002042 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d113      	bne.n	8002024 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002002:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002006:	d106      	bne.n	8002016 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2102      	movs	r1, #2
 800200e:	4618      	mov	r0, r3
 8002010:	f000 f9fb 	bl	800240a <USB_InitFSLSPClkSel>
 8002014:	e011      	b.n	800203a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2101      	movs	r1, #1
 800201c:	4618      	mov	r0, r3
 800201e:	f000 f9f4 	bl	800240a <USB_InitFSLSPClkSel>
 8002022:	e00a      	b.n	800203a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d106      	bne.n	800203a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002032:	461a      	mov	r2, r3
 8002034:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002038:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7fe fff2 	bl	8001024 <HAL_HCD_PortEnabled_Callback>
 8002040:	e002      	b.n	8002048 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7fe fff8 	bl	8001038 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f003 0320 	and.w	r3, r3, #32
 800204e:	2b20      	cmp	r3, #32
 8002050:	d103      	bne.n	800205a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	f043 0320 	orr.w	r3, r3, #32
 8002058:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002060:	461a      	mov	r2, r3
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	6013      	str	r3, [r2, #0]
}
 8002066:	bf00      	nop
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b00      	cmp	r3, #0
 800208a:	d105      	bne.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002094:	2b00      	cmp	r3, #0
 8002096:	d038      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002098:	4b68      	ldr	r3, [pc, #416]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800209e:	f7fe fc09 	bl	80008b4 <HAL_GetTick>
 80020a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80020a4:	e008      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80020a6:	f7fe fc05 	bl	80008b4 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e0bd      	b.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80020b8:	4b61      	ldr	r3, [pc, #388]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1f0      	bne.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	019b      	lsls	r3, r3, #6
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	071b      	lsls	r3, r3, #28
 80020d6:	495a      	ldr	r1, [pc, #360]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80020de:	4b57      	ldr	r3, [pc, #348]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80020e4:	f7fe fbe6 	bl	80008b4 <HAL_GetTick>
 80020e8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80020ec:	f7fe fbe2 	bl	80008b4 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e09a      	b.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80020fe:	4b50      	ldr	r3, [pc, #320]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0f0      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 8083 	beq.w	800221e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002118:	2300      	movs	r3, #0
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	4b48      	ldr	r3, [pc, #288]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002120:	4a47      	ldr	r2, [pc, #284]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002126:	6413      	str	r3, [r2, #64]	; 0x40
 8002128:	4b45      	ldr	r3, [pc, #276]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002134:	4b43      	ldr	r3, [pc, #268]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a42      	ldr	r2, [pc, #264]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800213a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002140:	f7fe fbb8 	bl	80008b4 <HAL_GetTick>
 8002144:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002146:	e008      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002148:	f7fe fbb4 	bl	80008b4 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e06c      	b.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800215a:	4b3a      	ldr	r3, [pc, #232]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f0      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002166:	4b36      	ldr	r3, [pc, #216]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800216e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d02f      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	429a      	cmp	r2, r3
 8002182:	d028      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002184:	4b2e      	ldr	r3, [pc, #184]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800218c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800218e:	4b2e      	ldr	r3, [pc, #184]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002190:	2201      	movs	r2, #1
 8002192:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002194:	4b2c      	ldr	r3, [pc, #176]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800219a:	4a29      	ldr	r2, [pc, #164]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80021a0:	4b27      	ldr	r3, [pc, #156]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d114      	bne.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80021ac:	f7fe fb82 	bl	80008b4 <HAL_GetTick>
 80021b0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b2:	e00a      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b4:	f7fe fb7e 	bl	80008b4 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d901      	bls.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e034      	b.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ca:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0ee      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80021e2:	d10d      	bne.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80021e4:	4b16      	ldr	r3, [pc, #88]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80021f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021f8:	4911      	ldr	r1, [pc, #68]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	608b      	str	r3, [r1, #8]
 80021fe:	e005      	b.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002200:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	4a0e      	ldr	r2, [pc, #56]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002206:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800220a:	6093      	str	r3, [r2, #8]
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800220e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002218:	4909      	ldr	r1, [pc, #36]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800221a:	4313      	orrs	r3, r2
 800221c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	7d1a      	ldrb	r2, [r3, #20]
 800222e:	4b07      	ldr	r3, [pc, #28]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002230:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	42470068 	.word	0x42470068
 8002240:	40023800 	.word	0x40023800
 8002244:	40007000 	.word	0x40007000
 8002248:	42470e40 	.word	0x42470e40
 800224c:	424711e0 	.word	0x424711e0

08002250 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	3301      	adds	r3, #1
 8002262:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4a13      	ldr	r2, [pc, #76]	; (80022b4 <USB_FlushTxFifo+0x64>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d901      	bls.n	8002270 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e01b      	b.n	80022a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	2b00      	cmp	r3, #0
 8002276:	daf2      	bge.n	800225e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002278:	2300      	movs	r3, #0
 800227a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	019b      	lsls	r3, r3, #6
 8002280:	f043 0220 	orr.w	r2, r3, #32
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	3301      	adds	r3, #1
 800228c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4a08      	ldr	r2, [pc, #32]	; (80022b4 <USB_FlushTxFifo+0x64>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d901      	bls.n	800229a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e006      	b.n	80022a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	f003 0320 	and.w	r3, r3, #32
 80022a2:	2b20      	cmp	r3, #32
 80022a4:	d0f0      	beq.n	8002288 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	00030d40 	.word	0x00030d40

080022b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	3301      	adds	r3, #1
 80022c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	4a11      	ldr	r2, [pc, #68]	; (8002314 <USB_FlushRxFifo+0x5c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d901      	bls.n	80022d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e018      	b.n	8002308 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	daf2      	bge.n	80022c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2210      	movs	r2, #16
 80022e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	3301      	adds	r3, #1
 80022ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	4a08      	ldr	r2, [pc, #32]	; (8002314 <USB_FlushRxFifo+0x5c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d901      	bls.n	80022fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e006      	b.n	8002308 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f003 0310 	and.w	r3, r3, #16
 8002302:	2b10      	cmp	r3, #16
 8002304:	d0f0      	beq.n	80022e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	00030d40 	.word	0x00030d40

08002318 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8002318:	b480      	push	{r7}
 800231a:	b08b      	sub	sp, #44	; 0x2c
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	4613      	mov	r3, r2
 8002324:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800232e:	88fb      	ldrh	r3, [r7, #6]
 8002330:	089b      	lsrs	r3, r3, #2
 8002332:	b29b      	uxth	r3, r3
 8002334:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8002336:	88fb      	ldrh	r3, [r7, #6]
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800233e:	2300      	movs	r3, #0
 8002340:	623b      	str	r3, [r7, #32]
 8002342:	e014      	b.n	800236e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	601a      	str	r2, [r3, #0]
    pDest++;
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	3301      	adds	r3, #1
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	3301      	adds	r3, #1
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	3301      	adds	r3, #1
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	3301      	adds	r3, #1
 8002366:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8002368:	6a3b      	ldr	r3, [r7, #32]
 800236a:	3301      	adds	r3, #1
 800236c:	623b      	str	r3, [r7, #32]
 800236e:	6a3a      	ldr	r2, [r7, #32]
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	429a      	cmp	r2, r3
 8002374:	d3e6      	bcc.n	8002344 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8002376:	8bfb      	ldrh	r3, [r7, #30]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d01e      	beq.n	80023ba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002386:	461a      	mov	r2, r3
 8002388:	f107 0310 	add.w	r3, r7, #16
 800238c:	6812      	ldr	r2, [r2, #0]
 800238e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	fa22 f303 	lsr.w	r3, r2, r3
 800239c:	b2da      	uxtb	r2, r3
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	701a      	strb	r2, [r3, #0]
      i++;
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	3301      	adds	r3, #1
 80023a6:	623b      	str	r3, [r7, #32]
      pDest++;
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	3301      	adds	r3, #1
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80023ae:	8bfb      	ldrh	r3, [r7, #30]
 80023b0:	3b01      	subs	r3, #1
 80023b2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80023b4:	8bfb      	ldrh	r3, [r7, #30]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1ea      	bne.n	8002390 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80023bc:	4618      	mov	r0, r3
 80023be:	372c      	adds	r7, #44	; 0x2c
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	4013      	ands	r3, r2
 80023de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80023e0:	68fb      	ldr	r3, [r7, #12]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	f003 0301 	and.w	r3, r3, #1
}
 80023fe:	4618      	mov	r0, r3
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800240a:	b480      	push	{r7}
 800240c:	b085      	sub	sp, #20
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	460b      	mov	r3, r1
 8002414:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002428:	f023 0303 	bic.w	r3, r3, #3
 800242c:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	78fb      	ldrb	r3, [r7, #3]
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	68f9      	ldr	r1, [r7, #12]
 800243e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002442:	4313      	orrs	r3, r2
 8002444:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8002446:	78fb      	ldrb	r3, [r7, #3]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d107      	bne.n	800245c <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002452:	461a      	mov	r2, r3
 8002454:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8002458:	6053      	str	r3, [r2, #4]
 800245a:	e009      	b.n	8002470 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800245c:	78fb      	ldrb	r3, [r7, #3]
 800245e:	2b02      	cmp	r3, #2
 8002460:	d106      	bne.n	8002470 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002468:	461a      	mov	r2, r3
 800246a:	f241 7370 	movw	r3, #6000	; 0x1770
 800246e:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800247e:	b480      	push	{r7}
 8002480:	b085      	sub	sp, #20
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	b29b      	uxth	r3, r3
}
 8002494:	4618      	mov	r0, r3
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b089      	sub	sp, #36	; 0x24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80024b0:	78fb      	ldrb	r3, [r7, #3]
 80024b2:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	015a      	lsls	r2, r3, #5
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	4413      	add	r3, r2
 80024c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	0c9b      	lsrs	r3, r3, #18
 80024c8:	f003 0303 	and.w	r3, r3, #3
 80024cc:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	015a      	lsls	r2, r3, #5
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	4413      	add	r3, r2
 80024d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	0fdb      	lsrs	r3, r3, #31
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f003 0320 	and.w	r3, r3, #32
 80024ec:	2b20      	cmp	r3, #32
 80024ee:	d104      	bne.n	80024fa <USB_HC_Halt+0x5a>
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80024f6:	2300      	movs	r3, #0
 80024f8:	e0c8      	b.n	800268c <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <USB_HC_Halt+0x66>
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d163      	bne.n	80025ce <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	4413      	add	r3, r2
 800250e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	0151      	lsls	r1, r2, #5
 8002518:	69fa      	ldr	r2, [r7, #28]
 800251a:	440a      	add	r2, r1
 800251c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002520:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002524:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	2b00      	cmp	r3, #0
 8002530:	f040 80ab 	bne.w	800268a <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002538:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d133      	bne.n	80025a8 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	015a      	lsls	r2, r3, #5
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	4413      	add	r3, r2
 8002548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	0151      	lsls	r1, r2, #5
 8002552:	69fa      	ldr	r2, [r7, #28]
 8002554:	440a      	add	r2, r1
 8002556:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800255a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800255e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	015a      	lsls	r2, r3, #5
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	4413      	add	r3, r2
 8002568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	0151      	lsls	r1, r2, #5
 8002572:	69fa      	ldr	r2, [r7, #28]
 8002574:	440a      	add	r2, r1
 8002576:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800257a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800257e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	3301      	adds	r3, #1
 8002584:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800258c:	d81d      	bhi.n	80025ca <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	015a      	lsls	r2, r3, #5
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	4413      	add	r3, r2
 8002596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80025a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025a4:	d0ec      	beq.n	8002580 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80025a6:	e070      	b.n	800268a <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	015a      	lsls	r2, r3, #5
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	4413      	add	r3, r2
 80025b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	0151      	lsls	r1, r2, #5
 80025ba:	69fa      	ldr	r2, [r7, #28]
 80025bc:	440a      	add	r2, r1
 80025be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025c6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80025c8:	e05f      	b.n	800268a <USB_HC_Halt+0x1ea>
            break;
 80025ca:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80025cc:	e05d      	b.n	800268a <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	015a      	lsls	r2, r3, #5
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	4413      	add	r3, r2
 80025d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	0151      	lsls	r1, r2, #5
 80025e0:	69fa      	ldr	r2, [r7, #28]
 80025e2:	440a      	add	r2, r1
 80025e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80025ec:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d133      	bne.n	8002666 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	015a      	lsls	r2, r3, #5
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	4413      	add	r3, r2
 8002606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	0151      	lsls	r1, r2, #5
 8002610:	69fa      	ldr	r2, [r7, #28]
 8002612:	440a      	add	r2, r1
 8002614:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002618:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800261c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	015a      	lsls	r2, r3, #5
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	4413      	add	r3, r2
 8002626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	0151      	lsls	r1, r2, #5
 8002630:	69fa      	ldr	r2, [r7, #28]
 8002632:	440a      	add	r2, r1
 8002634:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002638:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800263c:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	3301      	adds	r3, #1
 8002642:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800264a:	d81d      	bhi.n	8002688 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	015a      	lsls	r2, r3, #5
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	4413      	add	r3, r2
 8002654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800265e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002662:	d0ec      	beq.n	800263e <USB_HC_Halt+0x19e>
 8002664:	e011      	b.n	800268a <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	4413      	add	r3, r2
 800266e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	0151      	lsls	r1, r2, #5
 8002678:	69fa      	ldr	r2, [r7, #28]
 800267a:	440a      	add	r2, r1
 800267c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002680:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	e000      	b.n	800268a <USB_HC_Halt+0x1ea>
          break;
 8002688:	bf00      	nop
    }
  }

  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3724      	adds	r7, #36	; 0x24
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80026a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026aa:	2b84      	cmp	r3, #132	; 0x84
 80026ac:	d005      	beq.n	80026ba <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80026ae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4413      	add	r3, r2
 80026b6:	3303      	adds	r3, #3
 80026b8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80026ba:	68fb      	ldr	r3, [r7, #12]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80026cc:	f000 fe1e 	bl	800330c <vTaskStartScheduler>
  
  return osOK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80026d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026d8:	b089      	sub	sp, #36	; 0x24
 80026da:	af04      	add	r7, sp, #16
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d020      	beq.n	800272a <osThreadCreate+0x54>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d01c      	beq.n	800272a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685c      	ldr	r4, [r3, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681d      	ldr	r5, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691e      	ldr	r6, [r3, #16]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff ffc8 	bl	8002698 <makeFreeRtosPriority>
 8002708:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002712:	9202      	str	r2, [sp, #8]
 8002714:	9301      	str	r3, [sp, #4]
 8002716:	9100      	str	r1, [sp, #0]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	4632      	mov	r2, r6
 800271c:	4629      	mov	r1, r5
 800271e:	4620      	mov	r0, r4
 8002720:	f000 fc2c 	bl	8002f7c <xTaskCreateStatic>
 8002724:	4603      	mov	r3, r0
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	e01c      	b.n	8002764 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685c      	ldr	r4, [r3, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002736:	b29e      	uxth	r6, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff ffaa 	bl	8002698 <makeFreeRtosPriority>
 8002744:	4602      	mov	r2, r0
 8002746:	f107 030c 	add.w	r3, r7, #12
 800274a:	9301      	str	r3, [sp, #4]
 800274c:	9200      	str	r2, [sp, #0]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	4632      	mov	r2, r6
 8002752:	4629      	mov	r1, r5
 8002754:	4620      	mov	r0, r4
 8002756:	f000 fc6e 	bl	8003036 <xTaskCreate>
 800275a:	4603      	mov	r3, r0
 800275c:	2b01      	cmp	r3, #1
 800275e:	d001      	beq.n	8002764 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002760:	2300      	movs	r3, #0
 8002762:	e000      	b.n	8002766 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002764:	68fb      	ldr	r3, [r7, #12]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800276e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b084      	sub	sp, #16
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <osDelay+0x16>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	e000      	b.n	8002786 <osDelay+0x18>
 8002784:	2301      	movs	r3, #1
 8002786:	4618      	mov	r0, r3
 8002788:	f000 fd8c 	bl	80032a4 <vTaskDelay>
  
  return osOK;
 800278c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800278e:	4618      	mov	r0, r3
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002796:	b580      	push	{r7, lr}
 8002798:	b086      	sub	sp, #24
 800279a:	af02      	add	r7, sp, #8
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00f      	beq.n	80027c8 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d10a      	bne.n	80027c4 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2203      	movs	r2, #3
 80027b4:	9200      	str	r2, [sp, #0]
 80027b6:	2200      	movs	r2, #0
 80027b8:	2100      	movs	r1, #0
 80027ba:	2001      	movs	r0, #1
 80027bc:	f000 f93a 	bl	8002a34 <xQueueGenericCreateStatic>
 80027c0:	4603      	mov	r3, r0
 80027c2:	e016      	b.n	80027f2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80027c4:	2300      	movs	r3, #0
 80027c6:	e014      	b.n	80027f2 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d110      	bne.n	80027f0 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80027ce:	2203      	movs	r2, #3
 80027d0:	2100      	movs	r1, #0
 80027d2:	2001      	movs	r0, #1
 80027d4:	f000 f9a6 	bl	8002b24 <xQueueGenericCreate>
 80027d8:	60f8      	str	r0, [r7, #12]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <osSemaphoreCreate+0x56>
 80027e0:	2300      	movs	r3, #0
 80027e2:	2200      	movs	r2, #0
 80027e4:	2100      	movs	r1, #0
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 f9f6 	bl	8002bd8 <xQueueGenericSend>
      return sema;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	e000      	b.n	80027f2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80027f0:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f103 0208 	add.w	r2, r3, #8
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f04f 32ff 	mov.w	r2, #4294967295
 8002812:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f103 0208 	add.w	r2, r3, #8
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f103 0208 	add.w	r2, r3, #8
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	1c5a      	adds	r2, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	601a      	str	r2, [r3, #0]
}
 8002890:	bf00      	nop
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b2:	d103      	bne.n	80028bc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	e00c      	b.n	80028d6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3308      	adds	r3, #8
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	e002      	b.n	80028ca <vListInsert+0x2e>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d2f6      	bcs.n	80028c4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	601a      	str	r2, [r3, #0]
}
 8002902:	bf00      	nop
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800290e:	b480      	push	{r7}
 8002910:	b085      	sub	sp, #20
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6892      	ldr	r2, [r2, #8]
 8002924:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6852      	ldr	r2, [r2, #4]
 800292e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	429a      	cmp	r2, r3
 8002938:	d103      	bne.n	8002942 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	1e5a      	subs	r2, r3, #1
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
	...

08002964 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10a      	bne.n	800298e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800297c:	f383 8811 	msr	BASEPRI, r3
 8002980:	f3bf 8f6f 	isb	sy
 8002984:	f3bf 8f4f 	dsb	sy
 8002988:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800298a:	bf00      	nop
 800298c:	e7fe      	b.n	800298c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800298e:	f001 faf1 	bl	8003f74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299a:	68f9      	ldr	r1, [r7, #12]
 800299c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800299e:	fb01 f303 	mul.w	r3, r1, r3
 80029a2:	441a      	add	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029be:	3b01      	subs	r3, #1
 80029c0:	68f9      	ldr	r1, [r7, #12]
 80029c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029c4:	fb01 f303 	mul.w	r3, r1, r3
 80029c8:	441a      	add	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	22ff      	movs	r2, #255	; 0xff
 80029d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	22ff      	movs	r2, #255	; 0xff
 80029da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d114      	bne.n	8002a0e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d01a      	beq.n	8002a22 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	3310      	adds	r3, #16
 80029f0:	4618      	mov	r0, r3
 80029f2:	f000 fecd 	bl	8003790 <xTaskRemoveFromEventList>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d012      	beq.n	8002a22 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80029fc:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <xQueueGenericReset+0xcc>)
 80029fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	f3bf 8f4f 	dsb	sy
 8002a08:	f3bf 8f6f 	isb	sy
 8002a0c:	e009      	b.n	8002a22 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	3310      	adds	r3, #16
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff fef1 	bl	80027fa <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	3324      	adds	r3, #36	; 0x24
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff feec 	bl	80027fa <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a22:	f001 fad7 	bl	8003fd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a26:	2301      	movs	r3, #1
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	e000ed04 	.word	0xe000ed04

08002a34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08e      	sub	sp, #56	; 0x38
 8002a38:	af02      	add	r7, sp, #8
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
 8002a40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10a      	bne.n	8002a5e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4c:	f383 8811 	msr	BASEPRI, r3
 8002a50:	f3bf 8f6f 	isb	sy
 8002a54:	f3bf 8f4f 	dsb	sy
 8002a58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a5a:	bf00      	nop
 8002a5c:	e7fe      	b.n	8002a5c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10a      	bne.n	8002a7a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a68:	f383 8811 	msr	BASEPRI, r3
 8002a6c:	f3bf 8f6f 	isb	sy
 8002a70:	f3bf 8f4f 	dsb	sy
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a76:	bf00      	nop
 8002a78:	e7fe      	b.n	8002a78 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d002      	beq.n	8002a86 <xQueueGenericCreateStatic+0x52>
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <xQueueGenericCreateStatic+0x56>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <xQueueGenericCreateStatic+0x58>
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10a      	bne.n	8002aa6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a94:	f383 8811 	msr	BASEPRI, r3
 8002a98:	f3bf 8f6f 	isb	sy
 8002a9c:	f3bf 8f4f 	dsb	sy
 8002aa0:	623b      	str	r3, [r7, #32]
}
 8002aa2:	bf00      	nop
 8002aa4:	e7fe      	b.n	8002aa4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d102      	bne.n	8002ab2 <xQueueGenericCreateStatic+0x7e>
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <xQueueGenericCreateStatic+0x82>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <xQueueGenericCreateStatic+0x84>
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10a      	bne.n	8002ad2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac0:	f383 8811 	msr	BASEPRI, r3
 8002ac4:	f3bf 8f6f 	isb	sy
 8002ac8:	f3bf 8f4f 	dsb	sy
 8002acc:	61fb      	str	r3, [r7, #28]
}
 8002ace:	bf00      	nop
 8002ad0:	e7fe      	b.n	8002ad0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002ad2:	2348      	movs	r3, #72	; 0x48
 8002ad4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	2b48      	cmp	r3, #72	; 0x48
 8002ada:	d00a      	beq.n	8002af2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae0:	f383 8811 	msr	BASEPRI, r3
 8002ae4:	f3bf 8f6f 	isb	sy
 8002ae8:	f3bf 8f4f 	dsb	sy
 8002aec:	61bb      	str	r3, [r7, #24]
}
 8002aee:	bf00      	nop
 8002af0:	e7fe      	b.n	8002af0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002af2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00d      	beq.n	8002b1a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b06:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	68b9      	ldr	r1, [r7, #8]
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 f83f 	bl	8002b98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3730      	adds	r7, #48	; 0x30
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08a      	sub	sp, #40	; 0x28
 8002b28:	af02      	add	r7, sp, #8
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10a      	bne.n	8002b4e <xQueueGenericCreate+0x2a>
	__asm volatile
 8002b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3c:	f383 8811 	msr	BASEPRI, r3
 8002b40:	f3bf 8f6f 	isb	sy
 8002b44:	f3bf 8f4f 	dsb	sy
 8002b48:	613b      	str	r3, [r7, #16]
}
 8002b4a:	bf00      	nop
 8002b4c:	e7fe      	b.n	8002b4c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	68ba      	ldr	r2, [r7, #8]
 8002b52:	fb02 f303 	mul.w	r3, r2, r3
 8002b56:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	3348      	adds	r3, #72	; 0x48
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f001 faeb 	bl	8004138 <pvPortMalloc>
 8002b62:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d011      	beq.n	8002b8e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	3348      	adds	r3, #72	; 0x48
 8002b72:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b7c:	79fa      	ldrb	r2, [r7, #7]
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	4613      	mov	r3, r2
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	68b9      	ldr	r1, [r7, #8]
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 f805 	bl	8002b98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002b8e:	69bb      	ldr	r3, [r7, #24]
	}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3720      	adds	r7, #32
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d103      	bne.n	8002bb4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	e002      	b.n	8002bba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	69b8      	ldr	r0, [r7, #24]
 8002bca:	f7ff fecb 	bl	8002964 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002bce:	bf00      	nop
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08e      	sub	sp, #56	; 0x38
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
 8002be4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002be6:	2300      	movs	r3, #0
 8002be8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10a      	bne.n	8002c0a <xQueueGenericSend+0x32>
	__asm volatile
 8002bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf8:	f383 8811 	msr	BASEPRI, r3
 8002bfc:	f3bf 8f6f 	isb	sy
 8002c00:	f3bf 8f4f 	dsb	sy
 8002c04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c06:	bf00      	nop
 8002c08:	e7fe      	b.n	8002c08 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d103      	bne.n	8002c18 <xQueueGenericSend+0x40>
 8002c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <xQueueGenericSend+0x44>
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e000      	b.n	8002c1e <xQueueGenericSend+0x46>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10a      	bne.n	8002c38 <xQueueGenericSend+0x60>
	__asm volatile
 8002c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c26:	f383 8811 	msr	BASEPRI, r3
 8002c2a:	f3bf 8f6f 	isb	sy
 8002c2e:	f3bf 8f4f 	dsb	sy
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c34:	bf00      	nop
 8002c36:	e7fe      	b.n	8002c36 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d103      	bne.n	8002c46 <xQueueGenericSend+0x6e>
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <xQueueGenericSend+0x72>
 8002c46:	2301      	movs	r3, #1
 8002c48:	e000      	b.n	8002c4c <xQueueGenericSend+0x74>
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10a      	bne.n	8002c66 <xQueueGenericSend+0x8e>
	__asm volatile
 8002c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c54:	f383 8811 	msr	BASEPRI, r3
 8002c58:	f3bf 8f6f 	isb	sy
 8002c5c:	f3bf 8f4f 	dsb	sy
 8002c60:	623b      	str	r3, [r7, #32]
}
 8002c62:	bf00      	nop
 8002c64:	e7fe      	b.n	8002c64 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c66:	f000 ff4f 	bl	8003b08 <xTaskGetSchedulerState>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d102      	bne.n	8002c76 <xQueueGenericSend+0x9e>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <xQueueGenericSend+0xa2>
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <xQueueGenericSend+0xa4>
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10a      	bne.n	8002c96 <xQueueGenericSend+0xbe>
	__asm volatile
 8002c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c84:	f383 8811 	msr	BASEPRI, r3
 8002c88:	f3bf 8f6f 	isb	sy
 8002c8c:	f3bf 8f4f 	dsb	sy
 8002c90:	61fb      	str	r3, [r7, #28]
}
 8002c92:	bf00      	nop
 8002c94:	e7fe      	b.n	8002c94 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c96:	f001 f96d 	bl	8003f74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d302      	bcc.n	8002cac <xQueueGenericSend+0xd4>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d129      	bne.n	8002d00 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	68b9      	ldr	r1, [r7, #8]
 8002cb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cb2:	f000 f88f 	bl	8002dd4 <prvCopyDataToQueue>
 8002cb6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d010      	beq.n	8002ce2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc2:	3324      	adds	r3, #36	; 0x24
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 fd63 	bl	8003790 <xTaskRemoveFromEventList>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d013      	beq.n	8002cf8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002cd0:	4b3f      	ldr	r3, [pc, #252]	; (8002dd0 <xQueueGenericSend+0x1f8>)
 8002cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	f3bf 8f4f 	dsb	sy
 8002cdc:	f3bf 8f6f 	isb	sy
 8002ce0:	e00a      	b.n	8002cf8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d007      	beq.n	8002cf8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002ce8:	4b39      	ldr	r3, [pc, #228]	; (8002dd0 <xQueueGenericSend+0x1f8>)
 8002cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	f3bf 8f4f 	dsb	sy
 8002cf4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002cf8:	f001 f96c 	bl	8003fd4 <vPortExitCritical>
				return pdPASS;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e063      	b.n	8002dc8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d103      	bne.n	8002d0e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d06:	f001 f965 	bl	8003fd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	e05c      	b.n	8002dc8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d106      	bne.n	8002d22 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d14:	f107 0314 	add.w	r3, r7, #20
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 fd9b 	bl	8003854 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d22:	f001 f957 	bl	8003fd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d26:	f000 fb51 	bl	80033cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d2a:	f001 f923 	bl	8003f74 <vPortEnterCritical>
 8002d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d34:	b25b      	sxtb	r3, r3
 8002d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3a:	d103      	bne.n	8002d44 <xQueueGenericSend+0x16c>
 8002d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d4a:	b25b      	sxtb	r3, r3
 8002d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d50:	d103      	bne.n	8002d5a <xQueueGenericSend+0x182>
 8002d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d5a:	f001 f93b 	bl	8003fd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d5e:	1d3a      	adds	r2, r7, #4
 8002d60:	f107 0314 	add.w	r3, r7, #20
 8002d64:	4611      	mov	r1, r2
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 fd8a 	bl	8003880 <xTaskCheckForTimeOut>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d124      	bne.n	8002dbc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002d72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d74:	f000 f8ea 	bl	8002f4c <prvIsQueueFull>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d018      	beq.n	8002db0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d80:	3310      	adds	r3, #16
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	4611      	mov	r1, r2
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 fcde 	bl	8003748 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002d8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d8e:	f000 f88b 	bl	8002ea8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002d92:	f000 fb29 	bl	80033e8 <xTaskResumeAll>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f47f af7c 	bne.w	8002c96 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002d9e:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <xQueueGenericSend+0x1f8>)
 8002da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	f3bf 8f4f 	dsb	sy
 8002daa:	f3bf 8f6f 	isb	sy
 8002dae:	e772      	b.n	8002c96 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002db0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002db2:	f000 f879 	bl	8002ea8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002db6:	f000 fb17 	bl	80033e8 <xTaskResumeAll>
 8002dba:	e76c      	b.n	8002c96 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002dbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dbe:	f000 f873 	bl	8002ea8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002dc2:	f000 fb11 	bl	80033e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002dc6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3738      	adds	r7, #56	; 0x38
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	e000ed04 	.word	0xe000ed04

08002dd4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10d      	bne.n	8002e0e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d14d      	bne.n	8002e96 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 fea0 	bl	8003b44 <xTaskPriorityDisinherit>
 8002e04:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	609a      	str	r2, [r3, #8]
 8002e0c:	e043      	b.n	8002e96 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d119      	bne.n	8002e48 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6858      	ldr	r0, [r3, #4]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	68b9      	ldr	r1, [r7, #8]
 8002e20:	f001 fb98 	bl	8004554 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	441a      	add	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d32b      	bcc.n	8002e96 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	605a      	str	r2, [r3, #4]
 8002e46:	e026      	b.n	8002e96 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	68d8      	ldr	r0, [r3, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	461a      	mov	r2, r3
 8002e52:	68b9      	ldr	r1, [r7, #8]
 8002e54:	f001 fb7e 	bl	8004554 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	68da      	ldr	r2, [r3, #12]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	425b      	negs	r3, r3
 8002e62:	441a      	add	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	68da      	ldr	r2, [r3, #12]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d207      	bcs.n	8002e84 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7c:	425b      	negs	r3, r3
 8002e7e:	441a      	add	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d105      	bne.n	8002e96 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d002      	beq.n	8002e96 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1c5a      	adds	r2, r3, #1
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002e9e:	697b      	ldr	r3, [r7, #20]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002eb0:	f001 f860 	bl	8003f74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002eba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ebc:	e011      	b.n	8002ee2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d012      	beq.n	8002eec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	3324      	adds	r3, #36	; 0x24
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 fc60 	bl	8003790 <xTaskRemoveFromEventList>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002ed6:	f000 fd35 	bl	8003944 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
 8002edc:	3b01      	subs	r3, #1
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	dce9      	bgt.n	8002ebe <prvUnlockQueue+0x16>
 8002eea:	e000      	b.n	8002eee <prvUnlockQueue+0x46>
					break;
 8002eec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	22ff      	movs	r2, #255	; 0xff
 8002ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002ef6:	f001 f86d 	bl	8003fd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002efa:	f001 f83b 	bl	8003f74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f06:	e011      	b.n	8002f2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d012      	beq.n	8002f36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3310      	adds	r3, #16
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 fc3b 	bl	8003790 <xTaskRemoveFromEventList>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002f20:	f000 fd10 	bl	8003944 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002f24:	7bbb      	ldrb	r3, [r7, #14]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	dce9      	bgt.n	8002f08 <prvUnlockQueue+0x60>
 8002f34:	e000      	b.n	8002f38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002f36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	22ff      	movs	r2, #255	; 0xff
 8002f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002f40:	f001 f848 	bl	8003fd4 <vPortExitCritical>
}
 8002f44:	bf00      	nop
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f54:	f001 f80e 	bl	8003f74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d102      	bne.n	8002f6a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002f64:	2301      	movs	r3, #1
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	e001      	b.n	8002f6e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f6e:	f001 f831 	bl	8003fd4 <vPortExitCritical>

	return xReturn;
 8002f72:	68fb      	ldr	r3, [r7, #12]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08e      	sub	sp, #56	; 0x38
 8002f80:	af04      	add	r7, sp, #16
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
 8002f88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10a      	bne.n	8002fa6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f94:	f383 8811 	msr	BASEPRI, r3
 8002f98:	f3bf 8f6f 	isb	sy
 8002f9c:	f3bf 8f4f 	dsb	sy
 8002fa0:	623b      	str	r3, [r7, #32]
}
 8002fa2:	bf00      	nop
 8002fa4:	e7fe      	b.n	8002fa4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10a      	bne.n	8002fc2 <xTaskCreateStatic+0x46>
	__asm volatile
 8002fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb0:	f383 8811 	msr	BASEPRI, r3
 8002fb4:	f3bf 8f6f 	isb	sy
 8002fb8:	f3bf 8f4f 	dsb	sy
 8002fbc:	61fb      	str	r3, [r7, #28]
}
 8002fbe:	bf00      	nop
 8002fc0:	e7fe      	b.n	8002fc0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002fc2:	2354      	movs	r3, #84	; 0x54
 8002fc4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	2b54      	cmp	r3, #84	; 0x54
 8002fca:	d00a      	beq.n	8002fe2 <xTaskCreateStatic+0x66>
	__asm volatile
 8002fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd0:	f383 8811 	msr	BASEPRI, r3
 8002fd4:	f3bf 8f6f 	isb	sy
 8002fd8:	f3bf 8f4f 	dsb	sy
 8002fdc:	61bb      	str	r3, [r7, #24]
}
 8002fde:	bf00      	nop
 8002fe0:	e7fe      	b.n	8002fe0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002fe2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d01e      	beq.n	8003028 <xTaskCreateStatic+0xac>
 8002fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d01b      	beq.n	8003028 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ff8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003002:	2300      	movs	r3, #0
 8003004:	9303      	str	r3, [sp, #12]
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	9302      	str	r3, [sp, #8]
 800300a:	f107 0314 	add.w	r3, r7, #20
 800300e:	9301      	str	r3, [sp, #4]
 8003010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	68b9      	ldr	r1, [r7, #8]
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 f850 	bl	80030c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003020:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003022:	f000 f8d5 	bl	80031d0 <prvAddNewTaskToReadyList>
 8003026:	e001      	b.n	800302c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800302c:	697b      	ldr	r3, [r7, #20]
	}
 800302e:	4618      	mov	r0, r3
 8003030:	3728      	adds	r7, #40	; 0x28
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003036:	b580      	push	{r7, lr}
 8003038:	b08c      	sub	sp, #48	; 0x30
 800303a:	af04      	add	r7, sp, #16
 800303c:	60f8      	str	r0, [r7, #12]
 800303e:	60b9      	str	r1, [r7, #8]
 8003040:	603b      	str	r3, [r7, #0]
 8003042:	4613      	mov	r3, r2
 8003044:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003046:	88fb      	ldrh	r3, [r7, #6]
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4618      	mov	r0, r3
 800304c:	f001 f874 	bl	8004138 <pvPortMalloc>
 8003050:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00e      	beq.n	8003076 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003058:	2054      	movs	r0, #84	; 0x54
 800305a:	f001 f86d 	bl	8004138 <pvPortMalloc>
 800305e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	631a      	str	r2, [r3, #48]	; 0x30
 800306c:	e005      	b.n	800307a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800306e:	6978      	ldr	r0, [r7, #20]
 8003070:	f001 f92e 	bl	80042d0 <vPortFree>
 8003074:	e001      	b.n	800307a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003076:	2300      	movs	r3, #0
 8003078:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d017      	beq.n	80030b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003088:	88fa      	ldrh	r2, [r7, #6]
 800308a:	2300      	movs	r3, #0
 800308c:	9303      	str	r3, [sp, #12]
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	9302      	str	r3, [sp, #8]
 8003092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003094:	9301      	str	r3, [sp, #4]
 8003096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	68b9      	ldr	r1, [r7, #8]
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 f80e 	bl	80030c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030a4:	69f8      	ldr	r0, [r7, #28]
 80030a6:	f000 f893 	bl	80031d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80030aa:	2301      	movs	r3, #1
 80030ac:	61bb      	str	r3, [r7, #24]
 80030ae:	e002      	b.n	80030b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80030b0:	f04f 33ff 	mov.w	r3, #4294967295
 80030b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80030b6:	69bb      	ldr	r3, [r7, #24]
	}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3720      	adds	r7, #32
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b088      	sub	sp, #32
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
 80030cc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80030ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80030d8:	3b01      	subs	r3, #1
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	f023 0307 	bic.w	r3, r3, #7
 80030e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <prvInitialiseNewTask+0x48>
	__asm volatile
 80030f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f6:	f383 8811 	msr	BASEPRI, r3
 80030fa:	f3bf 8f6f 	isb	sy
 80030fe:	f3bf 8f4f 	dsb	sy
 8003102:	617b      	str	r3, [r7, #20]
}
 8003104:	bf00      	nop
 8003106:	e7fe      	b.n	8003106 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d01f      	beq.n	800314e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800310e:	2300      	movs	r3, #0
 8003110:	61fb      	str	r3, [r7, #28]
 8003112:	e012      	b.n	800313a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	4413      	add	r3, r2
 800311a:	7819      	ldrb	r1, [r3, #0]
 800311c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	4413      	add	r3, r2
 8003122:	3334      	adds	r3, #52	; 0x34
 8003124:	460a      	mov	r2, r1
 8003126:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	4413      	add	r3, r2
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d006      	beq.n	8003142 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	3301      	adds	r3, #1
 8003138:	61fb      	str	r3, [r7, #28]
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	2b0f      	cmp	r3, #15
 800313e:	d9e9      	bls.n	8003114 <prvInitialiseNewTask+0x54>
 8003140:	e000      	b.n	8003144 <prvInitialiseNewTask+0x84>
			{
				break;
 8003142:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800314c:	e003      	b.n	8003156 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800314e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003158:	2b06      	cmp	r3, #6
 800315a:	d901      	bls.n	8003160 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800315c:	2306      	movs	r3, #6
 800315e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003162:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003164:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800316a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800316c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316e:	2200      	movs	r2, #0
 8003170:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003174:	3304      	adds	r3, #4
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff fb5f 	bl	800283a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800317c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317e:	3318      	adds	r3, #24
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff fb5a 	bl	800283a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800318a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800318c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318e:	f1c3 0207 	rsb	r2, r3, #7
 8003192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003194:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800319a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800319c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319e:	2200      	movs	r2, #0
 80031a0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80031a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	68f9      	ldr	r1, [r7, #12]
 80031ae:	69b8      	ldr	r0, [r7, #24]
 80031b0:	f000 fdb4 	bl	8003d1c <pxPortInitialiseStack>
 80031b4:	4602      	mov	r2, r0
 80031b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80031ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d002      	beq.n	80031c6 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80031c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031c6:	bf00      	nop
 80031c8:	3720      	adds	r7, #32
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80031d8:	f000 fecc 	bl	8003f74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80031dc:	4b2a      	ldr	r3, [pc, #168]	; (8003288 <prvAddNewTaskToReadyList+0xb8>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3301      	adds	r3, #1
 80031e2:	4a29      	ldr	r2, [pc, #164]	; (8003288 <prvAddNewTaskToReadyList+0xb8>)
 80031e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80031e6:	4b29      	ldr	r3, [pc, #164]	; (800328c <prvAddNewTaskToReadyList+0xbc>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d109      	bne.n	8003202 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80031ee:	4a27      	ldr	r2, [pc, #156]	; (800328c <prvAddNewTaskToReadyList+0xbc>)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80031f4:	4b24      	ldr	r3, [pc, #144]	; (8003288 <prvAddNewTaskToReadyList+0xb8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d110      	bne.n	800321e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80031fc:	f000 fbc6 	bl	800398c <prvInitialiseTaskLists>
 8003200:	e00d      	b.n	800321e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003202:	4b23      	ldr	r3, [pc, #140]	; (8003290 <prvAddNewTaskToReadyList+0xc0>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d109      	bne.n	800321e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800320a:	4b20      	ldr	r3, [pc, #128]	; (800328c <prvAddNewTaskToReadyList+0xbc>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003214:	429a      	cmp	r2, r3
 8003216:	d802      	bhi.n	800321e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003218:	4a1c      	ldr	r2, [pc, #112]	; (800328c <prvAddNewTaskToReadyList+0xbc>)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800321e:	4b1d      	ldr	r3, [pc, #116]	; (8003294 <prvAddNewTaskToReadyList+0xc4>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	3301      	adds	r3, #1
 8003224:	4a1b      	ldr	r2, [pc, #108]	; (8003294 <prvAddNewTaskToReadyList+0xc4>)
 8003226:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322c:	2201      	movs	r2, #1
 800322e:	409a      	lsls	r2, r3
 8003230:	4b19      	ldr	r3, [pc, #100]	; (8003298 <prvAddNewTaskToReadyList+0xc8>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4313      	orrs	r3, r2
 8003236:	4a18      	ldr	r2, [pc, #96]	; (8003298 <prvAddNewTaskToReadyList+0xc8>)
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4a15      	ldr	r2, [pc, #84]	; (800329c <prvAddNewTaskToReadyList+0xcc>)
 8003248:	441a      	add	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3304      	adds	r3, #4
 800324e:	4619      	mov	r1, r3
 8003250:	4610      	mov	r0, r2
 8003252:	f7ff faff 	bl	8002854 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003256:	f000 febd 	bl	8003fd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800325a:	4b0d      	ldr	r3, [pc, #52]	; (8003290 <prvAddNewTaskToReadyList+0xc0>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00e      	beq.n	8003280 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003262:	4b0a      	ldr	r3, [pc, #40]	; (800328c <prvAddNewTaskToReadyList+0xbc>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326c:	429a      	cmp	r2, r3
 800326e:	d207      	bcs.n	8003280 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003270:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <prvAddNewTaskToReadyList+0xd0>)
 8003272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	f3bf 8f4f 	dsb	sy
 800327c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003280:	bf00      	nop
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	200006a0 	.word	0x200006a0
 800328c:	200005a0 	.word	0x200005a0
 8003290:	200006ac 	.word	0x200006ac
 8003294:	200006bc 	.word	0x200006bc
 8003298:	200006a8 	.word	0x200006a8
 800329c:	200005a4 	.word	0x200005a4
 80032a0:	e000ed04 	.word	0xe000ed04

080032a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80032ac:	2300      	movs	r3, #0
 80032ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d017      	beq.n	80032e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80032b6:	4b13      	ldr	r3, [pc, #76]	; (8003304 <vTaskDelay+0x60>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00a      	beq.n	80032d4 <vTaskDelay+0x30>
	__asm volatile
 80032be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c2:	f383 8811 	msr	BASEPRI, r3
 80032c6:	f3bf 8f6f 	isb	sy
 80032ca:	f3bf 8f4f 	dsb	sy
 80032ce:	60bb      	str	r3, [r7, #8]
}
 80032d0:	bf00      	nop
 80032d2:	e7fe      	b.n	80032d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80032d4:	f000 f87a 	bl	80033cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80032d8:	2100      	movs	r1, #0
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fcb8 	bl	8003c50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80032e0:	f000 f882 	bl	80033e8 <xTaskResumeAll>
 80032e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d107      	bne.n	80032fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80032ec:	4b06      	ldr	r3, [pc, #24]	; (8003308 <vTaskDelay+0x64>)
 80032ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	f3bf 8f4f 	dsb	sy
 80032f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80032fc:	bf00      	nop
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	200006c8 	.word	0x200006c8
 8003308:	e000ed04 	.word	0xe000ed04

0800330c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b08a      	sub	sp, #40	; 0x28
 8003310:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003312:	2300      	movs	r3, #0
 8003314:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003316:	2300      	movs	r3, #0
 8003318:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800331a:	463a      	mov	r2, r7
 800331c:	1d39      	adds	r1, r7, #4
 800331e:	f107 0308 	add.w	r3, r7, #8
 8003322:	4618      	mov	r0, r3
 8003324:	f7fc ff5c 	bl	80001e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003328:	6839      	ldr	r1, [r7, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	9202      	str	r2, [sp, #8]
 8003330:	9301      	str	r3, [sp, #4]
 8003332:	2300      	movs	r3, #0
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	2300      	movs	r3, #0
 8003338:	460a      	mov	r2, r1
 800333a:	491e      	ldr	r1, [pc, #120]	; (80033b4 <vTaskStartScheduler+0xa8>)
 800333c:	481e      	ldr	r0, [pc, #120]	; (80033b8 <vTaskStartScheduler+0xac>)
 800333e:	f7ff fe1d 	bl	8002f7c <xTaskCreateStatic>
 8003342:	4603      	mov	r3, r0
 8003344:	4a1d      	ldr	r2, [pc, #116]	; (80033bc <vTaskStartScheduler+0xb0>)
 8003346:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003348:	4b1c      	ldr	r3, [pc, #112]	; (80033bc <vTaskStartScheduler+0xb0>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003350:	2301      	movs	r3, #1
 8003352:	617b      	str	r3, [r7, #20]
 8003354:	e001      	b.n	800335a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d116      	bne.n	800338e <vTaskStartScheduler+0x82>
	__asm volatile
 8003360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003364:	f383 8811 	msr	BASEPRI, r3
 8003368:	f3bf 8f6f 	isb	sy
 800336c:	f3bf 8f4f 	dsb	sy
 8003370:	613b      	str	r3, [r7, #16]
}
 8003372:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003374:	4b12      	ldr	r3, [pc, #72]	; (80033c0 <vTaskStartScheduler+0xb4>)
 8003376:	f04f 32ff 	mov.w	r2, #4294967295
 800337a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800337c:	4b11      	ldr	r3, [pc, #68]	; (80033c4 <vTaskStartScheduler+0xb8>)
 800337e:	2201      	movs	r2, #1
 8003380:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003382:	4b11      	ldr	r3, [pc, #68]	; (80033c8 <vTaskStartScheduler+0xbc>)
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003388:	f000 fd52 	bl	8003e30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800338c:	e00e      	b.n	80033ac <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003394:	d10a      	bne.n	80033ac <vTaskStartScheduler+0xa0>
	__asm volatile
 8003396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339a:	f383 8811 	msr	BASEPRI, r3
 800339e:	f3bf 8f6f 	isb	sy
 80033a2:	f3bf 8f4f 	dsb	sy
 80033a6:	60fb      	str	r3, [r7, #12]
}
 80033a8:	bf00      	nop
 80033aa:	e7fe      	b.n	80033aa <vTaskStartScheduler+0x9e>
}
 80033ac:	bf00      	nop
 80033ae:	3718      	adds	r7, #24
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	08004630 	.word	0x08004630
 80033b8:	0800395d 	.word	0x0800395d
 80033bc:	200006c4 	.word	0x200006c4
 80033c0:	200006c0 	.word	0x200006c0
 80033c4:	200006ac 	.word	0x200006ac
 80033c8:	200006a4 	.word	0x200006a4

080033cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80033d0:	4b04      	ldr	r3, [pc, #16]	; (80033e4 <vTaskSuspendAll+0x18>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	3301      	adds	r3, #1
 80033d6:	4a03      	ldr	r2, [pc, #12]	; (80033e4 <vTaskSuspendAll+0x18>)
 80033d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80033da:	bf00      	nop
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	200006c8 	.word	0x200006c8

080033e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80033ee:	2300      	movs	r3, #0
 80033f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80033f2:	2300      	movs	r3, #0
 80033f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80033f6:	4b41      	ldr	r3, [pc, #260]	; (80034fc <xTaskResumeAll+0x114>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10a      	bne.n	8003414 <xTaskResumeAll+0x2c>
	__asm volatile
 80033fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003402:	f383 8811 	msr	BASEPRI, r3
 8003406:	f3bf 8f6f 	isb	sy
 800340a:	f3bf 8f4f 	dsb	sy
 800340e:	603b      	str	r3, [r7, #0]
}
 8003410:	bf00      	nop
 8003412:	e7fe      	b.n	8003412 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003414:	f000 fdae 	bl	8003f74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003418:	4b38      	ldr	r3, [pc, #224]	; (80034fc <xTaskResumeAll+0x114>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	3b01      	subs	r3, #1
 800341e:	4a37      	ldr	r2, [pc, #220]	; (80034fc <xTaskResumeAll+0x114>)
 8003420:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003422:	4b36      	ldr	r3, [pc, #216]	; (80034fc <xTaskResumeAll+0x114>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d161      	bne.n	80034ee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800342a:	4b35      	ldr	r3, [pc, #212]	; (8003500 <xTaskResumeAll+0x118>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d05d      	beq.n	80034ee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003432:	e02e      	b.n	8003492 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003434:	4b33      	ldr	r3, [pc, #204]	; (8003504 <xTaskResumeAll+0x11c>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	3318      	adds	r3, #24
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff fa64 	bl	800290e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	3304      	adds	r3, #4
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff fa5f 	bl	800290e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003454:	2201      	movs	r2, #1
 8003456:	409a      	lsls	r2, r3
 8003458:	4b2b      	ldr	r3, [pc, #172]	; (8003508 <xTaskResumeAll+0x120>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4313      	orrs	r3, r2
 800345e:	4a2a      	ldr	r2, [pc, #168]	; (8003508 <xTaskResumeAll+0x120>)
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003466:	4613      	mov	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4a27      	ldr	r2, [pc, #156]	; (800350c <xTaskResumeAll+0x124>)
 8003470:	441a      	add	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	3304      	adds	r3, #4
 8003476:	4619      	mov	r1, r3
 8003478:	4610      	mov	r0, r2
 800347a:	f7ff f9eb 	bl	8002854 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003482:	4b23      	ldr	r3, [pc, #140]	; (8003510 <xTaskResumeAll+0x128>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003488:	429a      	cmp	r2, r3
 800348a:	d302      	bcc.n	8003492 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800348c:	4b21      	ldr	r3, [pc, #132]	; (8003514 <xTaskResumeAll+0x12c>)
 800348e:	2201      	movs	r2, #1
 8003490:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003492:	4b1c      	ldr	r3, [pc, #112]	; (8003504 <xTaskResumeAll+0x11c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1cc      	bne.n	8003434 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80034a0:	f000 fb12 	bl	8003ac8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80034a4:	4b1c      	ldr	r3, [pc, #112]	; (8003518 <xTaskResumeAll+0x130>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d010      	beq.n	80034d2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80034b0:	f000 f836 	bl	8003520 <xTaskIncrementTick>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d002      	beq.n	80034c0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80034ba:	4b16      	ldr	r3, [pc, #88]	; (8003514 <xTaskResumeAll+0x12c>)
 80034bc:	2201      	movs	r2, #1
 80034be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3b01      	subs	r3, #1
 80034c4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1f1      	bne.n	80034b0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80034cc:	4b12      	ldr	r3, [pc, #72]	; (8003518 <xTaskResumeAll+0x130>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80034d2:	4b10      	ldr	r3, [pc, #64]	; (8003514 <xTaskResumeAll+0x12c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d009      	beq.n	80034ee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80034da:	2301      	movs	r3, #1
 80034dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80034de:	4b0f      	ldr	r3, [pc, #60]	; (800351c <xTaskResumeAll+0x134>)
 80034e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	f3bf 8f4f 	dsb	sy
 80034ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80034ee:	f000 fd71 	bl	8003fd4 <vPortExitCritical>

	return xAlreadyYielded;
 80034f2:	68bb      	ldr	r3, [r7, #8]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	200006c8 	.word	0x200006c8
 8003500:	200006a0 	.word	0x200006a0
 8003504:	20000660 	.word	0x20000660
 8003508:	200006a8 	.word	0x200006a8
 800350c:	200005a4 	.word	0x200005a4
 8003510:	200005a0 	.word	0x200005a0
 8003514:	200006b4 	.word	0x200006b4
 8003518:	200006b0 	.word	0x200006b0
 800351c:	e000ed04 	.word	0xe000ed04

08003520 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003526:	2300      	movs	r3, #0
 8003528:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800352a:	4b4e      	ldr	r3, [pc, #312]	; (8003664 <xTaskIncrementTick+0x144>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	f040 808e 	bne.w	8003650 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003534:	4b4c      	ldr	r3, [pc, #304]	; (8003668 <xTaskIncrementTick+0x148>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	3301      	adds	r3, #1
 800353a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800353c:	4a4a      	ldr	r2, [pc, #296]	; (8003668 <xTaskIncrementTick+0x148>)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d120      	bne.n	800358a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003548:	4b48      	ldr	r3, [pc, #288]	; (800366c <xTaskIncrementTick+0x14c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <xTaskIncrementTick+0x48>
	__asm volatile
 8003552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003556:	f383 8811 	msr	BASEPRI, r3
 800355a:	f3bf 8f6f 	isb	sy
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	603b      	str	r3, [r7, #0]
}
 8003564:	bf00      	nop
 8003566:	e7fe      	b.n	8003566 <xTaskIncrementTick+0x46>
 8003568:	4b40      	ldr	r3, [pc, #256]	; (800366c <xTaskIncrementTick+0x14c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	4b40      	ldr	r3, [pc, #256]	; (8003670 <xTaskIncrementTick+0x150>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a3e      	ldr	r2, [pc, #248]	; (800366c <xTaskIncrementTick+0x14c>)
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	4a3e      	ldr	r2, [pc, #248]	; (8003670 <xTaskIncrementTick+0x150>)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6013      	str	r3, [r2, #0]
 800357c:	4b3d      	ldr	r3, [pc, #244]	; (8003674 <xTaskIncrementTick+0x154>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	3301      	adds	r3, #1
 8003582:	4a3c      	ldr	r2, [pc, #240]	; (8003674 <xTaskIncrementTick+0x154>)
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	f000 fa9f 	bl	8003ac8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800358a:	4b3b      	ldr	r3, [pc, #236]	; (8003678 <xTaskIncrementTick+0x158>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	429a      	cmp	r2, r3
 8003592:	d348      	bcc.n	8003626 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003594:	4b35      	ldr	r3, [pc, #212]	; (800366c <xTaskIncrementTick+0x14c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d104      	bne.n	80035a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800359e:	4b36      	ldr	r3, [pc, #216]	; (8003678 <xTaskIncrementTick+0x158>)
 80035a0:	f04f 32ff 	mov.w	r2, #4294967295
 80035a4:	601a      	str	r2, [r3, #0]
					break;
 80035a6:	e03e      	b.n	8003626 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035a8:	4b30      	ldr	r3, [pc, #192]	; (800366c <xTaskIncrementTick+0x14c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d203      	bcs.n	80035c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80035c0:	4a2d      	ldr	r2, [pc, #180]	; (8003678 <xTaskIncrementTick+0x158>)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80035c6:	e02e      	b.n	8003626 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	3304      	adds	r3, #4
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff f99e 	bl	800290e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d004      	beq.n	80035e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	3318      	adds	r3, #24
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff f995 	bl	800290e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e8:	2201      	movs	r2, #1
 80035ea:	409a      	lsls	r2, r3
 80035ec:	4b23      	ldr	r3, [pc, #140]	; (800367c <xTaskIncrementTick+0x15c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	4a22      	ldr	r2, [pc, #136]	; (800367c <xTaskIncrementTick+0x15c>)
 80035f4:	6013      	str	r3, [r2, #0]
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4a1f      	ldr	r2, [pc, #124]	; (8003680 <xTaskIncrementTick+0x160>)
 8003604:	441a      	add	r2, r3
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	3304      	adds	r3, #4
 800360a:	4619      	mov	r1, r3
 800360c:	4610      	mov	r0, r2
 800360e:	f7ff f921 	bl	8002854 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003616:	4b1b      	ldr	r3, [pc, #108]	; (8003684 <xTaskIncrementTick+0x164>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361c:	429a      	cmp	r2, r3
 800361e:	d3b9      	bcc.n	8003594 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003620:	2301      	movs	r3, #1
 8003622:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003624:	e7b6      	b.n	8003594 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003626:	4b17      	ldr	r3, [pc, #92]	; (8003684 <xTaskIncrementTick+0x164>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800362c:	4914      	ldr	r1, [pc, #80]	; (8003680 <xTaskIncrementTick+0x160>)
 800362e:	4613      	mov	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d901      	bls.n	8003642 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800363e:	2301      	movs	r3, #1
 8003640:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003642:	4b11      	ldr	r3, [pc, #68]	; (8003688 <xTaskIncrementTick+0x168>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d007      	beq.n	800365a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800364a:	2301      	movs	r3, #1
 800364c:	617b      	str	r3, [r7, #20]
 800364e:	e004      	b.n	800365a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003650:	4b0e      	ldr	r3, [pc, #56]	; (800368c <xTaskIncrementTick+0x16c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	3301      	adds	r3, #1
 8003656:	4a0d      	ldr	r2, [pc, #52]	; (800368c <xTaskIncrementTick+0x16c>)
 8003658:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800365a:	697b      	ldr	r3, [r7, #20]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	200006c8 	.word	0x200006c8
 8003668:	200006a4 	.word	0x200006a4
 800366c:	20000658 	.word	0x20000658
 8003670:	2000065c 	.word	0x2000065c
 8003674:	200006b8 	.word	0x200006b8
 8003678:	200006c0 	.word	0x200006c0
 800367c:	200006a8 	.word	0x200006a8
 8003680:	200005a4 	.word	0x200005a4
 8003684:	200005a0 	.word	0x200005a0
 8003688:	200006b4 	.word	0x200006b4
 800368c:	200006b0 	.word	0x200006b0

08003690 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003690:	b480      	push	{r7}
 8003692:	b087      	sub	sp, #28
 8003694:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003696:	4b27      	ldr	r3, [pc, #156]	; (8003734 <vTaskSwitchContext+0xa4>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800369e:	4b26      	ldr	r3, [pc, #152]	; (8003738 <vTaskSwitchContext+0xa8>)
 80036a0:	2201      	movs	r2, #1
 80036a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80036a4:	e03f      	b.n	8003726 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80036a6:	4b24      	ldr	r3, [pc, #144]	; (8003738 <vTaskSwitchContext+0xa8>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036ac:	4b23      	ldr	r3, [pc, #140]	; (800373c <vTaskSwitchContext+0xac>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	fab3 f383 	clz	r3, r3
 80036b8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80036ba:	7afb      	ldrb	r3, [r7, #11]
 80036bc:	f1c3 031f 	rsb	r3, r3, #31
 80036c0:	617b      	str	r3, [r7, #20]
 80036c2:	491f      	ldr	r1, [pc, #124]	; (8003740 <vTaskSwitchContext+0xb0>)
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	4613      	mov	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	440b      	add	r3, r1
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10a      	bne.n	80036ec <vTaskSwitchContext+0x5c>
	__asm volatile
 80036d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036da:	f383 8811 	msr	BASEPRI, r3
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	f3bf 8f4f 	dsb	sy
 80036e6:	607b      	str	r3, [r7, #4]
}
 80036e8:	bf00      	nop
 80036ea:	e7fe      	b.n	80036ea <vTaskSwitchContext+0x5a>
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4a12      	ldr	r2, [pc, #72]	; (8003740 <vTaskSwitchContext+0xb0>)
 80036f8:	4413      	add	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	605a      	str	r2, [r3, #4]
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	3308      	adds	r3, #8
 800370e:	429a      	cmp	r2, r3
 8003710:	d104      	bne.n	800371c <vTaskSwitchContext+0x8c>
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	605a      	str	r2, [r3, #4]
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	4a08      	ldr	r2, [pc, #32]	; (8003744 <vTaskSwitchContext+0xb4>)
 8003724:	6013      	str	r3, [r2, #0]
}
 8003726:	bf00      	nop
 8003728:	371c      	adds	r7, #28
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	200006c8 	.word	0x200006c8
 8003738:	200006b4 	.word	0x200006b4
 800373c:	200006a8 	.word	0x200006a8
 8003740:	200005a4 	.word	0x200005a4
 8003744:	200005a0 	.word	0x200005a0

08003748 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10a      	bne.n	800376e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375c:	f383 8811 	msr	BASEPRI, r3
 8003760:	f3bf 8f6f 	isb	sy
 8003764:	f3bf 8f4f 	dsb	sy
 8003768:	60fb      	str	r3, [r7, #12]
}
 800376a:	bf00      	nop
 800376c:	e7fe      	b.n	800376c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800376e:	4b07      	ldr	r3, [pc, #28]	; (800378c <vTaskPlaceOnEventList+0x44>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	3318      	adds	r3, #24
 8003774:	4619      	mov	r1, r3
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7ff f890 	bl	800289c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800377c:	2101      	movs	r1, #1
 800377e:	6838      	ldr	r0, [r7, #0]
 8003780:	f000 fa66 	bl	8003c50 <prvAddCurrentTaskToDelayedList>
}
 8003784:	bf00      	nop
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	200005a0 	.word	0x200005a0

08003790 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10a      	bne.n	80037bc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80037a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037aa:	f383 8811 	msr	BASEPRI, r3
 80037ae:	f3bf 8f6f 	isb	sy
 80037b2:	f3bf 8f4f 	dsb	sy
 80037b6:	60fb      	str	r3, [r7, #12]
}
 80037b8:	bf00      	nop
 80037ba:	e7fe      	b.n	80037ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	3318      	adds	r3, #24
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff f8a4 	bl	800290e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037c6:	4b1d      	ldr	r3, [pc, #116]	; (800383c <xTaskRemoveFromEventList+0xac>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d11c      	bne.n	8003808 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	3304      	adds	r3, #4
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7ff f89b 	bl	800290e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037dc:	2201      	movs	r2, #1
 80037de:	409a      	lsls	r2, r3
 80037e0:	4b17      	ldr	r3, [pc, #92]	; (8003840 <xTaskRemoveFromEventList+0xb0>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	4a16      	ldr	r2, [pc, #88]	; (8003840 <xTaskRemoveFromEventList+0xb0>)
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ee:	4613      	mov	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4413      	add	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4a13      	ldr	r2, [pc, #76]	; (8003844 <xTaskRemoveFromEventList+0xb4>)
 80037f8:	441a      	add	r2, r3
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	3304      	adds	r3, #4
 80037fe:	4619      	mov	r1, r3
 8003800:	4610      	mov	r0, r2
 8003802:	f7ff f827 	bl	8002854 <vListInsertEnd>
 8003806:	e005      	b.n	8003814 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	3318      	adds	r3, #24
 800380c:	4619      	mov	r1, r3
 800380e:	480e      	ldr	r0, [pc, #56]	; (8003848 <xTaskRemoveFromEventList+0xb8>)
 8003810:	f7ff f820 	bl	8002854 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003818:	4b0c      	ldr	r3, [pc, #48]	; (800384c <xTaskRemoveFromEventList+0xbc>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381e:	429a      	cmp	r2, r3
 8003820:	d905      	bls.n	800382e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003822:	2301      	movs	r3, #1
 8003824:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003826:	4b0a      	ldr	r3, [pc, #40]	; (8003850 <xTaskRemoveFromEventList+0xc0>)
 8003828:	2201      	movs	r2, #1
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	e001      	b.n	8003832 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800382e:	2300      	movs	r3, #0
 8003830:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003832:	697b      	ldr	r3, [r7, #20]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3718      	adds	r7, #24
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	200006c8 	.word	0x200006c8
 8003840:	200006a8 	.word	0x200006a8
 8003844:	200005a4 	.word	0x200005a4
 8003848:	20000660 	.word	0x20000660
 800384c:	200005a0 	.word	0x200005a0
 8003850:	200006b4 	.word	0x200006b4

08003854 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800385c:	4b06      	ldr	r3, [pc, #24]	; (8003878 <vTaskInternalSetTimeOutState+0x24>)
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003864:	4b05      	ldr	r3, [pc, #20]	; (800387c <vTaskInternalSetTimeOutState+0x28>)
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	605a      	str	r2, [r3, #4]
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	200006b8 	.word	0x200006b8
 800387c:	200006a4 	.word	0x200006a4

08003880 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b088      	sub	sp, #32
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10a      	bne.n	80038a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003894:	f383 8811 	msr	BASEPRI, r3
 8003898:	f3bf 8f6f 	isb	sy
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	613b      	str	r3, [r7, #16]
}
 80038a2:	bf00      	nop
 80038a4:	e7fe      	b.n	80038a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10a      	bne.n	80038c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80038ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	60fb      	str	r3, [r7, #12]
}
 80038be:	bf00      	nop
 80038c0:	e7fe      	b.n	80038c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80038c2:	f000 fb57 	bl	8003f74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80038c6:	4b1d      	ldr	r3, [pc, #116]	; (800393c <xTaskCheckForTimeOut+0xbc>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038de:	d102      	bne.n	80038e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80038e0:	2300      	movs	r3, #0
 80038e2:	61fb      	str	r3, [r7, #28]
 80038e4:	e023      	b.n	800392e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	4b15      	ldr	r3, [pc, #84]	; (8003940 <xTaskCheckForTimeOut+0xc0>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d007      	beq.n	8003902 <xTaskCheckForTimeOut+0x82>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d302      	bcc.n	8003902 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80038fc:	2301      	movs	r3, #1
 80038fe:	61fb      	str	r3, [r7, #28]
 8003900:	e015      	b.n	800392e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	429a      	cmp	r2, r3
 800390a:	d20b      	bcs.n	8003924 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	1ad2      	subs	r2, r2, r3
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7ff ff9b 	bl	8003854 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800391e:	2300      	movs	r3, #0
 8003920:	61fb      	str	r3, [r7, #28]
 8003922:	e004      	b.n	800392e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800392a:	2301      	movs	r3, #1
 800392c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800392e:	f000 fb51 	bl	8003fd4 <vPortExitCritical>

	return xReturn;
 8003932:	69fb      	ldr	r3, [r7, #28]
}
 8003934:	4618      	mov	r0, r3
 8003936:	3720      	adds	r7, #32
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	200006a4 	.word	0x200006a4
 8003940:	200006b8 	.word	0x200006b8

08003944 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003948:	4b03      	ldr	r3, [pc, #12]	; (8003958 <vTaskMissedYield+0x14>)
 800394a:	2201      	movs	r2, #1
 800394c:	601a      	str	r2, [r3, #0]
}
 800394e:	bf00      	nop
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	200006b4 	.word	0x200006b4

0800395c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003964:	f000 f852 	bl	8003a0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003968:	4b06      	ldr	r3, [pc, #24]	; (8003984 <prvIdleTask+0x28>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d9f9      	bls.n	8003964 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003970:	4b05      	ldr	r3, [pc, #20]	; (8003988 <prvIdleTask+0x2c>)
 8003972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	f3bf 8f4f 	dsb	sy
 800397c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003980:	e7f0      	b.n	8003964 <prvIdleTask+0x8>
 8003982:	bf00      	nop
 8003984:	200005a4 	.word	0x200005a4
 8003988:	e000ed04 	.word	0xe000ed04

0800398c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003992:	2300      	movs	r3, #0
 8003994:	607b      	str	r3, [r7, #4]
 8003996:	e00c      	b.n	80039b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	4613      	mov	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	4a12      	ldr	r2, [pc, #72]	; (80039ec <prvInitialiseTaskLists+0x60>)
 80039a4:	4413      	add	r3, r2
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fe ff27 	bl	80027fa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3301      	adds	r3, #1
 80039b0:	607b      	str	r3, [r7, #4]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b06      	cmp	r3, #6
 80039b6:	d9ef      	bls.n	8003998 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80039b8:	480d      	ldr	r0, [pc, #52]	; (80039f0 <prvInitialiseTaskLists+0x64>)
 80039ba:	f7fe ff1e 	bl	80027fa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80039be:	480d      	ldr	r0, [pc, #52]	; (80039f4 <prvInitialiseTaskLists+0x68>)
 80039c0:	f7fe ff1b 	bl	80027fa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80039c4:	480c      	ldr	r0, [pc, #48]	; (80039f8 <prvInitialiseTaskLists+0x6c>)
 80039c6:	f7fe ff18 	bl	80027fa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80039ca:	480c      	ldr	r0, [pc, #48]	; (80039fc <prvInitialiseTaskLists+0x70>)
 80039cc:	f7fe ff15 	bl	80027fa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80039d0:	480b      	ldr	r0, [pc, #44]	; (8003a00 <prvInitialiseTaskLists+0x74>)
 80039d2:	f7fe ff12 	bl	80027fa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80039d6:	4b0b      	ldr	r3, [pc, #44]	; (8003a04 <prvInitialiseTaskLists+0x78>)
 80039d8:	4a05      	ldr	r2, [pc, #20]	; (80039f0 <prvInitialiseTaskLists+0x64>)
 80039da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80039dc:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <prvInitialiseTaskLists+0x7c>)
 80039de:	4a05      	ldr	r2, [pc, #20]	; (80039f4 <prvInitialiseTaskLists+0x68>)
 80039e0:	601a      	str	r2, [r3, #0]
}
 80039e2:	bf00      	nop
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	200005a4 	.word	0x200005a4
 80039f0:	20000630 	.word	0x20000630
 80039f4:	20000644 	.word	0x20000644
 80039f8:	20000660 	.word	0x20000660
 80039fc:	20000674 	.word	0x20000674
 8003a00:	2000068c 	.word	0x2000068c
 8003a04:	20000658 	.word	0x20000658
 8003a08:	2000065c 	.word	0x2000065c

08003a0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a12:	e019      	b.n	8003a48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003a14:	f000 faae 	bl	8003f74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a18:	4b10      	ldr	r3, [pc, #64]	; (8003a5c <prvCheckTasksWaitingTermination+0x50>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3304      	adds	r3, #4
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7fe ff72 	bl	800290e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003a2a:	4b0d      	ldr	r3, [pc, #52]	; (8003a60 <prvCheckTasksWaitingTermination+0x54>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	4a0b      	ldr	r2, [pc, #44]	; (8003a60 <prvCheckTasksWaitingTermination+0x54>)
 8003a32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003a34:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <prvCheckTasksWaitingTermination+0x58>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	4a0a      	ldr	r2, [pc, #40]	; (8003a64 <prvCheckTasksWaitingTermination+0x58>)
 8003a3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003a3e:	f000 fac9 	bl	8003fd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f810 	bl	8003a68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a48:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <prvCheckTasksWaitingTermination+0x58>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1e1      	bne.n	8003a14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003a50:	bf00      	nop
 8003a52:	bf00      	nop
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	20000674 	.word	0x20000674
 8003a60:	200006a0 	.word	0x200006a0
 8003a64:	20000688 	.word	0x20000688

08003a68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d108      	bne.n	8003a8c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 fc26 	bl	80042d0 <vPortFree>
				vPortFree( pxTCB );
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 fc23 	bl	80042d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003a8a:	e018      	b.n	8003abe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d103      	bne.n	8003a9e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 fc1a 	bl	80042d0 <vPortFree>
	}
 8003a9c:	e00f      	b.n	8003abe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d00a      	beq.n	8003abe <prvDeleteTCB+0x56>
	__asm volatile
 8003aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aac:	f383 8811 	msr	BASEPRI, r3
 8003ab0:	f3bf 8f6f 	isb	sy
 8003ab4:	f3bf 8f4f 	dsb	sy
 8003ab8:	60fb      	str	r3, [r7, #12]
}
 8003aba:	bf00      	nop
 8003abc:	e7fe      	b.n	8003abc <prvDeleteTCB+0x54>
	}
 8003abe:	bf00      	nop
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
	...

08003ac8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ace:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <prvResetNextTaskUnblockTime+0x38>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d104      	bne.n	8003ae2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ad8:	4b0a      	ldr	r3, [pc, #40]	; (8003b04 <prvResetNextTaskUnblockTime+0x3c>)
 8003ada:	f04f 32ff 	mov.w	r2, #4294967295
 8003ade:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003ae0:	e008      	b.n	8003af4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ae2:	4b07      	ldr	r3, [pc, #28]	; (8003b00 <prvResetNextTaskUnblockTime+0x38>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	4a04      	ldr	r2, [pc, #16]	; (8003b04 <prvResetNextTaskUnblockTime+0x3c>)
 8003af2:	6013      	str	r3, [r2, #0]
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	20000658 	.word	0x20000658
 8003b04:	200006c0 	.word	0x200006c0

08003b08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003b0e:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <xTaskGetSchedulerState+0x34>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d102      	bne.n	8003b1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003b16:	2301      	movs	r3, #1
 8003b18:	607b      	str	r3, [r7, #4]
 8003b1a:	e008      	b.n	8003b2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b1c:	4b08      	ldr	r3, [pc, #32]	; (8003b40 <xTaskGetSchedulerState+0x38>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d102      	bne.n	8003b2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003b24:	2302      	movs	r3, #2
 8003b26:	607b      	str	r3, [r7, #4]
 8003b28:	e001      	b.n	8003b2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003b2e:	687b      	ldr	r3, [r7, #4]
	}
 8003b30:	4618      	mov	r0, r3
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	200006ac 	.word	0x200006ac
 8003b40:	200006c8 	.word	0x200006c8

08003b44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003b50:	2300      	movs	r3, #0
 8003b52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d06e      	beq.n	8003c38 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003b5a:	4b3a      	ldr	r3, [pc, #232]	; (8003c44 <xTaskPriorityDisinherit+0x100>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d00a      	beq.n	8003b7a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b68:	f383 8811 	msr	BASEPRI, r3
 8003b6c:	f3bf 8f6f 	isb	sy
 8003b70:	f3bf 8f4f 	dsb	sy
 8003b74:	60fb      	str	r3, [r7, #12]
}
 8003b76:	bf00      	nop
 8003b78:	e7fe      	b.n	8003b78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10a      	bne.n	8003b98 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	60bb      	str	r3, [r7, #8]
}
 8003b94:	bf00      	nop
 8003b96:	e7fe      	b.n	8003b96 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b9c:	1e5a      	subs	r2, r3, #1
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d044      	beq.n	8003c38 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d140      	bne.n	8003c38 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	3304      	adds	r3, #4
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fe fea7 	bl	800290e <uxListRemove>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d115      	bne.n	8003bf2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bca:	491f      	ldr	r1, [pc, #124]	; (8003c48 <xTaskPriorityDisinherit+0x104>)
 8003bcc:	4613      	mov	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10a      	bne.n	8003bf2 <xTaskPriorityDisinherit+0xae>
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be0:	2201      	movs	r2, #1
 8003be2:	fa02 f303 	lsl.w	r3, r2, r3
 8003be6:	43da      	mvns	r2, r3
 8003be8:	4b18      	ldr	r3, [pc, #96]	; (8003c4c <xTaskPriorityDisinherit+0x108>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4013      	ands	r3, r2
 8003bee:	4a17      	ldr	r2, [pc, #92]	; (8003c4c <xTaskPriorityDisinherit+0x108>)
 8003bf0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfe:	f1c3 0207 	rsb	r2, r3, #7
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	409a      	lsls	r2, r3
 8003c0e:	4b0f      	ldr	r3, [pc, #60]	; (8003c4c <xTaskPriorityDisinherit+0x108>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	4a0d      	ldr	r2, [pc, #52]	; (8003c4c <xTaskPriorityDisinherit+0x108>)
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4a08      	ldr	r2, [pc, #32]	; (8003c48 <xTaskPriorityDisinherit+0x104>)
 8003c26:	441a      	add	r2, r3
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4610      	mov	r0, r2
 8003c30:	f7fe fe10 	bl	8002854 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003c34:	2301      	movs	r3, #1
 8003c36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003c38:	697b      	ldr	r3, [r7, #20]
	}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	200005a0 	.word	0x200005a0
 8003c48:	200005a4 	.word	0x200005a4
 8003c4c:	200006a8 	.word	0x200006a8

08003c50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003c5a:	4b29      	ldr	r3, [pc, #164]	; (8003d00 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c60:	4b28      	ldr	r3, [pc, #160]	; (8003d04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	3304      	adds	r3, #4
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fe fe51 	bl	800290e <uxListRemove>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10b      	bne.n	8003c8a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003c72:	4b24      	ldr	r3, [pc, #144]	; (8003d04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c78:	2201      	movs	r2, #1
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	43da      	mvns	r2, r3
 8003c80:	4b21      	ldr	r3, [pc, #132]	; (8003d08 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4013      	ands	r3, r2
 8003c86:	4a20      	ldr	r2, [pc, #128]	; (8003d08 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003c88:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c90:	d10a      	bne.n	8003ca8 <prvAddCurrentTaskToDelayedList+0x58>
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d007      	beq.n	8003ca8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c98:	4b1a      	ldr	r3, [pc, #104]	; (8003d04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	481a      	ldr	r0, [pc, #104]	; (8003d0c <prvAddCurrentTaskToDelayedList+0xbc>)
 8003ca2:	f7fe fdd7 	bl	8002854 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003ca6:	e026      	b.n	8003cf6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4413      	add	r3, r2
 8003cae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003cb0:	4b14      	ldr	r3, [pc, #80]	; (8003d04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d209      	bcs.n	8003cd4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cc0:	4b13      	ldr	r3, [pc, #76]	; (8003d10 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	4b0f      	ldr	r3, [pc, #60]	; (8003d04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	3304      	adds	r3, #4
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4610      	mov	r0, r2
 8003cce:	f7fe fde5 	bl	800289c <vListInsert>
}
 8003cd2:	e010      	b.n	8003cf6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cd4:	4b0f      	ldr	r3, [pc, #60]	; (8003d14 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	4b0a      	ldr	r3, [pc, #40]	; (8003d04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	3304      	adds	r3, #4
 8003cde:	4619      	mov	r1, r3
 8003ce0:	4610      	mov	r0, r2
 8003ce2:	f7fe fddb 	bl	800289c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003ce6:	4b0c      	ldr	r3, [pc, #48]	; (8003d18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d202      	bcs.n	8003cf6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003cf0:	4a09      	ldr	r2, [pc, #36]	; (8003d18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	6013      	str	r3, [r2, #0]
}
 8003cf6:	bf00      	nop
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	200006a4 	.word	0x200006a4
 8003d04:	200005a0 	.word	0x200005a0
 8003d08:	200006a8 	.word	0x200006a8
 8003d0c:	2000068c 	.word	0x2000068c
 8003d10:	2000065c 	.word	0x2000065c
 8003d14:	20000658 	.word	0x20000658
 8003d18:	200006c0 	.word	0x200006c0

08003d1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	3b04      	subs	r3, #4
 8003d2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	3b04      	subs	r3, #4
 8003d3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f023 0201 	bic.w	r2, r3, #1
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	3b04      	subs	r3, #4
 8003d4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003d4c:	4a0c      	ldr	r2, [pc, #48]	; (8003d80 <pxPortInitialiseStack+0x64>)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	3b14      	subs	r3, #20
 8003d56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	3b04      	subs	r3, #4
 8003d62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f06f 0202 	mvn.w	r2, #2
 8003d6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	3b20      	subs	r3, #32
 8003d70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003d72:	68fb      	ldr	r3, [r7, #12]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	08003d85 	.word	0x08003d85

08003d84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003d8e:	4b12      	ldr	r3, [pc, #72]	; (8003dd8 <prvTaskExitError+0x54>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d96:	d00a      	beq.n	8003dae <prvTaskExitError+0x2a>
	__asm volatile
 8003d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9c:	f383 8811 	msr	BASEPRI, r3
 8003da0:	f3bf 8f6f 	isb	sy
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	60fb      	str	r3, [r7, #12]
}
 8003daa:	bf00      	nop
 8003dac:	e7fe      	b.n	8003dac <prvTaskExitError+0x28>
	__asm volatile
 8003dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db2:	f383 8811 	msr	BASEPRI, r3
 8003db6:	f3bf 8f6f 	isb	sy
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	60bb      	str	r3, [r7, #8]
}
 8003dc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003dc2:	bf00      	nop
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0fc      	beq.n	8003dc4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003dca:	bf00      	nop
 8003dcc:	bf00      	nop
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	2000000c 	.word	0x2000000c
 8003ddc:	00000000 	.word	0x00000000

08003de0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003de0:	4b07      	ldr	r3, [pc, #28]	; (8003e00 <pxCurrentTCBConst2>)
 8003de2:	6819      	ldr	r1, [r3, #0]
 8003de4:	6808      	ldr	r0, [r1, #0]
 8003de6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dea:	f380 8809 	msr	PSP, r0
 8003dee:	f3bf 8f6f 	isb	sy
 8003df2:	f04f 0000 	mov.w	r0, #0
 8003df6:	f380 8811 	msr	BASEPRI, r0
 8003dfa:	4770      	bx	lr
 8003dfc:	f3af 8000 	nop.w

08003e00 <pxCurrentTCBConst2>:
 8003e00:	200005a0 	.word	0x200005a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003e04:	bf00      	nop
 8003e06:	bf00      	nop

08003e08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003e08:	4808      	ldr	r0, [pc, #32]	; (8003e2c <prvPortStartFirstTask+0x24>)
 8003e0a:	6800      	ldr	r0, [r0, #0]
 8003e0c:	6800      	ldr	r0, [r0, #0]
 8003e0e:	f380 8808 	msr	MSP, r0
 8003e12:	f04f 0000 	mov.w	r0, #0
 8003e16:	f380 8814 	msr	CONTROL, r0
 8003e1a:	b662      	cpsie	i
 8003e1c:	b661      	cpsie	f
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	df00      	svc	0
 8003e28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003e2a:	bf00      	nop
 8003e2c:	e000ed08 	.word	0xe000ed08

08003e30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e36:	4b46      	ldr	r3, [pc, #280]	; (8003f50 <xPortStartScheduler+0x120>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a46      	ldr	r2, [pc, #280]	; (8003f54 <xPortStartScheduler+0x124>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d10a      	bne.n	8003e56 <xPortStartScheduler+0x26>
	__asm volatile
 8003e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e44:	f383 8811 	msr	BASEPRI, r3
 8003e48:	f3bf 8f6f 	isb	sy
 8003e4c:	f3bf 8f4f 	dsb	sy
 8003e50:	613b      	str	r3, [r7, #16]
}
 8003e52:	bf00      	nop
 8003e54:	e7fe      	b.n	8003e54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003e56:	4b3e      	ldr	r3, [pc, #248]	; (8003f50 <xPortStartScheduler+0x120>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a3f      	ldr	r2, [pc, #252]	; (8003f58 <xPortStartScheduler+0x128>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d10a      	bne.n	8003e76 <xPortStartScheduler+0x46>
	__asm volatile
 8003e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e64:	f383 8811 	msr	BASEPRI, r3
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	60fb      	str	r3, [r7, #12]
}
 8003e72:	bf00      	nop
 8003e74:	e7fe      	b.n	8003e74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e76:	4b39      	ldr	r3, [pc, #228]	; (8003f5c <xPortStartScheduler+0x12c>)
 8003e78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	22ff      	movs	r2, #255	; 0xff
 8003e86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e90:	78fb      	ldrb	r3, [r7, #3]
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	4b31      	ldr	r3, [pc, #196]	; (8003f60 <xPortStartScheduler+0x130>)
 8003e9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e9e:	4b31      	ldr	r3, [pc, #196]	; (8003f64 <xPortStartScheduler+0x134>)
 8003ea0:	2207      	movs	r2, #7
 8003ea2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ea4:	e009      	b.n	8003eba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003ea6:	4b2f      	ldr	r3, [pc, #188]	; (8003f64 <xPortStartScheduler+0x134>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	4a2d      	ldr	r2, [pc, #180]	; (8003f64 <xPortStartScheduler+0x134>)
 8003eae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003eb0:	78fb      	ldrb	r3, [r7, #3]
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003eba:	78fb      	ldrb	r3, [r7, #3]
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec2:	2b80      	cmp	r3, #128	; 0x80
 8003ec4:	d0ef      	beq.n	8003ea6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ec6:	4b27      	ldr	r3, [pc, #156]	; (8003f64 <xPortStartScheduler+0x134>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f1c3 0307 	rsb	r3, r3, #7
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	d00a      	beq.n	8003ee8 <xPortStartScheduler+0xb8>
	__asm volatile
 8003ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed6:	f383 8811 	msr	BASEPRI, r3
 8003eda:	f3bf 8f6f 	isb	sy
 8003ede:	f3bf 8f4f 	dsb	sy
 8003ee2:	60bb      	str	r3, [r7, #8]
}
 8003ee4:	bf00      	nop
 8003ee6:	e7fe      	b.n	8003ee6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003ee8:	4b1e      	ldr	r3, [pc, #120]	; (8003f64 <xPortStartScheduler+0x134>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	021b      	lsls	r3, r3, #8
 8003eee:	4a1d      	ldr	r2, [pc, #116]	; (8003f64 <xPortStartScheduler+0x134>)
 8003ef0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003ef2:	4b1c      	ldr	r3, [pc, #112]	; (8003f64 <xPortStartScheduler+0x134>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003efa:	4a1a      	ldr	r2, [pc, #104]	; (8003f64 <xPortStartScheduler+0x134>)
 8003efc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003f06:	4b18      	ldr	r3, [pc, #96]	; (8003f68 <xPortStartScheduler+0x138>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a17      	ldr	r2, [pc, #92]	; (8003f68 <xPortStartScheduler+0x138>)
 8003f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003f12:	4b15      	ldr	r3, [pc, #84]	; (8003f68 <xPortStartScheduler+0x138>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a14      	ldr	r2, [pc, #80]	; (8003f68 <xPortStartScheduler+0x138>)
 8003f18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003f1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003f1e:	f000 f8dd 	bl	80040dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003f22:	4b12      	ldr	r3, [pc, #72]	; (8003f6c <xPortStartScheduler+0x13c>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003f28:	f000 f8fc 	bl	8004124 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003f2c:	4b10      	ldr	r3, [pc, #64]	; (8003f70 <xPortStartScheduler+0x140>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a0f      	ldr	r2, [pc, #60]	; (8003f70 <xPortStartScheduler+0x140>)
 8003f32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003f36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003f38:	f7ff ff66 	bl	8003e08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003f3c:	f7ff fba8 	bl	8003690 <vTaskSwitchContext>
	prvTaskExitError();
 8003f40:	f7ff ff20 	bl	8003d84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3718      	adds	r7, #24
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	e000ed00 	.word	0xe000ed00
 8003f54:	410fc271 	.word	0x410fc271
 8003f58:	410fc270 	.word	0x410fc270
 8003f5c:	e000e400 	.word	0xe000e400
 8003f60:	200006cc 	.word	0x200006cc
 8003f64:	200006d0 	.word	0x200006d0
 8003f68:	e000ed20 	.word	0xe000ed20
 8003f6c:	2000000c 	.word	0x2000000c
 8003f70:	e000ef34 	.word	0xe000ef34

08003f74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
	__asm volatile
 8003f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7e:	f383 8811 	msr	BASEPRI, r3
 8003f82:	f3bf 8f6f 	isb	sy
 8003f86:	f3bf 8f4f 	dsb	sy
 8003f8a:	607b      	str	r3, [r7, #4]
}
 8003f8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003f8e:	4b0f      	ldr	r3, [pc, #60]	; (8003fcc <vPortEnterCritical+0x58>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	3301      	adds	r3, #1
 8003f94:	4a0d      	ldr	r2, [pc, #52]	; (8003fcc <vPortEnterCritical+0x58>)
 8003f96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003f98:	4b0c      	ldr	r3, [pc, #48]	; (8003fcc <vPortEnterCritical+0x58>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d10f      	bne.n	8003fc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003fa0:	4b0b      	ldr	r3, [pc, #44]	; (8003fd0 <vPortEnterCritical+0x5c>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00a      	beq.n	8003fc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8003faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fae:	f383 8811 	msr	BASEPRI, r3
 8003fb2:	f3bf 8f6f 	isb	sy
 8003fb6:	f3bf 8f4f 	dsb	sy
 8003fba:	603b      	str	r3, [r7, #0]
}
 8003fbc:	bf00      	nop
 8003fbe:	e7fe      	b.n	8003fbe <vPortEnterCritical+0x4a>
	}
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	2000000c 	.word	0x2000000c
 8003fd0:	e000ed04 	.word	0xe000ed04

08003fd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003fda:	4b12      	ldr	r3, [pc, #72]	; (8004024 <vPortExitCritical+0x50>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10a      	bne.n	8003ff8 <vPortExitCritical+0x24>
	__asm volatile
 8003fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe6:	f383 8811 	msr	BASEPRI, r3
 8003fea:	f3bf 8f6f 	isb	sy
 8003fee:	f3bf 8f4f 	dsb	sy
 8003ff2:	607b      	str	r3, [r7, #4]
}
 8003ff4:	bf00      	nop
 8003ff6:	e7fe      	b.n	8003ff6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003ff8:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <vPortExitCritical+0x50>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	4a09      	ldr	r2, [pc, #36]	; (8004024 <vPortExitCritical+0x50>)
 8004000:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004002:	4b08      	ldr	r3, [pc, #32]	; (8004024 <vPortExitCritical+0x50>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d105      	bne.n	8004016 <vPortExitCritical+0x42>
 800400a:	2300      	movs	r3, #0
 800400c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004014:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	2000000c 	.word	0x2000000c
	...

08004030 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004030:	f3ef 8009 	mrs	r0, PSP
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	4b15      	ldr	r3, [pc, #84]	; (8004090 <pxCurrentTCBConst>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	f01e 0f10 	tst.w	lr, #16
 8004040:	bf08      	it	eq
 8004042:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004046:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800404a:	6010      	str	r0, [r2, #0]
 800404c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004050:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004054:	f380 8811 	msr	BASEPRI, r0
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	f3bf 8f6f 	isb	sy
 8004060:	f7ff fb16 	bl	8003690 <vTaskSwitchContext>
 8004064:	f04f 0000 	mov.w	r0, #0
 8004068:	f380 8811 	msr	BASEPRI, r0
 800406c:	bc09      	pop	{r0, r3}
 800406e:	6819      	ldr	r1, [r3, #0]
 8004070:	6808      	ldr	r0, [r1, #0]
 8004072:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004076:	f01e 0f10 	tst.w	lr, #16
 800407a:	bf08      	it	eq
 800407c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004080:	f380 8809 	msr	PSP, r0
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	f3af 8000 	nop.w

08004090 <pxCurrentTCBConst>:
 8004090:	200005a0 	.word	0x200005a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004094:	bf00      	nop
 8004096:	bf00      	nop

08004098 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
	__asm volatile
 800409e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a2:	f383 8811 	msr	BASEPRI, r3
 80040a6:	f3bf 8f6f 	isb	sy
 80040aa:	f3bf 8f4f 	dsb	sy
 80040ae:	607b      	str	r3, [r7, #4]
}
 80040b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80040b2:	f7ff fa35 	bl	8003520 <xTaskIncrementTick>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d003      	beq.n	80040c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80040bc:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <xPortSysTickHandler+0x40>)
 80040be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	2300      	movs	r3, #0
 80040c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	f383 8811 	msr	BASEPRI, r3
}
 80040ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80040d0:	bf00      	nop
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	e000ed04 	.word	0xe000ed04

080040dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80040e0:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <vPortSetupTimerInterrupt+0x34>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80040e6:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <vPortSetupTimerInterrupt+0x38>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80040ec:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <vPortSetupTimerInterrupt+0x3c>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a0a      	ldr	r2, [pc, #40]	; (800411c <vPortSetupTimerInterrupt+0x40>)
 80040f2:	fba2 2303 	umull	r2, r3, r2, r3
 80040f6:	099b      	lsrs	r3, r3, #6
 80040f8:	4a09      	ldr	r2, [pc, #36]	; (8004120 <vPortSetupTimerInterrupt+0x44>)
 80040fa:	3b01      	subs	r3, #1
 80040fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80040fe:	4b04      	ldr	r3, [pc, #16]	; (8004110 <vPortSetupTimerInterrupt+0x34>)
 8004100:	2207      	movs	r2, #7
 8004102:	601a      	str	r2, [r3, #0]
}
 8004104:	bf00      	nop
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	e000e010 	.word	0xe000e010
 8004114:	e000e018 	.word	0xe000e018
 8004118:	20000000 	.word	0x20000000
 800411c:	10624dd3 	.word	0x10624dd3
 8004120:	e000e014 	.word	0xe000e014

08004124 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004124:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004134 <vPortEnableVFP+0x10>
 8004128:	6801      	ldr	r1, [r0, #0]
 800412a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800412e:	6001      	str	r1, [r0, #0]
 8004130:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004132:	bf00      	nop
 8004134:	e000ed88 	.word	0xe000ed88

08004138 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08a      	sub	sp, #40	; 0x28
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004140:	2300      	movs	r3, #0
 8004142:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004144:	f7ff f942 	bl	80033cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004148:	4b5b      	ldr	r3, [pc, #364]	; (80042b8 <pvPortMalloc+0x180>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004150:	f000 f920 	bl	8004394 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004154:	4b59      	ldr	r3, [pc, #356]	; (80042bc <pvPortMalloc+0x184>)
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4013      	ands	r3, r2
 800415c:	2b00      	cmp	r3, #0
 800415e:	f040 8093 	bne.w	8004288 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d01d      	beq.n	80041a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004168:	2208      	movs	r2, #8
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4413      	add	r3, r2
 800416e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	2b00      	cmp	r3, #0
 8004178:	d014      	beq.n	80041a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f023 0307 	bic.w	r3, r3, #7
 8004180:	3308      	adds	r3, #8
 8004182:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <pvPortMalloc+0x6c>
	__asm volatile
 800418e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004192:	f383 8811 	msr	BASEPRI, r3
 8004196:	f3bf 8f6f 	isb	sy
 800419a:	f3bf 8f4f 	dsb	sy
 800419e:	617b      	str	r3, [r7, #20]
}
 80041a0:	bf00      	nop
 80041a2:	e7fe      	b.n	80041a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d06e      	beq.n	8004288 <pvPortMalloc+0x150>
 80041aa:	4b45      	ldr	r3, [pc, #276]	; (80042c0 <pvPortMalloc+0x188>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d869      	bhi.n	8004288 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80041b4:	4b43      	ldr	r3, [pc, #268]	; (80042c4 <pvPortMalloc+0x18c>)
 80041b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80041b8:	4b42      	ldr	r3, [pc, #264]	; (80042c4 <pvPortMalloc+0x18c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041be:	e004      	b.n	80041ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d903      	bls.n	80041dc <pvPortMalloc+0xa4>
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1f1      	bne.n	80041c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80041dc:	4b36      	ldr	r3, [pc, #216]	; (80042b8 <pvPortMalloc+0x180>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d050      	beq.n	8004288 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2208      	movs	r2, #8
 80041ec:	4413      	add	r3, r2
 80041ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	6a3b      	ldr	r3, [r7, #32]
 80041f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	1ad2      	subs	r2, r2, r3
 8004200:	2308      	movs	r3, #8
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	429a      	cmp	r2, r3
 8004206:	d91f      	bls.n	8004248 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4413      	add	r3, r2
 800420e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <pvPortMalloc+0xf8>
	__asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	613b      	str	r3, [r7, #16]
}
 800422c:	bf00      	nop
 800422e:	e7fe      	b.n	800422e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	1ad2      	subs	r2, r2, r3
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004242:	69b8      	ldr	r0, [r7, #24]
 8004244:	f000 f908 	bl	8004458 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004248:	4b1d      	ldr	r3, [pc, #116]	; (80042c0 <pvPortMalloc+0x188>)
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	4a1b      	ldr	r2, [pc, #108]	; (80042c0 <pvPortMalloc+0x188>)
 8004254:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004256:	4b1a      	ldr	r3, [pc, #104]	; (80042c0 <pvPortMalloc+0x188>)
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	4b1b      	ldr	r3, [pc, #108]	; (80042c8 <pvPortMalloc+0x190>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d203      	bcs.n	800426a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004262:	4b17      	ldr	r3, [pc, #92]	; (80042c0 <pvPortMalloc+0x188>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a18      	ldr	r2, [pc, #96]	; (80042c8 <pvPortMalloc+0x190>)
 8004268:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	4b13      	ldr	r3, [pc, #76]	; (80042bc <pvPortMalloc+0x184>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	431a      	orrs	r2, r3
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	2200      	movs	r2, #0
 800427c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800427e:	4b13      	ldr	r3, [pc, #76]	; (80042cc <pvPortMalloc+0x194>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	3301      	adds	r3, #1
 8004284:	4a11      	ldr	r2, [pc, #68]	; (80042cc <pvPortMalloc+0x194>)
 8004286:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004288:	f7ff f8ae 	bl	80033e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	f003 0307 	and.w	r3, r3, #7
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00a      	beq.n	80042ac <pvPortMalloc+0x174>
	__asm volatile
 8004296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429a:	f383 8811 	msr	BASEPRI, r3
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	f3bf 8f4f 	dsb	sy
 80042a6:	60fb      	str	r3, [r7, #12]
}
 80042a8:	bf00      	nop
 80042aa:	e7fe      	b.n	80042aa <pvPortMalloc+0x172>
	return pvReturn;
 80042ac:	69fb      	ldr	r3, [r7, #28]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3728      	adds	r7, #40	; 0x28
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	200042dc 	.word	0x200042dc
 80042bc:	200042f0 	.word	0x200042f0
 80042c0:	200042e0 	.word	0x200042e0
 80042c4:	200042d4 	.word	0x200042d4
 80042c8:	200042e4 	.word	0x200042e4
 80042cc:	200042e8 	.word	0x200042e8

080042d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d04d      	beq.n	800437e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80042e2:	2308      	movs	r3, #8
 80042e4:	425b      	negs	r3, r3
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	4413      	add	r3, r2
 80042ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	4b24      	ldr	r3, [pc, #144]	; (8004388 <vPortFree+0xb8>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4013      	ands	r3, r2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10a      	bne.n	8004314 <vPortFree+0x44>
	__asm volatile
 80042fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004302:	f383 8811 	msr	BASEPRI, r3
 8004306:	f3bf 8f6f 	isb	sy
 800430a:	f3bf 8f4f 	dsb	sy
 800430e:	60fb      	str	r3, [r7, #12]
}
 8004310:	bf00      	nop
 8004312:	e7fe      	b.n	8004312 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00a      	beq.n	8004332 <vPortFree+0x62>
	__asm volatile
 800431c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004320:	f383 8811 	msr	BASEPRI, r3
 8004324:	f3bf 8f6f 	isb	sy
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	60bb      	str	r3, [r7, #8]
}
 800432e:	bf00      	nop
 8004330:	e7fe      	b.n	8004330 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	4b14      	ldr	r3, [pc, #80]	; (8004388 <vPortFree+0xb8>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4013      	ands	r3, r2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d01e      	beq.n	800437e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d11a      	bne.n	800437e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	4b0e      	ldr	r3, [pc, #56]	; (8004388 <vPortFree+0xb8>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	43db      	mvns	r3, r3
 8004352:	401a      	ands	r2, r3
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004358:	f7ff f838 	bl	80033cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	4b0a      	ldr	r3, [pc, #40]	; (800438c <vPortFree+0xbc>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4413      	add	r3, r2
 8004366:	4a09      	ldr	r2, [pc, #36]	; (800438c <vPortFree+0xbc>)
 8004368:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800436a:	6938      	ldr	r0, [r7, #16]
 800436c:	f000 f874 	bl	8004458 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004370:	4b07      	ldr	r3, [pc, #28]	; (8004390 <vPortFree+0xc0>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	3301      	adds	r3, #1
 8004376:	4a06      	ldr	r2, [pc, #24]	; (8004390 <vPortFree+0xc0>)
 8004378:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800437a:	f7ff f835 	bl	80033e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800437e:	bf00      	nop
 8004380:	3718      	adds	r7, #24
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	200042f0 	.word	0x200042f0
 800438c:	200042e0 	.word	0x200042e0
 8004390:	200042ec 	.word	0x200042ec

08004394 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800439a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800439e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80043a0:	4b27      	ldr	r3, [pc, #156]	; (8004440 <prvHeapInit+0xac>)
 80043a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00c      	beq.n	80043c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	3307      	adds	r3, #7
 80043b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f023 0307 	bic.w	r3, r3, #7
 80043ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	4a1f      	ldr	r2, [pc, #124]	; (8004440 <prvHeapInit+0xac>)
 80043c4:	4413      	add	r3, r2
 80043c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80043cc:	4a1d      	ldr	r2, [pc, #116]	; (8004444 <prvHeapInit+0xb0>)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80043d2:	4b1c      	ldr	r3, [pc, #112]	; (8004444 <prvHeapInit+0xb0>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	4413      	add	r3, r2
 80043de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80043e0:	2208      	movs	r2, #8
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	1a9b      	subs	r3, r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f023 0307 	bic.w	r3, r3, #7
 80043ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4a15      	ldr	r2, [pc, #84]	; (8004448 <prvHeapInit+0xb4>)
 80043f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80043f6:	4b14      	ldr	r3, [pc, #80]	; (8004448 <prvHeapInit+0xb4>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2200      	movs	r2, #0
 80043fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80043fe:	4b12      	ldr	r3, [pc, #72]	; (8004448 <prvHeapInit+0xb4>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2200      	movs	r2, #0
 8004404:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	1ad2      	subs	r2, r2, r3
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004414:	4b0c      	ldr	r3, [pc, #48]	; (8004448 <prvHeapInit+0xb4>)
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	4a0a      	ldr	r2, [pc, #40]	; (800444c <prvHeapInit+0xb8>)
 8004422:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	4a09      	ldr	r2, [pc, #36]	; (8004450 <prvHeapInit+0xbc>)
 800442a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800442c:	4b09      	ldr	r3, [pc, #36]	; (8004454 <prvHeapInit+0xc0>)
 800442e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004432:	601a      	str	r2, [r3, #0]
}
 8004434:	bf00      	nop
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	200006d4 	.word	0x200006d4
 8004444:	200042d4 	.word	0x200042d4
 8004448:	200042dc 	.word	0x200042dc
 800444c:	200042e4 	.word	0x200042e4
 8004450:	200042e0 	.word	0x200042e0
 8004454:	200042f0 	.word	0x200042f0

08004458 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004460:	4b28      	ldr	r3, [pc, #160]	; (8004504 <prvInsertBlockIntoFreeList+0xac>)
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	e002      	b.n	800446c <prvInsertBlockIntoFreeList+0x14>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	429a      	cmp	r2, r3
 8004474:	d8f7      	bhi.n	8004466 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	4413      	add	r3, r2
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	429a      	cmp	r2, r3
 8004486:	d108      	bne.n	800449a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	441a      	add	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	441a      	add	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d118      	bne.n	80044e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	4b15      	ldr	r3, [pc, #84]	; (8004508 <prvInsertBlockIntoFreeList+0xb0>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d00d      	beq.n	80044d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	441a      	add	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	e008      	b.n	80044e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80044d6:	4b0c      	ldr	r3, [pc, #48]	; (8004508 <prvInsertBlockIntoFreeList+0xb0>)
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	e003      	b.n	80044e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d002      	beq.n	80044f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044f6:	bf00      	nop
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	200042d4 	.word	0x200042d4
 8004508:	200042dc 	.word	0x200042dc

0800450c <__libc_init_array>:
 800450c:	b570      	push	{r4, r5, r6, lr}
 800450e:	4d0d      	ldr	r5, [pc, #52]	; (8004544 <__libc_init_array+0x38>)
 8004510:	4c0d      	ldr	r4, [pc, #52]	; (8004548 <__libc_init_array+0x3c>)
 8004512:	1b64      	subs	r4, r4, r5
 8004514:	10a4      	asrs	r4, r4, #2
 8004516:	2600      	movs	r6, #0
 8004518:	42a6      	cmp	r6, r4
 800451a:	d109      	bne.n	8004530 <__libc_init_array+0x24>
 800451c:	4d0b      	ldr	r5, [pc, #44]	; (800454c <__libc_init_array+0x40>)
 800451e:	4c0c      	ldr	r4, [pc, #48]	; (8004550 <__libc_init_array+0x44>)
 8004520:	f000 f826 	bl	8004570 <_init>
 8004524:	1b64      	subs	r4, r4, r5
 8004526:	10a4      	asrs	r4, r4, #2
 8004528:	2600      	movs	r6, #0
 800452a:	42a6      	cmp	r6, r4
 800452c:	d105      	bne.n	800453a <__libc_init_array+0x2e>
 800452e:	bd70      	pop	{r4, r5, r6, pc}
 8004530:	f855 3b04 	ldr.w	r3, [r5], #4
 8004534:	4798      	blx	r3
 8004536:	3601      	adds	r6, #1
 8004538:	e7ee      	b.n	8004518 <__libc_init_array+0xc>
 800453a:	f855 3b04 	ldr.w	r3, [r5], #4
 800453e:	4798      	blx	r3
 8004540:	3601      	adds	r6, #1
 8004542:	e7f2      	b.n	800452a <__libc_init_array+0x1e>
 8004544:	08004638 	.word	0x08004638
 8004548:	08004638 	.word	0x08004638
 800454c:	08004638 	.word	0x08004638
 8004550:	0800463c 	.word	0x0800463c

08004554 <memcpy>:
 8004554:	440a      	add	r2, r1
 8004556:	4291      	cmp	r1, r2
 8004558:	f100 33ff 	add.w	r3, r0, #4294967295
 800455c:	d100      	bne.n	8004560 <memcpy+0xc>
 800455e:	4770      	bx	lr
 8004560:	b510      	push	{r4, lr}
 8004562:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004566:	f803 4f01 	strb.w	r4, [r3, #1]!
 800456a:	4291      	cmp	r1, r2
 800456c:	d1f9      	bne.n	8004562 <memcpy+0xe>
 800456e:	bd10      	pop	{r4, pc}

08004570 <_init>:
 8004570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004572:	bf00      	nop
 8004574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004576:	bc08      	pop	{r3}
 8004578:	469e      	mov	lr, r3
 800457a:	4770      	bx	lr

0800457c <_fini>:
 800457c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457e:	bf00      	nop
 8004580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004582:	bc08      	pop	{r3}
 8004584:	469e      	mov	lr, r3
 8004586:	4770      	bx	lr
