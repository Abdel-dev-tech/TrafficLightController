
TrafficLightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004948  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004ae8  08004ae8  00014ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b6c  08004b6c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004b6c  08004b6c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b6c  08004b6c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b6c  08004b6c  00014b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b70  08004b70  00014b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004b74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042e0  20000010  08004b84  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200042f0  08004b84  000242f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f3f1  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026c4  00000000  00000000  0002f431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  00031af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b98  00000000  00000000  000327a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172e5  00000000  00000000  00033340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de5f  00000000  00000000  0004a625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000920b7  00000000  00000000  00058484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea53b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003320  00000000  00000000  000ea58c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004ad0 	.word	0x08004ad0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08004ad0 	.word	0x08004ad0

080001e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001e0:	b480      	push	{r7}
 80001e2:	b085      	sub	sp, #20
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	60f8      	str	r0, [r7, #12]
 80001e8:	60b9      	str	r1, [r7, #8]
 80001ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	4a07      	ldr	r2, [pc, #28]	; (800020c <vApplicationGetIdleTaskMemory+0x2c>)
 80001f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001f2:	68bb      	ldr	r3, [r7, #8]
 80001f4:	4a06      	ldr	r2, [pc, #24]	; (8000210 <vApplicationGetIdleTaskMemory+0x30>)
 80001f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2280      	movs	r2, #128	; 0x80
 80001fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001fe:	bf00      	nop
 8000200:	3714      	adds	r7, #20
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	2000002c 	.word	0x2000002c
 8000210:	20000080 	.word	0x20000080

08000214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000214:	b5b0      	push	{r4, r5, r7, lr}
 8000216:	b09a      	sub	sp, #104	; 0x68
 8000218:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021a:	f000 fb45 	bl	80008a8 <HAL_Init>

  /* Configure the system clock */
//  SystemClock_Config();

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800021e:	f000 f867 	bl	80002f0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000222:	f000 f885 	bl	8000330 <MX_GPIO_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of SemaLightSet1 */
  osSemaphoreDef(SemaLightSet1);
 8000226:	2300      	movs	r3, #0
 8000228:	663b      	str	r3, [r7, #96]	; 0x60
 800022a:	2300      	movs	r3, #0
 800022c:	667b      	str	r3, [r7, #100]	; 0x64
  SemaLightSet1Handle = osSemaphoreCreate(osSemaphore(SemaLightSet1), 1);
 800022e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000232:	2101      	movs	r1, #1
 8000234:	4618      	mov	r0, r3
 8000236:	f002 fb0e 	bl	8002856 <osSemaphoreCreate>
 800023a:	4603      	mov	r3, r0
 800023c:	4a24      	ldr	r2, [pc, #144]	; (80002d0 <main+0xbc>)
 800023e:	6013      	str	r3, [r2, #0]

  /* definition and creation of SemaLightSet2 */
  osSemaphoreDef(SemaLightSet2);
 8000240:	2300      	movs	r3, #0
 8000242:	65bb      	str	r3, [r7, #88]	; 0x58
 8000244:	2300      	movs	r3, #0
 8000246:	65fb      	str	r3, [r7, #92]	; 0x5c
  SemaLightSet2Handle = osSemaphoreCreate(osSemaphore(SemaLightSet2), 1);
 8000248:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800024c:	2101      	movs	r1, #1
 800024e:	4618      	mov	r0, r3
 8000250:	f002 fb01 	bl	8002856 <osSemaphoreCreate>
 8000254:	4603      	mov	r3, r0
 8000256:	4a1f      	ldr	r2, [pc, #124]	; (80002d4 <main+0xc0>)
 8000258:	6013      	str	r3, [r2, #0]

  /*SECOND APPROACH*/


  /* definition and creation of TimeManagementT */
  osThreadDef(TimeManagementT, prvTimeMgntTask, osPriorityRealtime, 0, 128);
 800025a:	4b1f      	ldr	r3, [pc, #124]	; (80002d8 <main+0xc4>)
 800025c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000260:	461d      	mov	r5, r3
 8000262:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000266:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800026a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TimeManagementTHandle = osThreadCreate(osThread(TimeManagementT), NULL);
 800026e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000272:	2100      	movs	r1, #0
 8000274:	4618      	mov	r0, r3
 8000276:	f002 fa8e 	bl	8002796 <osThreadCreate>
 800027a:	4603      	mov	r3, r0
 800027c:	4a17      	ldr	r2, [pc, #92]	; (80002dc <main+0xc8>)
 800027e:	6013      	str	r3, [r2, #0]

  /* definition and creation of LightSet1 */
  osThreadDef(LightSet1, prvLightSet1, osPriorityNormal, 0, 128);
 8000280:	4b17      	ldr	r3, [pc, #92]	; (80002e0 <main+0xcc>)
 8000282:	f107 0420 	add.w	r4, r7, #32
 8000286:	461d      	mov	r5, r3
 8000288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800028a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800028c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000290:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LightSet1Handle = osThreadCreate(osThread(LightSet1), NULL);
 8000294:	f107 0320 	add.w	r3, r7, #32
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f002 fa7b 	bl	8002796 <osThreadCreate>
 80002a0:	4603      	mov	r3, r0
 80002a2:	4a10      	ldr	r2, [pc, #64]	; (80002e4 <main+0xd0>)
 80002a4:	6013      	str	r3, [r2, #0]

  /* definition and creation of LightSet2 */
  osThreadDef(LightSet2, prvLightSet2, osPriorityNormal, 0, 128);
 80002a6:	4b10      	ldr	r3, [pc, #64]	; (80002e8 <main+0xd4>)
 80002a8:	1d3c      	adds	r4, r7, #4
 80002aa:	461d      	mov	r5, r3
 80002ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LightSet2Handle = osThreadCreate(osThread(LightSet2), NULL);
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	2100      	movs	r1, #0
 80002bc:	4618      	mov	r0, r3
 80002be:	f002 fa6a 	bl	8002796 <osThreadCreate>
 80002c2:	4603      	mov	r3, r0
 80002c4:	4a09      	ldr	r2, [pc, #36]	; (80002ec <main+0xd8>)
 80002c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002c8:	f002 fa5e 	bl	8002788 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002cc:	e7fe      	b.n	80002cc <main+0xb8>
 80002ce:	bf00      	nop
 80002d0:	20000590 	.word	0x20000590
 80002d4:	20000594 	.word	0x20000594
 80002d8:	08004b10 	.word	0x08004b10
 80002dc:	20000584 	.word	0x20000584
 80002e0:	08004b2c 	.word	0x08004b2c
 80002e4:	20000588 	.word	0x20000588
 80002e8:	08004b48 	.word	0x08004b48
 80002ec:	2000058c 	.word	0x2000058c

080002f0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b086      	sub	sp, #24
 80002f4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80002f6:	463b      	mov	r3, r7
 80002f8:	2200      	movs	r2, #0
 80002fa:	601a      	str	r2, [r3, #0]
 80002fc:	605a      	str	r2, [r3, #4]
 80002fe:	609a      	str	r2, [r3, #8]
 8000300:	60da      	str	r2, [r3, #12]
 8000302:	611a      	str	r2, [r3, #16]
 8000304:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000306:	2301      	movs	r3, #1
 8000308:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800030a:	23c8      	movs	r3, #200	; 0xc8
 800030c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800030e:	2305      	movs	r3, #5
 8000310:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000312:	2302      	movs	r3, #2
 8000314:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000316:	463b      	mov	r3, r7
 8000318:	4618      	mov	r0, r3
 800031a:	f001 ff09 	bl	8002130 <HAL_RCCEx_PeriphCLKConfig>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000324:	f000 fa24 	bl	8000770 <Error_Handler>
  }
}
 8000328:	bf00      	nop
 800032a:	3718      	adds	r7, #24
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}

08000330 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b08c      	sub	sp, #48	; 0x30
 8000334:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000336:	f107 031c 	add.w	r3, r7, #28
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	605a      	str	r2, [r3, #4]
 8000340:	609a      	str	r2, [r3, #8]
 8000342:	60da      	str	r2, [r3, #12]
 8000344:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000346:	2300      	movs	r3, #0
 8000348:	61bb      	str	r3, [r7, #24]
 800034a:	4b5b      	ldr	r3, [pc, #364]	; (80004b8 <MX_GPIO_Init+0x188>)
 800034c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034e:	4a5a      	ldr	r2, [pc, #360]	; (80004b8 <MX_GPIO_Init+0x188>)
 8000350:	f043 0310 	orr.w	r3, r3, #16
 8000354:	6313      	str	r3, [r2, #48]	; 0x30
 8000356:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <MX_GPIO_Init+0x188>)
 8000358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035a:	f003 0310 	and.w	r3, r3, #16
 800035e:	61bb      	str	r3, [r7, #24]
 8000360:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000362:	2300      	movs	r3, #0
 8000364:	617b      	str	r3, [r7, #20]
 8000366:	4b54      	ldr	r3, [pc, #336]	; (80004b8 <MX_GPIO_Init+0x188>)
 8000368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036a:	4a53      	ldr	r2, [pc, #332]	; (80004b8 <MX_GPIO_Init+0x188>)
 800036c:	f043 0304 	orr.w	r3, r3, #4
 8000370:	6313      	str	r3, [r2, #48]	; 0x30
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <MX_GPIO_Init+0x188>)
 8000374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000376:	f003 0304 	and.w	r3, r3, #4
 800037a:	617b      	str	r3, [r7, #20]
 800037c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800037e:	2300      	movs	r3, #0
 8000380:	613b      	str	r3, [r7, #16]
 8000382:	4b4d      	ldr	r3, [pc, #308]	; (80004b8 <MX_GPIO_Init+0x188>)
 8000384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000386:	4a4c      	ldr	r2, [pc, #304]	; (80004b8 <MX_GPIO_Init+0x188>)
 8000388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800038c:	6313      	str	r3, [r2, #48]	; 0x30
 800038e:	4b4a      	ldr	r3, [pc, #296]	; (80004b8 <MX_GPIO_Init+0x188>)
 8000390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000396:	613b      	str	r3, [r7, #16]
 8000398:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800039a:	2300      	movs	r3, #0
 800039c:	60fb      	str	r3, [r7, #12]
 800039e:	4b46      	ldr	r3, [pc, #280]	; (80004b8 <MX_GPIO_Init+0x188>)
 80003a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a2:	4a45      	ldr	r2, [pc, #276]	; (80004b8 <MX_GPIO_Init+0x188>)
 80003a4:	f043 0301 	orr.w	r3, r3, #1
 80003a8:	6313      	str	r3, [r2, #48]	; 0x30
 80003aa:	4b43      	ldr	r3, [pc, #268]	; (80004b8 <MX_GPIO_Init+0x188>)
 80003ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ae:	f003 0301 	and.w	r3, r3, #1
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b6:	2300      	movs	r3, #0
 80003b8:	60bb      	str	r3, [r7, #8]
 80003ba:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <MX_GPIO_Init+0x188>)
 80003bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003be:	4a3e      	ldr	r2, [pc, #248]	; (80004b8 <MX_GPIO_Init+0x188>)
 80003c0:	f043 0302 	orr.w	r3, r3, #2
 80003c4:	6313      	str	r3, [r2, #48]	; 0x30
 80003c6:	4b3c      	ldr	r3, [pc, #240]	; (80004b8 <MX_GPIO_Init+0x188>)
 80003c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ca:	f003 0302 	and.w	r3, r3, #2
 80003ce:	60bb      	str	r3, [r7, #8]
 80003d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003d2:	2300      	movs	r3, #0
 80003d4:	607b      	str	r3, [r7, #4]
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <MX_GPIO_Init+0x188>)
 80003d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003da:	4a37      	ldr	r2, [pc, #220]	; (80004b8 <MX_GPIO_Init+0x188>)
 80003dc:	f043 0308 	orr.w	r3, r3, #8
 80003e0:	6313      	str	r3, [r2, #48]	; 0x30
 80003e2:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <MX_GPIO_Init+0x188>)
 80003e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e6:	f003 0308 	and.w	r3, r3, #8
 80003ea:	607b      	str	r3, [r7, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80003ee:	2200      	movs	r2, #0
 80003f0:	2108      	movs	r1, #8
 80003f2:	4832      	ldr	r0, [pc, #200]	; (80004bc <MX_GPIO_Init+0x18c>)
 80003f4:	f000 fd34 	bl	8000e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80003f8:	2201      	movs	r2, #1
 80003fa:	2101      	movs	r1, #1
 80003fc:	4830      	ldr	r0, [pc, #192]	; (80004c0 <MX_GPIO_Init+0x190>)
 80003fe:	f000 fd2f 	bl	8000e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000402:	2200      	movs	r2, #0
 8000404:	f24f 0130 	movw	r1, #61488	; 0xf030
 8000408:	482e      	ldr	r0, [pc, #184]	; (80004c4 <MX_GPIO_Init+0x194>)
 800040a:	f000 fd29 	bl	8000e60 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800040e:	2304      	movs	r3, #4
 8000410:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000412:	2300      	movs	r3, #0
 8000414:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000416:	2300      	movs	r3, #0
 8000418:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800041a:	f107 031c 	add.w	r3, r7, #28
 800041e:	4619      	mov	r1, r3
 8000420:	4826      	ldr	r0, [pc, #152]	; (80004bc <MX_GPIO_Init+0x18c>)
 8000422:	f000 fb99 	bl	8000b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000426:	2308      	movs	r3, #8
 8000428:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800042a:	2301      	movs	r3, #1
 800042c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042e:	2300      	movs	r3, #0
 8000430:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000432:	2300      	movs	r3, #0
 8000434:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000436:	f107 031c 	add.w	r3, r7, #28
 800043a:	4619      	mov	r1, r3
 800043c:	481f      	ldr	r0, [pc, #124]	; (80004bc <MX_GPIO_Init+0x18c>)
 800043e:	f000 fb8b 	bl	8000b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000442:	2332      	movs	r3, #50	; 0x32
 8000444:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000446:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800044a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044c:	2300      	movs	r3, #0
 800044e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000450:	f107 031c 	add.w	r3, r7, #28
 8000454:	4619      	mov	r1, r3
 8000456:	4819      	ldr	r0, [pc, #100]	; (80004bc <MX_GPIO_Init+0x18c>)
 8000458:	f000 fb7e 	bl	8000b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800045c:	2301      	movs	r3, #1
 800045e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000460:	2301      	movs	r3, #1
 8000462:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	2300      	movs	r3, #0
 8000466:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000468:	2300      	movs	r3, #0
 800046a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800046c:	f107 031c 	add.w	r3, r7, #28
 8000470:	4619      	mov	r1, r3
 8000472:	4813      	ldr	r0, [pc, #76]	; (80004c0 <MX_GPIO_Init+0x190>)
 8000474:	f000 fb70 	bl	8000b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000478:	2301      	movs	r3, #1
 800047a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800047c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000480:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	2300      	movs	r3, #0
 8000484:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000486:	f107 031c 	add.w	r3, r7, #28
 800048a:	4619      	mov	r1, r3
 800048c:	480e      	ldr	r0, [pc, #56]	; (80004c8 <MX_GPIO_Init+0x198>)
 800048e:	f000 fb63 	bl	8000b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin PD5 */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000492:	f24f 0330 	movw	r3, #61488	; 0xf030
 8000496:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000498:	2301      	movs	r3, #1
 800049a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049c:	2300      	movs	r3, #0
 800049e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a0:	2300      	movs	r3, #0
 80004a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80004a4:	f107 031c 	add.w	r3, r7, #28
 80004a8:	4619      	mov	r1, r3
 80004aa:	4806      	ldr	r0, [pc, #24]	; (80004c4 <MX_GPIO_Init+0x194>)
 80004ac:	f000 fb54 	bl	8000b58 <HAL_GPIO_Init>

}
 80004b0:	bf00      	nop
 80004b2:	3730      	adds	r7, #48	; 0x30
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40023800 	.word	0x40023800
 80004bc:	40021000 	.word	0x40021000
 80004c0:	40020800 	.word	0x40020800
 80004c4:	40020c00 	.word	0x40020c00
 80004c8:	40020000 	.word	0x40020000

080004cc <prvTimeMgntTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_prvTimeMgntTask */
void prvTimeMgntTask(void const * argument)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN prvTimeMgntTask */

	  InitTrafficLeds();
 80004d4:	f000 f90c 	bl	80006f0 <InitTrafficLeds>
	/*Turn off all the LEDs*/
	  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15,GPIO_PIN_RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80004de:	4831      	ldr	r0, [pc, #196]	; (80005a4 <prvTimeMgntTask+0xd8>)
 80004e0:	f000 fcbe 	bl	8000e60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);
 80004e4:	2200      	movs	r2, #0
 80004e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ea:	482f      	ldr	r0, [pc, #188]	; (80005a8 <prvTimeMgntTask+0xdc>)
 80004ec:	f000 fcb8 	bl	8000e60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,GPIO_PIN_SET);
 80004f0:	2201      	movs	r2, #1
 80004f2:	2120      	movs	r1, #32
 80004f4:	482b      	ldr	r0, [pc, #172]	; (80005a4 <prvTimeMgntTask+0xd8>)
 80004f6:	f000 fcb3 	bl	8000e60 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
	/*Notify the red light of both sets of 1s*/
	  xSemaphoreGive(SemaLightSet1Handle);
 80004fa:	4b2c      	ldr	r3, [pc, #176]	; (80005ac <prvTimeMgntTask+0xe0>)
 80004fc:	6818      	ldr	r0, [r3, #0]
 80004fe:	2300      	movs	r3, #0
 8000500:	2200      	movs	r2, #0
 8000502:	2100      	movs	r1, #0
 8000504:	f002 fbc8 	bl	8002c98 <xQueueGenericSend>
	  xSemaphoreGive(SemaLightSet2Handle);
 8000508:	4b29      	ldr	r3, [pc, #164]	; (80005b0 <prvTimeMgntTask+0xe4>)
 800050a:	6818      	ldr	r0, [r3, #0]
 800050c:	2300      	movs	r3, #0
 800050e:	2200      	movs	r2, #0
 8000510:	2100      	movs	r1, #0
 8000512:	f002 fbc1 	bl	8002c98 <xQueueGenericSend>
      osDelay(1000);
 8000516:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800051a:	f002 f988 	bl	800282e <osDelay>

  	/*Notify the green light of the set 1 for 4s*/
  	 xSemaphoreGive(SemaLightSet1Handle);
 800051e:	4b23      	ldr	r3, [pc, #140]	; (80005ac <prvTimeMgntTask+0xe0>)
 8000520:	6818      	ldr	r0, [r3, #0]
 8000522:	2300      	movs	r3, #0
 8000524:	2200      	movs	r2, #0
 8000526:	2100      	movs	r1, #0
 8000528:	f002 fbb6 	bl	8002c98 <xQueueGenericSend>
  	 osDelay(4000);
 800052c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000530:	f002 f97d 	bl	800282e <osDelay>
  	/*Notify the Yellow light of the set 1 for 1.5s*/
  	 xSemaphoreGive(SemaLightSet1Handle);
 8000534:	4b1d      	ldr	r3, [pc, #116]	; (80005ac <prvTimeMgntTask+0xe0>)
 8000536:	6818      	ldr	r0, [r3, #0]
 8000538:	2300      	movs	r3, #0
 800053a:	2200      	movs	r2, #0
 800053c:	2100      	movs	r1, #0
 800053e:	f002 fbab 	bl	8002c98 <xQueueGenericSend>
     osDelay(1500);
 8000542:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000546:	f002 f972 	bl	800282e <osDelay>

   	/*Notify the red light of the set 1 for 1s*/
   	 xSemaphoreGive(SemaLightSet1Handle);
 800054a:	4b18      	ldr	r3, [pc, #96]	; (80005ac <prvTimeMgntTask+0xe0>)
 800054c:	6818      	ldr	r0, [r3, #0]
 800054e:	2300      	movs	r3, #0
 8000550:	2200      	movs	r2, #0
 8000552:	2100      	movs	r1, #0
 8000554:	f002 fba0 	bl	8002c98 <xQueueGenericSend>
     osDelay(1000);
 8000558:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800055c:	f002 f967 	bl	800282e <osDelay>

	/*Notify the green light of the set 2 for 4s*/
	 xSemaphoreGive(SemaLightSet2Handle);
 8000560:	4b13      	ldr	r3, [pc, #76]	; (80005b0 <prvTimeMgntTask+0xe4>)
 8000562:	6818      	ldr	r0, [r3, #0]
 8000564:	2300      	movs	r3, #0
 8000566:	2200      	movs	r2, #0
 8000568:	2100      	movs	r1, #0
 800056a:	f002 fb95 	bl	8002c98 <xQueueGenericSend>
     osDelay(4000);
 800056e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000572:	f002 f95c 	bl	800282e <osDelay>

 	/*Notify the yellow light of the set 2 for 1.5s*/
 	 xSemaphoreGive(SemaLightSet2Handle);
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <prvTimeMgntTask+0xe4>)
 8000578:	6818      	ldr	r0, [r3, #0]
 800057a:	2300      	movs	r3, #0
 800057c:	2200      	movs	r2, #0
 800057e:	2100      	movs	r1, #0
 8000580:	f002 fb8a 	bl	8002c98 <xQueueGenericSend>
     osDelay(1500);
 8000584:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000588:	f002 f951 	bl	800282e <osDelay>

  	/*Notify red light of the set 2 for 1.5s*/
  	 xSemaphoreGive(SemaLightSet2Handle);
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <prvTimeMgntTask+0xe4>)
 800058e:	6818      	ldr	r0, [r3, #0]
 8000590:	2300      	movs	r3, #0
 8000592:	2200      	movs	r2, #0
 8000594:	2100      	movs	r1, #0
 8000596:	f002 fb7f 	bl	8002c98 <xQueueGenericSend>
  	 osDelay(1000);
 800059a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800059e:	f002 f946 	bl	800282e <osDelay>
	  xSemaphoreGive(SemaLightSet1Handle);
 80005a2:	e7aa      	b.n	80004fa <prvTimeMgntTask+0x2e>
 80005a4:	40020c00 	.word	0x40020c00
 80005a8:	40020000 	.word	0x40020000
 80005ac:	20000590 	.word	0x20000590
 80005b0:	20000594 	.word	0x20000594

080005b4 <prvLightSet1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_prvLightSet1 */
void prvLightSet1(void const * argument)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN prvLightSet1 */
  /* Infinite loop */
  for(;;)
  {
	xSemaphoreTake(SemaLightSet1Handle, portMAX_DELAY);
 80005bc:	4b23      	ldr	r3, [pc, #140]	; (800064c <prvLightSet1+0x98>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f04f 31ff 	mov.w	r1, #4294967295
 80005c4:	4618      	mov	r0, r3
 80005c6:	f002 fc65 	bl	8002e94 <xQueueSemaphoreTake>
	/*Turn on the red light of the set1 for 1s before turning green light*/
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_SET);
 80005ca:	2201      	movs	r2, #1
 80005cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d0:	481f      	ldr	r0, [pc, #124]	; (8000650 <prvLightSet1+0x9c>)
 80005d2:	f000 fc45 	bl	8000e60 <HAL_GPIO_WritePin>

	xSemaphoreTake(SemaLightSet1Handle, portMAX_DELAY);
 80005d6:	4b1d      	ldr	r3, [pc, #116]	; (800064c <prvLightSet1+0x98>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f04f 31ff 	mov.w	r1, #4294967295
 80005de:	4618      	mov	r0, r3
 80005e0:	f002 fc58 	bl	8002e94 <xQueueSemaphoreTake>
	/*Turn of Red light*/
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ea:	4819      	ldr	r0, [pc, #100]	; (8000650 <prvLightSet1+0x9c>)
 80005ec:	f000 fc38 	bl	8000e60 <HAL_GPIO_WritePin>
	/*Turn on green light*/
    HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f6:	4816      	ldr	r0, [pc, #88]	; (8000650 <prvLightSet1+0x9c>)
 80005f8:	f000 fc32 	bl	8000e60 <HAL_GPIO_WritePin>

    xSemaphoreTake(SemaLightSet1Handle, portMAX_DELAY);
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <prvLightSet1+0x98>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f04f 31ff 	mov.w	r1, #4294967295
 8000604:	4618      	mov	r0, r3
 8000606:	f002 fc45 	bl	8002e94 <xQueueSemaphoreTake>
    /*Turn off green light*/
    HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000610:	480f      	ldr	r0, [pc, #60]	; (8000650 <prvLightSet1+0x9c>)
 8000612:	f000 fc25 	bl	8000e60 <HAL_GPIO_WritePin>
    /*Turn on yellow light*/
    HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_SET);
 8000616:	2201      	movs	r2, #1
 8000618:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061c:	480c      	ldr	r0, [pc, #48]	; (8000650 <prvLightSet1+0x9c>)
 800061e:	f000 fc1f 	bl	8000e60 <HAL_GPIO_WritePin>

    xSemaphoreTake(SemaLightSet1Handle, portMAX_DELAY);
 8000622:	4b0a      	ldr	r3, [pc, #40]	; (800064c <prvLightSet1+0x98>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f04f 31ff 	mov.w	r1, #4294967295
 800062a:	4618      	mov	r0, r3
 800062c:	f002 fc32 	bl	8002e94 <xQueueSemaphoreTake>
    /*Turn off yellow light*/
    HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000636:	4806      	ldr	r0, [pc, #24]	; (8000650 <prvLightSet1+0x9c>)
 8000638:	f000 fc12 	bl	8000e60 <HAL_GPIO_WritePin>
    /*Turn ON red light*/
    HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_SET);
 800063c:	2201      	movs	r2, #1
 800063e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000642:	4803      	ldr	r0, [pc, #12]	; (8000650 <prvLightSet1+0x9c>)
 8000644:	f000 fc0c 	bl	8000e60 <HAL_GPIO_WritePin>
	xSemaphoreTake(SemaLightSet1Handle, portMAX_DELAY);
 8000648:	e7b8      	b.n	80005bc <prvLightSet1+0x8>
 800064a:	bf00      	nop
 800064c:	20000590 	.word	0x20000590
 8000650:	40020c00 	.word	0x40020c00

08000654 <prvLightSet2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_prvLightSet2 */
void prvLightSet2(void const * argument)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN prvLightSet2 */
  /* Infinite loop */
  for(;;)
  {
	xSemaphoreTake(SemaLightSet2Handle, portMAX_DELAY);
 800065c:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <prvLightSet2+0x90>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f04f 31ff 	mov.w	r1, #4294967295
 8000664:	4618      	mov	r0, r3
 8000666:	f002 fc15 	bl	8002e94 <xQueueSemaphoreTake>
	/*Turn on the red light of the set2*/
    HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2120      	movs	r1, #32
 800066e:	481e      	ldr	r0, [pc, #120]	; (80006e8 <prvLightSet2+0x94>)
 8000670:	f000 fbf6 	bl	8000e60 <HAL_GPIO_WritePin>

    xSemaphoreTake(SemaLightSet2Handle, portMAX_DELAY);
 8000674:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <prvLightSet2+0x90>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f04f 31ff 	mov.w	r1, #4294967295
 800067c:	4618      	mov	r0, r3
 800067e:	f002 fc09 	bl	8002e94 <xQueueSemaphoreTake>
    /*Turn off red light*/
    HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,GPIO_PIN_SET);
 8000682:	2201      	movs	r2, #1
 8000684:	2120      	movs	r1, #32
 8000686:	4818      	ldr	r0, [pc, #96]	; (80006e8 <prvLightSet2+0x94>)
 8000688:	f000 fbea 	bl	8000e60 <HAL_GPIO_WritePin>
    /*Turn on green light*/
    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 800068c:	2201      	movs	r2, #1
 800068e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000692:	4816      	ldr	r0, [pc, #88]	; (80006ec <prvLightSet2+0x98>)
 8000694:	f000 fbe4 	bl	8000e60 <HAL_GPIO_WritePin>

    xSemaphoreTake(SemaLightSet2Handle, portMAX_DELAY);
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <prvLightSet2+0x90>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f04f 31ff 	mov.w	r1, #4294967295
 80006a0:	4618      	mov	r0, r3
 80006a2:	f002 fbf7 	bl	8002e94 <xQueueSemaphoreTake>
    /*Turn on green light*/
    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ac:	480f      	ldr	r0, [pc, #60]	; (80006ec <prvLightSet2+0x98>)
 80006ae:	f000 fbd7 	bl	8000e60 <HAL_GPIO_WritePin>
    /*Turn on yellow light*/
    HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b8:	480b      	ldr	r0, [pc, #44]	; (80006e8 <prvLightSet2+0x94>)
 80006ba:	f000 fbd1 	bl	8000e60 <HAL_GPIO_WritePin>

    xSemaphoreTake(SemaLightSet2Handle, portMAX_DELAY);
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <prvLightSet2+0x90>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f04f 31ff 	mov.w	r1, #4294967295
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 fbe4 	bl	8002e94 <xQueueSemaphoreTake>
    /*Turn off yellow light*/
    HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <prvLightSet2+0x94>)
 80006d4:	f000 fbc4 	bl	8000e60 <HAL_GPIO_WritePin>
    /*Turn on red light*/
    HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	2120      	movs	r1, #32
 80006dc:	4802      	ldr	r0, [pc, #8]	; (80006e8 <prvLightSet2+0x94>)
 80006de:	f000 fbbf 	bl	8000e60 <HAL_GPIO_WritePin>
	xSemaphoreTake(SemaLightSet2Handle, portMAX_DELAY);
 80006e2:	e7bb      	b.n	800065c <prvLightSet2+0x8>
 80006e4:	20000594 	.word	0x20000594
 80006e8:	40020c00 	.word	0x40020c00
 80006ec:	40020000 	.word	0x40020000

080006f0 <InitTrafficLeds>:
* @param argument: Not used
* @retval None
*/

void InitTrafficLeds(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08c      	sub	sp, #48	; 0x30
 80006f4:	af00      	add	r7, sp, #0
	 __HAL_RCC_GPIOD_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <InitTrafficLeds+0x74>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a19      	ldr	r2, [pc, #100]	; (8000764 <InitTrafficLeds+0x74>)
 8000700:	f043 0308 	orr.w	r3, r3, #8
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b17      	ldr	r3, [pc, #92]	; (8000764 <InitTrafficLeds+0x74>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0308 	and.w	r3, r3, #8
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <InitTrafficLeds+0x74>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a12      	ldr	r2, [pc, #72]	; (8000764 <InitTrafficLeds+0x74>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <InitTrafficLeds+0x74>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef BoardLEDs, USB_RED_LED;

	BoardLEDs.Mode = GPIO_MODE_OUTPUT_PP;
 800072e:	2301      	movs	r3, #1
 8000730:	623b      	str	r3, [r7, #32]
	USB_RED_LED.Mode = GPIO_MODE_OUTPUT_PP;
 8000732:	2301      	movs	r3, #1
 8000734:	60fb      	str	r3, [r7, #12]

	BoardLEDs.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5;
 8000736:	f24f 0320 	movw	r3, #61472	; 0xf020
 800073a:	61fb      	str	r3, [r7, #28]
	USB_RED_LED.Pin = GPIO_PIN_9;
 800073c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000740:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOD, &BoardLEDs);
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	4619      	mov	r1, r3
 8000748:	4807      	ldr	r0, [pc, #28]	; (8000768 <InitTrafficLeds+0x78>)
 800074a:	f000 fa05 	bl	8000b58 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOA, &USB_RED_LED);
 800074e:	f107 0308 	add.w	r3, r7, #8
 8000752:	4619      	mov	r1, r3
 8000754:	4805      	ldr	r0, [pc, #20]	; (800076c <InitTrafficLeds+0x7c>)
 8000756:	f000 f9ff 	bl	8000b58 <HAL_GPIO_Init>
}
 800075a:	bf00      	nop
 800075c:	3730      	adds	r7, #48	; 0x30
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40020c00 	.word	0x40020c00
 800076c:	40020000 	.word	0x40020000

08000770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000774:	b672      	cpsid	i
}
 8000776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000778:	e7fe      	b.n	8000778 <Error_Handler+0x8>
	...

0800077c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <HAL_MspInit+0x54>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078a:	4a11      	ldr	r2, [pc, #68]	; (80007d0 <HAL_MspInit+0x54>)
 800078c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000790:	6453      	str	r3, [r2, #68]	; 0x44
 8000792:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <HAL_MspInit+0x54>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <HAL_MspInit+0x54>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <HAL_MspInit+0x54>)
 80007a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ac:	6413      	str	r3, [r2, #64]	; 0x40
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <HAL_MspInit+0x54>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	210f      	movs	r1, #15
 80007be:	f06f 0001 	mvn.w	r0, #1
 80007c2:	f000 f9a0 	bl	8000b06 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800

080007d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <NMI_Handler+0x4>

080007da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007de:	e7fe      	b.n	80007de <HardFault_Handler+0x4>

080007e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <MemManage_Handler+0x4>

080007e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ea:	e7fe      	b.n	80007ea <BusFault_Handler+0x4>

080007ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <UsageFault_Handler+0x4>

080007f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000804:	f000 f8a2 	bl	800094c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000808:	f003 fb18 	bl	8003e3c <xTaskGetSchedulerState>
 800080c:	4603      	mov	r3, r0
 800080e:	2b01      	cmp	r3, #1
 8000810:	d001      	beq.n	8000816 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000812:	f003 fef1 	bl	80045f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000820:	4802      	ldr	r0, [pc, #8]	; (800082c <OTG_FS_IRQHandler+0x10>)
 8000822:	f000 fb36 	bl	8000e92 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000280 	.word	0x20000280

08000830 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <SystemInit+0x20>)
 8000836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800083a:	4a05      	ldr	r2, [pc, #20]	; (8000850 <SystemInit+0x20>)
 800083c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000840:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000854:	f8df d034 	ldr.w	sp, [pc, #52]	; 800088c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000858:	480d      	ldr	r0, [pc, #52]	; (8000890 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800085a:	490e      	ldr	r1, [pc, #56]	; (8000894 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800085c:	4a0e      	ldr	r2, [pc, #56]	; (8000898 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800085e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000860:	e002      	b.n	8000868 <LoopCopyDataInit>

08000862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000866:	3304      	adds	r3, #4

08000868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800086a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800086c:	d3f9      	bcc.n	8000862 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800086e:	4a0b      	ldr	r2, [pc, #44]	; (800089c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000870:	4c0b      	ldr	r4, [pc, #44]	; (80008a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000874:	e001      	b.n	800087a <LoopFillZerobss>

08000876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000878:	3204      	adds	r2, #4

0800087a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800087a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800087c:	d3fb      	bcc.n	8000876 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800087e:	f7ff ffd7 	bl	8000830 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000882:	f004 f8f3 	bl	8004a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000886:	f7ff fcc5 	bl	8000214 <main>
  bx  lr    
 800088a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800088c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000894:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000898:	08004b74 	.word	0x08004b74
  ldr r2, =_sbss
 800089c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008a0:	200042f0 	.word	0x200042f0

080008a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008a4:	e7fe      	b.n	80008a4 <ADC_IRQHandler>
	...

080008a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008ac:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <HAL_Init+0x40>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a0d      	ldr	r2, [pc, #52]	; (80008e8 <HAL_Init+0x40>)
 80008b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008b8:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <HAL_Init+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <HAL_Init+0x40>)
 80008be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008c4:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <HAL_Init+0x40>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a07      	ldr	r2, [pc, #28]	; (80008e8 <HAL_Init+0x40>)
 80008ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d0:	2003      	movs	r0, #3
 80008d2:	f000 f90d 	bl	8000af0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008d6:	200f      	movs	r0, #15
 80008d8:	f000 f808 	bl	80008ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008dc:	f7ff ff4e 	bl	800077c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023c00 	.word	0x40023c00

080008ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <HAL_InitTick+0x54>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <HAL_InitTick+0x58>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	4619      	mov	r1, r3
 80008fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000902:	fbb3 f3f1 	udiv	r3, r3, r1
 8000906:	fbb2 f3f3 	udiv	r3, r2, r3
 800090a:	4618      	mov	r0, r3
 800090c:	f000 f917 	bl	8000b3e <HAL_SYSTICK_Config>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
 8000918:	e00e      	b.n	8000938 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2b0f      	cmp	r3, #15
 800091e:	d80a      	bhi.n	8000936 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000920:	2200      	movs	r2, #0
 8000922:	6879      	ldr	r1, [r7, #4]
 8000924:	f04f 30ff 	mov.w	r0, #4294967295
 8000928:	f000 f8ed 	bl	8000b06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800092c:	4a06      	ldr	r2, [pc, #24]	; (8000948 <HAL_InitTick+0x5c>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000932:	2300      	movs	r3, #0
 8000934:	e000      	b.n	8000938 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000936:	2301      	movs	r3, #1
}
 8000938:	4618      	mov	r0, r3
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000000 	.word	0x20000000
 8000944:	20000008 	.word	0x20000008
 8000948:	20000004 	.word	0x20000004

0800094c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <HAL_IncTick+0x20>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	461a      	mov	r2, r3
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <HAL_IncTick+0x24>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4413      	add	r3, r2
 800095c:	4a04      	ldr	r2, [pc, #16]	; (8000970 <HAL_IncTick+0x24>)
 800095e:	6013      	str	r3, [r2, #0]
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	20000008 	.word	0x20000008
 8000970:	20000598 	.word	0x20000598

08000974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  return uwTick;
 8000978:	4b03      	ldr	r3, [pc, #12]	; (8000988 <HAL_GetTick+0x14>)
 800097a:	681b      	ldr	r3, [r3, #0]
}
 800097c:	4618      	mov	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	20000598 	.word	0x20000598

0800098c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f003 0307 	and.w	r3, r3, #7
 800099a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <__NVIC_SetPriorityGrouping+0x44>)
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009a2:	68ba      	ldr	r2, [r7, #8]
 80009a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009a8:	4013      	ands	r3, r2
 80009aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009be:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <__NVIC_SetPriorityGrouping+0x44>)
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	60d3      	str	r3, [r2, #12]
}
 80009c4:	bf00      	nop
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d8:	4b04      	ldr	r3, [pc, #16]	; (80009ec <__NVIC_GetPriorityGrouping+0x18>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	0a1b      	lsrs	r3, r3, #8
 80009de:	f003 0307 	and.w	r3, r3, #7
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	6039      	str	r1, [r7, #0]
 80009fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	db0a      	blt.n	8000a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	490c      	ldr	r1, [pc, #48]	; (8000a3c <__NVIC_SetPriority+0x4c>)
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	0112      	lsls	r2, r2, #4
 8000a10:	b2d2      	uxtb	r2, r2
 8000a12:	440b      	add	r3, r1
 8000a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a18:	e00a      	b.n	8000a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4908      	ldr	r1, [pc, #32]	; (8000a40 <__NVIC_SetPriority+0x50>)
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	f003 030f 	and.w	r3, r3, #15
 8000a26:	3b04      	subs	r3, #4
 8000a28:	0112      	lsls	r2, r2, #4
 8000a2a:	b2d2      	uxtb	r2, r2
 8000a2c:	440b      	add	r3, r1
 8000a2e:	761a      	strb	r2, [r3, #24]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	e000e100 	.word	0xe000e100
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b089      	sub	sp, #36	; 0x24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a58:	69fb      	ldr	r3, [r7, #28]
 8000a5a:	f1c3 0307 	rsb	r3, r3, #7
 8000a5e:	2b04      	cmp	r3, #4
 8000a60:	bf28      	it	cs
 8000a62:	2304      	movcs	r3, #4
 8000a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3304      	adds	r3, #4
 8000a6a:	2b06      	cmp	r3, #6
 8000a6c:	d902      	bls.n	8000a74 <NVIC_EncodePriority+0x30>
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	3b03      	subs	r3, #3
 8000a72:	e000      	b.n	8000a76 <NVIC_EncodePriority+0x32>
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a78:	f04f 32ff 	mov.w	r2, #4294967295
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	43da      	mvns	r2, r3
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	401a      	ands	r2, r3
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	fa01 f303 	lsl.w	r3, r1, r3
 8000a96:	43d9      	mvns	r1, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	4313      	orrs	r3, r2
         );
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3724      	adds	r7, #36	; 0x24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
	...

08000aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000abc:	d301      	bcc.n	8000ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e00f      	b.n	8000ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <SysTick_Config+0x40>)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aca:	210f      	movs	r1, #15
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad0:	f7ff ff8e 	bl	80009f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad4:	4b05      	ldr	r3, [pc, #20]	; (8000aec <SysTick_Config+0x40>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ada:	4b04      	ldr	r3, [pc, #16]	; (8000aec <SysTick_Config+0x40>)
 8000adc:	2207      	movs	r2, #7
 8000ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	e000e010 	.word	0xe000e010

08000af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f7ff ff47 	bl	800098c <__NVIC_SetPriorityGrouping>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b086      	sub	sp, #24
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
 8000b12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b18:	f7ff ff5c 	bl	80009d4 <__NVIC_GetPriorityGrouping>
 8000b1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	68b9      	ldr	r1, [r7, #8]
 8000b22:	6978      	ldr	r0, [r7, #20]
 8000b24:	f7ff ff8e 	bl	8000a44 <NVIC_EncodePriority>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b2e:	4611      	mov	r1, r2
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff5d 	bl	80009f0 <__NVIC_SetPriority>
}
 8000b36:	bf00      	nop
 8000b38:	3718      	adds	r7, #24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b082      	sub	sp, #8
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff ffb0 	bl	8000aac <SysTick_Config>
 8000b4c:	4603      	mov	r3, r0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b089      	sub	sp, #36	; 0x24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
 8000b72:	e159      	b.n	8000e28 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b74:	2201      	movs	r2, #1
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	697a      	ldr	r2, [r7, #20]
 8000b84:	4013      	ands	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	f040 8148 	bne.w	8000e22 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f003 0303 	and.w	r3, r3, #3
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d005      	beq.n	8000baa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ba6:	2b02      	cmp	r3, #2
 8000ba8:	d130      	bne.n	8000c0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	69ba      	ldr	r2, [r7, #24]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	68da      	ldr	r2, [r3, #12]
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	69ba      	ldr	r2, [r7, #24]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	69ba      	ldr	r2, [r7, #24]
 8000bd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000be0:	2201      	movs	r2, #1
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	69ba      	ldr	r2, [r7, #24]
 8000bec:	4013      	ands	r3, r2
 8000bee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	091b      	lsrs	r3, r3, #4
 8000bf6:	f003 0201 	and.w	r2, r3, #1
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	69ba      	ldr	r2, [r7, #24]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	69ba      	ldr	r2, [r7, #24]
 8000c0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f003 0303 	and.w	r3, r3, #3
 8000c14:	2b03      	cmp	r3, #3
 8000c16:	d017      	beq.n	8000c48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	2203      	movs	r2, #3
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	69ba      	ldr	r2, [r7, #24]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	689a      	ldr	r2, [r3, #8]
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	69ba      	ldr	r2, [r7, #24]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f003 0303 	and.w	r3, r3, #3
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	d123      	bne.n	8000c9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	08da      	lsrs	r2, r3, #3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3208      	adds	r2, #8
 8000c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	f003 0307 	and.w	r3, r3, #7
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	220f      	movs	r2, #15
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	43db      	mvns	r3, r3
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	4013      	ands	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	691a      	ldr	r2, [r3, #16]
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	08da      	lsrs	r2, r3, #3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3208      	adds	r2, #8
 8000c96:	69b9      	ldr	r1, [r7, #24]
 8000c98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	69ba      	ldr	r2, [r7, #24]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f003 0203 	and.w	r2, r3, #3
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	f000 80a2 	beq.w	8000e22 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	4b57      	ldr	r3, [pc, #348]	; (8000e40 <HAL_GPIO_Init+0x2e8>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	4a56      	ldr	r2, [pc, #344]	; (8000e40 <HAL_GPIO_Init+0x2e8>)
 8000ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cec:	6453      	str	r3, [r2, #68]	; 0x44
 8000cee:	4b54      	ldr	r3, [pc, #336]	; (8000e40 <HAL_GPIO_Init+0x2e8>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cfa:	4a52      	ldr	r2, [pc, #328]	; (8000e44 <HAL_GPIO_Init+0x2ec>)
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	089b      	lsrs	r3, r3, #2
 8000d00:	3302      	adds	r3, #2
 8000d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	f003 0303 	and.w	r3, r3, #3
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	220f      	movs	r2, #15
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43db      	mvns	r3, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a49      	ldr	r2, [pc, #292]	; (8000e48 <HAL_GPIO_Init+0x2f0>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d019      	beq.n	8000d5a <HAL_GPIO_Init+0x202>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a48      	ldr	r2, [pc, #288]	; (8000e4c <HAL_GPIO_Init+0x2f4>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d013      	beq.n	8000d56 <HAL_GPIO_Init+0x1fe>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a47      	ldr	r2, [pc, #284]	; (8000e50 <HAL_GPIO_Init+0x2f8>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d00d      	beq.n	8000d52 <HAL_GPIO_Init+0x1fa>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a46      	ldr	r2, [pc, #280]	; (8000e54 <HAL_GPIO_Init+0x2fc>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d007      	beq.n	8000d4e <HAL_GPIO_Init+0x1f6>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a45      	ldr	r2, [pc, #276]	; (8000e58 <HAL_GPIO_Init+0x300>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d101      	bne.n	8000d4a <HAL_GPIO_Init+0x1f2>
 8000d46:	2304      	movs	r3, #4
 8000d48:	e008      	b.n	8000d5c <HAL_GPIO_Init+0x204>
 8000d4a:	2307      	movs	r3, #7
 8000d4c:	e006      	b.n	8000d5c <HAL_GPIO_Init+0x204>
 8000d4e:	2303      	movs	r3, #3
 8000d50:	e004      	b.n	8000d5c <HAL_GPIO_Init+0x204>
 8000d52:	2302      	movs	r3, #2
 8000d54:	e002      	b.n	8000d5c <HAL_GPIO_Init+0x204>
 8000d56:	2301      	movs	r3, #1
 8000d58:	e000      	b.n	8000d5c <HAL_GPIO_Init+0x204>
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	69fa      	ldr	r2, [r7, #28]
 8000d5e:	f002 0203 	and.w	r2, r2, #3
 8000d62:	0092      	lsls	r2, r2, #2
 8000d64:	4093      	lsls	r3, r2
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d6c:	4935      	ldr	r1, [pc, #212]	; (8000e44 <HAL_GPIO_Init+0x2ec>)
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	089b      	lsrs	r3, r3, #2
 8000d72:	3302      	adds	r3, #2
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d7a:	4b38      	ldr	r3, [pc, #224]	; (8000e5c <HAL_GPIO_Init+0x304>)
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	43db      	mvns	r3, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4013      	ands	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d003      	beq.n	8000d9e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d9e:	4a2f      	ldr	r2, [pc, #188]	; (8000e5c <HAL_GPIO_Init+0x304>)
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000da4:	4b2d      	ldr	r3, [pc, #180]	; (8000e5c <HAL_GPIO_Init+0x304>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	43db      	mvns	r3, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4013      	ands	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d003      	beq.n	8000dc8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000dc8:	4a24      	ldr	r2, [pc, #144]	; (8000e5c <HAL_GPIO_Init+0x304>)
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dce:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <HAL_GPIO_Init+0x304>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d003      	beq.n	8000df2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000df2:	4a1a      	ldr	r2, [pc, #104]	; (8000e5c <HAL_GPIO_Init+0x304>)
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000df8:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <HAL_GPIO_Init+0x304>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d003      	beq.n	8000e1c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e1c:	4a0f      	ldr	r2, [pc, #60]	; (8000e5c <HAL_GPIO_Init+0x304>)
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3301      	adds	r3, #1
 8000e26:	61fb      	str	r3, [r7, #28]
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	2b0f      	cmp	r3, #15
 8000e2c:	f67f aea2 	bls.w	8000b74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	3724      	adds	r7, #36	; 0x24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40013800 	.word	0x40013800
 8000e48:	40020000 	.word	0x40020000
 8000e4c:	40020400 	.word	0x40020400
 8000e50:	40020800 	.word	0x40020800
 8000e54:	40020c00 	.word	0x40020c00
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40013c00 	.word	0x40013c00

08000e60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	460b      	mov	r3, r1
 8000e6a:	807b      	strh	r3, [r7, #2]
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e70:	787b      	ldrb	r3, [r7, #1]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e76:	887a      	ldrh	r2, [r7, #2]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e7c:	e003      	b.n	8000e86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e7e:	887b      	ldrh	r3, [r7, #2]
 8000e80:	041a      	lsls	r2, r3, #16
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	619a      	str	r2, [r3, #24]
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f001 fb00 	bl	80024ae <USB_GetMode>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	f040 80f6 	bne.w	80010a2 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f001 fae4 	bl	8002488 <USB_ReadInterrupts>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f000 80ec 	beq.w	80010a0 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f001 fadb 	bl	8002488 <USB_ReadInterrupts>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000edc:	d104      	bne.n	8000ee8 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000ee6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f001 facb 	bl	8002488 <USB_ReadInterrupts>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ef8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000efc:	d104      	bne.n	8000f08 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000f06:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f001 fabb 	bl	8002488 <USB_ReadInterrupts>
 8000f12:	4603      	mov	r3, r0
 8000f14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000f1c:	d104      	bne.n	8000f28 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000f26:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f001 faab 	bl	8002488 <USB_ReadInterrupts>
 8000f32:	4603      	mov	r3, r0
 8000f34:	f003 0302 	and.w	r3, r3, #2
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d103      	bne.n	8000f44 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2202      	movs	r2, #2
 8000f42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f001 fa9d 	bl	8002488 <USB_ReadInterrupts>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f58:	d11c      	bne.n	8000f94 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000f62:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d10f      	bne.n	8000f94 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8000f74:	2110      	movs	r1, #16
 8000f76:	6938      	ldr	r0, [r7, #16]
 8000f78:	f001 f9ca 	bl	8002310 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8000f7c:	6938      	ldr	r0, [r7, #16]
 8000f7e:	f001 f9fb 	bl	8002378 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2101      	movs	r1, #1
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f001 fa9e 	bl	80024ca <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f000 f89e 	bl	80010d0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f001 fa75 	bl	8002488 <USB_ReadInterrupts>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000fa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa8:	d102      	bne.n	8000fb0 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f001 f84c 	bl	8002048 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f001 fa67 	bl	8002488 <USB_ReadInterrupts>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	f003 0308 	and.w	r3, r3, #8
 8000fc0:	2b08      	cmp	r3, #8
 8000fc2:	d106      	bne.n	8000fd2 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f000 f86f 	bl	80010a8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2208      	movs	r2, #8
 8000fd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f001 fa56 	bl	8002488 <USB_ReadInterrupts>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	f003 0310 	and.w	r3, r3, #16
 8000fe2:	2b10      	cmp	r3, #16
 8000fe4:	d101      	bne.n	8000fea <HAL_HCD_IRQHandler+0x158>
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e000      	b.n	8000fec <HAL_HCD_IRQHandler+0x15a>
 8000fea:	2300      	movs	r3, #0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d012      	beq.n	8001016 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	699a      	ldr	r2, [r3, #24]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f022 0210 	bic.w	r2, r2, #16
 8000ffe:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 ff4f 	bl	8001ea4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	699a      	ldr	r2, [r3, #24]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f042 0210 	orr.w	r2, r2, #16
 8001014:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f001 fa34 	bl	8002488 <USB_ReadInterrupts>
 8001020:	4603      	mov	r3, r0
 8001022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001026:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800102a:	d13a      	bne.n	80010a2 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f001 fa84 	bl	800253e <USB_HC_ReadInterrupt>
 8001036:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	e025      	b.n	800108a <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	f003 030f 	and.w	r3, r3, #15
 8001044:	68ba      	ldr	r2, [r7, #8]
 8001046:	fa22 f303 	lsr.w	r3, r2, r3
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	2b00      	cmp	r3, #0
 8001050:	d018      	beq.n	8001084 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	015a      	lsls	r2, r3, #5
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	4413      	add	r3, r2
 800105a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001064:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001068:	d106      	bne.n	8001078 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	b2db      	uxtb	r3, r3
 800106e:	4619      	mov	r1, r3
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 f859 	bl	8001128 <HCD_HC_IN_IRQHandler>
 8001076:	e005      	b.n	8001084 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	4619      	mov	r1, r3
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f000 fba7 	bl	80017d2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	3301      	adds	r3, #1
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	429a      	cmp	r2, r3
 8001092:	d3d4      	bcc.n	800103e <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800109c:	615a      	str	r2, [r3, #20]
 800109e:	e000      	b.n	80010a2 <HAL_HCD_IRQHandler+0x210>
      return;
 80010a0:	bf00      	nop
    }
  }
}
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	70fb      	strb	r3, [r7, #3]
 8001118:	4613      	mov	r3, r2
 800111a:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	460b      	mov	r3, r1
 8001132:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800113e:	78fb      	ldrb	r3, [r7, #3]
 8001140:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	015a      	lsls	r2, r3, #5
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	4413      	add	r3, r2
 800114a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	2b04      	cmp	r3, #4
 8001156:	d11a      	bne.n	800118e <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	015a      	lsls	r2, r3, #5
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	4413      	add	r3, r2
 8001160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001164:	461a      	mov	r2, r3
 8001166:	2304      	movs	r3, #4
 8001168:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	212c      	movs	r1, #44	; 0x2c
 8001170:	fb01 f303 	mul.w	r3, r1, r3
 8001174:	4413      	add	r3, r2
 8001176:	3361      	adds	r3, #97	; 0x61
 8001178:	2206      	movs	r2, #6
 800117a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	4611      	mov	r1, r2
 8001186:	4618      	mov	r0, r3
 8001188:	f001 f9ea 	bl	8002560 <USB_HC_Halt>
 800118c:	e0af      	b.n	80012ee <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	015a      	lsls	r2, r3, #5
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	4413      	add	r3, r2
 8001196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011a4:	d11b      	bne.n	80011de <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	015a      	lsls	r2, r3, #5
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	4413      	add	r3, r2
 80011ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011b2:	461a      	mov	r2, r3
 80011b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	212c      	movs	r1, #44	; 0x2c
 80011c0:	fb01 f303 	mul.w	r3, r1, r3
 80011c4:	4413      	add	r3, r2
 80011c6:	3361      	adds	r3, #97	; 0x61
 80011c8:	2207      	movs	r2, #7
 80011ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	68fa      	ldr	r2, [r7, #12]
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	4611      	mov	r1, r2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f001 f9c2 	bl	8002560 <USB_HC_Halt>
 80011dc:	e087      	b.n	80012ee <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	015a      	lsls	r2, r3, #5
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	4413      	add	r3, r2
 80011e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f003 0320 	and.w	r3, r3, #32
 80011f0:	2b20      	cmp	r3, #32
 80011f2:	d109      	bne.n	8001208 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	015a      	lsls	r2, r3, #5
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	4413      	add	r3, r2
 80011fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001200:	461a      	mov	r2, r3
 8001202:	2320      	movs	r3, #32
 8001204:	6093      	str	r3, [r2, #8]
 8001206:	e072      	b.n	80012ee <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	015a      	lsls	r2, r3, #5
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	4413      	add	r3, r2
 8001210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 0308 	and.w	r3, r3, #8
 800121a:	2b08      	cmp	r3, #8
 800121c:	d11a      	bne.n	8001254 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	015a      	lsls	r2, r3, #5
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	4413      	add	r3, r2
 8001226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800122a:	461a      	mov	r2, r3
 800122c:	2308      	movs	r3, #8
 800122e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	212c      	movs	r1, #44	; 0x2c
 8001236:	fb01 f303 	mul.w	r3, r1, r3
 800123a:	4413      	add	r3, r2
 800123c:	3361      	adds	r3, #97	; 0x61
 800123e:	2205      	movs	r2, #5
 8001240:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	4611      	mov	r1, r2
 800124c:	4618      	mov	r0, r3
 800124e:	f001 f987 	bl	8002560 <USB_HC_Halt>
 8001252:	e04c      	b.n	80012ee <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	015a      	lsls	r2, r3, #5
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4413      	add	r3, r2
 800125c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800126a:	d11b      	bne.n	80012a4 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	015a      	lsls	r2, r3, #5
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4413      	add	r3, r2
 8001274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001278:	461a      	mov	r2, r3
 800127a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800127e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	212c      	movs	r1, #44	; 0x2c
 8001286:	fb01 f303 	mul.w	r3, r1, r3
 800128a:	4413      	add	r3, r2
 800128c:	3361      	adds	r3, #97	; 0x61
 800128e:	2208      	movs	r2, #8
 8001290:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f001 f95f 	bl	8002560 <USB_HC_Halt>
 80012a2:	e024      	b.n	80012ee <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	015a      	lsls	r2, r3, #5
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	4413      	add	r3, r2
 80012ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b6:	2b80      	cmp	r3, #128	; 0x80
 80012b8:	d119      	bne.n	80012ee <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	015a      	lsls	r2, r3, #5
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	4413      	add	r3, r2
 80012c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012c6:	461a      	mov	r2, r3
 80012c8:	2380      	movs	r3, #128	; 0x80
 80012ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	212c      	movs	r1, #44	; 0x2c
 80012d2:	fb01 f303 	mul.w	r3, r1, r3
 80012d6:	4413      	add	r3, r2
 80012d8:	3361      	adds	r3, #97	; 0x61
 80012da:	2206      	movs	r2, #6
 80012dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	4611      	mov	r1, r2
 80012e8:	4618      	mov	r0, r3
 80012ea:	f001 f939 	bl	8002560 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	015a      	lsls	r2, r3, #5
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	4413      	add	r3, r2
 80012f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001304:	d112      	bne.n	800132c <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	4611      	mov	r1, r2
 8001310:	4618      	mov	r0, r3
 8001312:	f001 f925 	bl	8002560 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	015a      	lsls	r2, r3, #5
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	4413      	add	r3, r2
 800131e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001322:	461a      	mov	r2, r3
 8001324:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001328:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800132a:	e24e      	b.n	80017ca <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	015a      	lsls	r2, r3, #5
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	4413      	add	r3, r2
 8001334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b01      	cmp	r3, #1
 8001340:	f040 80df 	bne.w	8001502 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d019      	beq.n	8001380 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	212c      	movs	r1, #44	; 0x2c
 8001352:	fb01 f303 	mul.w	r3, r1, r3
 8001356:	4413      	add	r3, r2
 8001358:	3348      	adds	r3, #72	; 0x48
 800135a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	0159      	lsls	r1, r3, #5
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	440b      	add	r3, r1
 8001364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800136e:	1ad2      	subs	r2, r2, r3
 8001370:	6879      	ldr	r1, [r7, #4]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	202c      	movs	r0, #44	; 0x2c
 8001376:	fb00 f303 	mul.w	r3, r0, r3
 800137a:	440b      	add	r3, r1
 800137c:	3350      	adds	r3, #80	; 0x50
 800137e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	212c      	movs	r1, #44	; 0x2c
 8001386:	fb01 f303 	mul.w	r3, r1, r3
 800138a:	4413      	add	r3, r2
 800138c:	3361      	adds	r3, #97	; 0x61
 800138e:	2201      	movs	r2, #1
 8001390:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	212c      	movs	r1, #44	; 0x2c
 8001398:	fb01 f303 	mul.w	r3, r1, r3
 800139c:	4413      	add	r3, r2
 800139e:	335c      	adds	r3, #92	; 0x5c
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	015a      	lsls	r2, r3, #5
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4413      	add	r3, r2
 80013ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013b0:	461a      	mov	r2, r3
 80013b2:	2301      	movs	r3, #1
 80013b4:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	212c      	movs	r1, #44	; 0x2c
 80013bc:	fb01 f303 	mul.w	r3, r1, r3
 80013c0:	4413      	add	r3, r2
 80013c2:	333f      	adds	r3, #63	; 0x3f
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d009      	beq.n	80013de <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	212c      	movs	r1, #44	; 0x2c
 80013d0:	fb01 f303 	mul.w	r3, r1, r3
 80013d4:	4413      	add	r3, r2
 80013d6:	333f      	adds	r3, #63	; 0x3f
 80013d8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d111      	bne.n	8001402 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	4611      	mov	r1, r2
 80013e8:	4618      	mov	r0, r3
 80013ea:	f001 f8b9 	bl	8002560 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	015a      	lsls	r2, r3, #5
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	4413      	add	r3, r2
 80013f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013fa:	461a      	mov	r2, r3
 80013fc:	2310      	movs	r3, #16
 80013fe:	6093      	str	r3, [r2, #8]
 8001400:	e03a      	b.n	8001478 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	212c      	movs	r1, #44	; 0x2c
 8001408:	fb01 f303 	mul.w	r3, r1, r3
 800140c:	4413      	add	r3, r2
 800140e:	333f      	adds	r3, #63	; 0x3f
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b03      	cmp	r3, #3
 8001414:	d009      	beq.n	800142a <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	212c      	movs	r1, #44	; 0x2c
 800141c:	fb01 f303 	mul.w	r3, r1, r3
 8001420:	4413      	add	r3, r2
 8001422:	333f      	adds	r3, #63	; 0x3f
 8001424:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001426:	2b01      	cmp	r3, #1
 8001428:	d126      	bne.n	8001478 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	015a      	lsls	r2, r3, #5
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4413      	add	r3, r2
 8001432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	0151      	lsls	r1, r2, #5
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	440a      	add	r2, r1
 8001440:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001444:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001448:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	212c      	movs	r1, #44	; 0x2c
 8001450:	fb01 f303 	mul.w	r3, r1, r3
 8001454:	4413      	add	r3, r2
 8001456:	3360      	adds	r3, #96	; 0x60
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	b2d9      	uxtb	r1, r3
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	202c      	movs	r0, #44	; 0x2c
 8001466:	fb00 f303 	mul.w	r3, r0, r3
 800146a:	4413      	add	r3, r2
 800146c:	3360      	adds	r3, #96	; 0x60
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff fe4a 	bl	800110c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d12b      	bne.n	80014d8 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	212c      	movs	r1, #44	; 0x2c
 8001486:	fb01 f303 	mul.w	r3, r1, r3
 800148a:	4413      	add	r3, r2
 800148c:	3348      	adds	r3, #72	; 0x48
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	202c      	movs	r0, #44	; 0x2c
 8001496:	fb00 f202 	mul.w	r2, r0, r2
 800149a:	440a      	add	r2, r1
 800149c:	3240      	adds	r2, #64	; 0x40
 800149e:	8812      	ldrh	r2, [r2, #0]
 80014a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 818e 	beq.w	80017ca <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	212c      	movs	r1, #44	; 0x2c
 80014b4:	fb01 f303 	mul.w	r3, r1, r3
 80014b8:	4413      	add	r3, r2
 80014ba:	3354      	adds	r3, #84	; 0x54
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	f083 0301 	eor.w	r3, r3, #1
 80014c2:	b2d8      	uxtb	r0, r3
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	212c      	movs	r1, #44	; 0x2c
 80014ca:	fb01 f303 	mul.w	r3, r1, r3
 80014ce:	4413      	add	r3, r2
 80014d0:	3354      	adds	r3, #84	; 0x54
 80014d2:	4602      	mov	r2, r0
 80014d4:	701a      	strb	r2, [r3, #0]
}
 80014d6:	e178      	b.n	80017ca <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	212c      	movs	r1, #44	; 0x2c
 80014de:	fb01 f303 	mul.w	r3, r1, r3
 80014e2:	4413      	add	r3, r2
 80014e4:	3354      	adds	r3, #84	; 0x54
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	f083 0301 	eor.w	r3, r3, #1
 80014ec:	b2d8      	uxtb	r0, r3
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	212c      	movs	r1, #44	; 0x2c
 80014f4:	fb01 f303 	mul.w	r3, r1, r3
 80014f8:	4413      	add	r3, r2
 80014fa:	3354      	adds	r3, #84	; 0x54
 80014fc:	4602      	mov	r2, r0
 80014fe:	701a      	strb	r2, [r3, #0]
}
 8001500:	e163      	b.n	80017ca <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	015a      	lsls	r2, r3, #5
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	4413      	add	r3, r2
 800150a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b02      	cmp	r3, #2
 8001516:	f040 80f6 	bne.w	8001706 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	212c      	movs	r1, #44	; 0x2c
 8001520:	fb01 f303 	mul.w	r3, r1, r3
 8001524:	4413      	add	r3, r2
 8001526:	3361      	adds	r3, #97	; 0x61
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d109      	bne.n	8001542 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	212c      	movs	r1, #44	; 0x2c
 8001534:	fb01 f303 	mul.w	r3, r1, r3
 8001538:	4413      	add	r3, r2
 800153a:	3360      	adds	r3, #96	; 0x60
 800153c:	2201      	movs	r2, #1
 800153e:	701a      	strb	r2, [r3, #0]
 8001540:	e0c9      	b.n	80016d6 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	212c      	movs	r1, #44	; 0x2c
 8001548:	fb01 f303 	mul.w	r3, r1, r3
 800154c:	4413      	add	r3, r2
 800154e:	3361      	adds	r3, #97	; 0x61
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b05      	cmp	r3, #5
 8001554:	d109      	bne.n	800156a <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	212c      	movs	r1, #44	; 0x2c
 800155c:	fb01 f303 	mul.w	r3, r1, r3
 8001560:	4413      	add	r3, r2
 8001562:	3360      	adds	r3, #96	; 0x60
 8001564:	2205      	movs	r2, #5
 8001566:	701a      	strb	r2, [r3, #0]
 8001568:	e0b5      	b.n	80016d6 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	212c      	movs	r1, #44	; 0x2c
 8001570:	fb01 f303 	mul.w	r3, r1, r3
 8001574:	4413      	add	r3, r2
 8001576:	3361      	adds	r3, #97	; 0x61
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b06      	cmp	r3, #6
 800157c:	d009      	beq.n	8001592 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	212c      	movs	r1, #44	; 0x2c
 8001584:	fb01 f303 	mul.w	r3, r1, r3
 8001588:	4413      	add	r3, r2
 800158a:	3361      	adds	r3, #97	; 0x61
 800158c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800158e:	2b08      	cmp	r3, #8
 8001590:	d150      	bne.n	8001634 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	212c      	movs	r1, #44	; 0x2c
 8001598:	fb01 f303 	mul.w	r3, r1, r3
 800159c:	4413      	add	r3, r2
 800159e:	335c      	adds	r3, #92	; 0x5c
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	1c5a      	adds	r2, r3, #1
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	202c      	movs	r0, #44	; 0x2c
 80015aa:	fb00 f303 	mul.w	r3, r0, r3
 80015ae:	440b      	add	r3, r1
 80015b0:	335c      	adds	r3, #92	; 0x5c
 80015b2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	212c      	movs	r1, #44	; 0x2c
 80015ba:	fb01 f303 	mul.w	r3, r1, r3
 80015be:	4413      	add	r3, r2
 80015c0:	335c      	adds	r3, #92	; 0x5c
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d912      	bls.n	80015ee <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	212c      	movs	r1, #44	; 0x2c
 80015ce:	fb01 f303 	mul.w	r3, r1, r3
 80015d2:	4413      	add	r3, r2
 80015d4:	335c      	adds	r3, #92	; 0x5c
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	212c      	movs	r1, #44	; 0x2c
 80015e0:	fb01 f303 	mul.w	r3, r1, r3
 80015e4:	4413      	add	r3, r2
 80015e6:	3360      	adds	r3, #96	; 0x60
 80015e8:	2204      	movs	r2, #4
 80015ea:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80015ec:	e073      	b.n	80016d6 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	212c      	movs	r1, #44	; 0x2c
 80015f4:	fb01 f303 	mul.w	r3, r1, r3
 80015f8:	4413      	add	r3, r2
 80015fa:	3360      	adds	r3, #96	; 0x60
 80015fc:	2202      	movs	r2, #2
 80015fe:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	015a      	lsls	r2, r3, #5
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	4413      	add	r3, r2
 8001608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001616:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800161e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	015a      	lsls	r2, r3, #5
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4413      	add	r3, r2
 8001628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800162c:	461a      	mov	r2, r3
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001632:	e050      	b.n	80016d6 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	212c      	movs	r1, #44	; 0x2c
 800163a:	fb01 f303 	mul.w	r3, r1, r3
 800163e:	4413      	add	r3, r2
 8001640:	3361      	adds	r3, #97	; 0x61
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b03      	cmp	r3, #3
 8001646:	d122      	bne.n	800168e <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	212c      	movs	r1, #44	; 0x2c
 800164e:	fb01 f303 	mul.w	r3, r1, r3
 8001652:	4413      	add	r3, r2
 8001654:	3360      	adds	r3, #96	; 0x60
 8001656:	2202      	movs	r2, #2
 8001658:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	015a      	lsls	r2, r3, #5
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	4413      	add	r3, r2
 8001662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001670:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001678:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	015a      	lsls	r2, r3, #5
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	4413      	add	r3, r2
 8001682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001686:	461a      	mov	r2, r3
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	e023      	b.n	80016d6 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	212c      	movs	r1, #44	; 0x2c
 8001694:	fb01 f303 	mul.w	r3, r1, r3
 8001698:	4413      	add	r3, r2
 800169a:	3361      	adds	r3, #97	; 0x61
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b07      	cmp	r3, #7
 80016a0:	d119      	bne.n	80016d6 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	212c      	movs	r1, #44	; 0x2c
 80016a8:	fb01 f303 	mul.w	r3, r1, r3
 80016ac:	4413      	add	r3, r2
 80016ae:	335c      	adds	r3, #92	; 0x5c
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	1c5a      	adds	r2, r3, #1
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	202c      	movs	r0, #44	; 0x2c
 80016ba:	fb00 f303 	mul.w	r3, r0, r3
 80016be:	440b      	add	r3, r1
 80016c0:	335c      	adds	r3, #92	; 0x5c
 80016c2:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	212c      	movs	r1, #44	; 0x2c
 80016ca:	fb01 f303 	mul.w	r3, r1, r3
 80016ce:	4413      	add	r3, r2
 80016d0:	3360      	adds	r3, #96	; 0x60
 80016d2:	2204      	movs	r2, #4
 80016d4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	015a      	lsls	r2, r3, #5
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	4413      	add	r3, r2
 80016de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016e2:	461a      	mov	r2, r3
 80016e4:	2302      	movs	r3, #2
 80016e6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	b2d9      	uxtb	r1, r3
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	202c      	movs	r0, #44	; 0x2c
 80016f2:	fb00 f303 	mul.w	r3, r0, r3
 80016f6:	4413      	add	r3, r2
 80016f8:	3360      	adds	r3, #96	; 0x60
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	461a      	mov	r2, r3
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff fd04 	bl	800110c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001704:	e061      	b.n	80017ca <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	015a      	lsls	r2, r3, #5
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	4413      	add	r3, r2
 800170e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 0310 	and.w	r3, r3, #16
 8001718:	2b10      	cmp	r3, #16
 800171a:	d156      	bne.n	80017ca <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	212c      	movs	r1, #44	; 0x2c
 8001722:	fb01 f303 	mul.w	r3, r1, r3
 8001726:	4413      	add	r3, r2
 8001728:	333f      	adds	r3, #63	; 0x3f
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b03      	cmp	r3, #3
 800172e:	d111      	bne.n	8001754 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	212c      	movs	r1, #44	; 0x2c
 8001736:	fb01 f303 	mul.w	r3, r1, r3
 800173a:	4413      	add	r3, r2
 800173c:	335c      	adds	r3, #92	; 0x5c
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	4611      	mov	r1, r2
 800174c:	4618      	mov	r0, r3
 800174e:	f000 ff07 	bl	8002560 <USB_HC_Halt>
 8001752:	e031      	b.n	80017b8 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	212c      	movs	r1, #44	; 0x2c
 800175a:	fb01 f303 	mul.w	r3, r1, r3
 800175e:	4413      	add	r3, r2
 8001760:	333f      	adds	r3, #63	; 0x3f
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d009      	beq.n	800177c <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	212c      	movs	r1, #44	; 0x2c
 800176e:	fb01 f303 	mul.w	r3, r1, r3
 8001772:	4413      	add	r3, r2
 8001774:	333f      	adds	r3, #63	; 0x3f
 8001776:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001778:	2b02      	cmp	r3, #2
 800177a:	d11d      	bne.n	80017b8 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	212c      	movs	r1, #44	; 0x2c
 8001782:	fb01 f303 	mul.w	r3, r1, r3
 8001786:	4413      	add	r3, r2
 8001788:	335c      	adds	r3, #92	; 0x5c
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d110      	bne.n	80017b8 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	212c      	movs	r1, #44	; 0x2c
 800179c:	fb01 f303 	mul.w	r3, r1, r3
 80017a0:	4413      	add	r3, r2
 80017a2:	3361      	adds	r3, #97	; 0x61
 80017a4:	2203      	movs	r2, #3
 80017a6:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	4611      	mov	r1, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 fed4 	bl	8002560 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	015a      	lsls	r2, r3, #5
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	4413      	add	r3, r2
 80017c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017c4:	461a      	mov	r2, r3
 80017c6:	2310      	movs	r3, #16
 80017c8:	6093      	str	r3, [r2, #8]
}
 80017ca:	bf00      	nop
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b088      	sub	sp, #32
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	460b      	mov	r3, r1
 80017dc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80017e8:	78fb      	ldrb	r3, [r7, #3]
 80017ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	015a      	lsls	r2, r3, #5
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	4413      	add	r3, r2
 80017f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	2b04      	cmp	r3, #4
 8001800:	d11a      	bne.n	8001838 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	015a      	lsls	r2, r3, #5
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	4413      	add	r3, r2
 800180a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800180e:	461a      	mov	r2, r3
 8001810:	2304      	movs	r3, #4
 8001812:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	212c      	movs	r1, #44	; 0x2c
 800181a:	fb01 f303 	mul.w	r3, r1, r3
 800181e:	4413      	add	r3, r2
 8001820:	3361      	adds	r3, #97	; 0x61
 8001822:	2206      	movs	r2, #6
 8001824:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	4611      	mov	r1, r2
 8001830:	4618      	mov	r0, r3
 8001832:	f000 fe95 	bl	8002560 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8001836:	e331      	b.n	8001e9c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	015a      	lsls	r2, r3, #5
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	4413      	add	r3, r2
 8001840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 0320 	and.w	r3, r3, #32
 800184a:	2b20      	cmp	r3, #32
 800184c:	d12e      	bne.n	80018ac <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	015a      	lsls	r2, r3, #5
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	4413      	add	r3, r2
 8001856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800185a:	461a      	mov	r2, r3
 800185c:	2320      	movs	r3, #32
 800185e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	212c      	movs	r1, #44	; 0x2c
 8001866:	fb01 f303 	mul.w	r3, r1, r3
 800186a:	4413      	add	r3, r2
 800186c:	333d      	adds	r3, #61	; 0x3d
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b01      	cmp	r3, #1
 8001872:	f040 8313 	bne.w	8001e9c <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	212c      	movs	r1, #44	; 0x2c
 800187c:	fb01 f303 	mul.w	r3, r1, r3
 8001880:	4413      	add	r3, r2
 8001882:	333d      	adds	r3, #61	; 0x3d
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	212c      	movs	r1, #44	; 0x2c
 800188e:	fb01 f303 	mul.w	r3, r1, r3
 8001892:	4413      	add	r3, r2
 8001894:	3360      	adds	r3, #96	; 0x60
 8001896:	2202      	movs	r2, #2
 8001898:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	b2d2      	uxtb	r2, r2
 80018a2:	4611      	mov	r1, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f000 fe5b 	bl	8002560 <USB_HC_Halt>
}
 80018aa:	e2f7      	b.n	8001e9c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	015a      	lsls	r2, r3, #5
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	4413      	add	r3, r2
 80018b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018c2:	d112      	bne.n	80018ea <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	015a      	lsls	r2, r3, #5
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	4413      	add	r3, r2
 80018cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018d0:	461a      	mov	r2, r3
 80018d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018d6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	4611      	mov	r1, r2
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 fe3c 	bl	8002560 <USB_HC_Halt>
}
 80018e8:	e2d8      	b.n	8001e9c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	015a      	lsls	r2, r3, #5
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	4413      	add	r3, r2
 80018f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d140      	bne.n	8001982 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	212c      	movs	r1, #44	; 0x2c
 8001906:	fb01 f303 	mul.w	r3, r1, r3
 800190a:	4413      	add	r3, r2
 800190c:	335c      	adds	r3, #92	; 0x5c
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	015a      	lsls	r2, r3, #5
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	4413      	add	r3, r2
 800191a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001924:	2b40      	cmp	r3, #64	; 0x40
 8001926:	d111      	bne.n	800194c <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	212c      	movs	r1, #44	; 0x2c
 800192e:	fb01 f303 	mul.w	r3, r1, r3
 8001932:	4413      	add	r3, r2
 8001934:	333d      	adds	r3, #61	; 0x3d
 8001936:	2201      	movs	r2, #1
 8001938:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	015a      	lsls	r2, r3, #5
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	4413      	add	r3, r2
 8001942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001946:	461a      	mov	r2, r3
 8001948:	2340      	movs	r3, #64	; 0x40
 800194a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	015a      	lsls	r2, r3, #5
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	4413      	add	r3, r2
 8001954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001958:	461a      	mov	r2, r3
 800195a:	2301      	movs	r3, #1
 800195c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	212c      	movs	r1, #44	; 0x2c
 8001964:	fb01 f303 	mul.w	r3, r1, r3
 8001968:	4413      	add	r3, r2
 800196a:	3361      	adds	r3, #97	; 0x61
 800196c:	2201      	movs	r2, #1
 800196e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	697a      	ldr	r2, [r7, #20]
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	4611      	mov	r1, r2
 800197a:	4618      	mov	r0, r3
 800197c:	f000 fdf0 	bl	8002560 <USB_HC_Halt>
}
 8001980:	e28c      	b.n	8001e9c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	015a      	lsls	r2, r3, #5
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	4413      	add	r3, r2
 800198a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001994:	2b40      	cmp	r3, #64	; 0x40
 8001996:	d12c      	bne.n	80019f2 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	212c      	movs	r1, #44	; 0x2c
 800199e:	fb01 f303 	mul.w	r3, r1, r3
 80019a2:	4413      	add	r3, r2
 80019a4:	3361      	adds	r3, #97	; 0x61
 80019a6:	2204      	movs	r2, #4
 80019a8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	212c      	movs	r1, #44	; 0x2c
 80019b0:	fb01 f303 	mul.w	r3, r1, r3
 80019b4:	4413      	add	r3, r2
 80019b6:	333d      	adds	r3, #61	; 0x3d
 80019b8:	2201      	movs	r2, #1
 80019ba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	212c      	movs	r1, #44	; 0x2c
 80019c2:	fb01 f303 	mul.w	r3, r1, r3
 80019c6:	4413      	add	r3, r2
 80019c8:	335c      	adds	r3, #92	; 0x5c
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	4611      	mov	r1, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f000 fdc1 	bl	8002560 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	015a      	lsls	r2, r3, #5
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	4413      	add	r3, r2
 80019e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ea:	461a      	mov	r2, r3
 80019ec:	2340      	movs	r3, #64	; 0x40
 80019ee:	6093      	str	r3, [r2, #8]
}
 80019f0:	e254      	b.n	8001e9c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	015a      	lsls	r2, r3, #5
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	4413      	add	r3, r2
 80019fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 0308 	and.w	r3, r3, #8
 8001a04:	2b08      	cmp	r3, #8
 8001a06:	d11a      	bne.n	8001a3e <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	015a      	lsls	r2, r3, #5
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	4413      	add	r3, r2
 8001a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a14:	461a      	mov	r2, r3
 8001a16:	2308      	movs	r3, #8
 8001a18:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	212c      	movs	r1, #44	; 0x2c
 8001a20:	fb01 f303 	mul.w	r3, r1, r3
 8001a24:	4413      	add	r3, r2
 8001a26:	3361      	adds	r3, #97	; 0x61
 8001a28:	2205      	movs	r2, #5
 8001a2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	4611      	mov	r1, r2
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 fd92 	bl	8002560 <USB_HC_Halt>
}
 8001a3c:	e22e      	b.n	8001e9c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	015a      	lsls	r2, r3, #5
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	4413      	add	r3, r2
 8001a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 0310 	and.w	r3, r3, #16
 8001a50:	2b10      	cmp	r3, #16
 8001a52:	d140      	bne.n	8001ad6 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	212c      	movs	r1, #44	; 0x2c
 8001a5a:	fb01 f303 	mul.w	r3, r1, r3
 8001a5e:	4413      	add	r3, r2
 8001a60:	335c      	adds	r3, #92	; 0x5c
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	212c      	movs	r1, #44	; 0x2c
 8001a6c:	fb01 f303 	mul.w	r3, r1, r3
 8001a70:	4413      	add	r3, r2
 8001a72:	3361      	adds	r3, #97	; 0x61
 8001a74:	2203      	movs	r2, #3
 8001a76:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	212c      	movs	r1, #44	; 0x2c
 8001a7e:	fb01 f303 	mul.w	r3, r1, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	333d      	adds	r3, #61	; 0x3d
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d112      	bne.n	8001ab2 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	212c      	movs	r1, #44	; 0x2c
 8001a92:	fb01 f303 	mul.w	r3, r1, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	333c      	adds	r3, #60	; 0x3c
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d108      	bne.n	8001ab2 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	212c      	movs	r1, #44	; 0x2c
 8001aa6:	fb01 f303 	mul.w	r3, r1, r3
 8001aaa:	4413      	add	r3, r2
 8001aac:	333d      	adds	r3, #61	; 0x3d
 8001aae:	2201      	movs	r2, #1
 8001ab0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	4611      	mov	r1, r2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f000 fd4f 	bl	8002560 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	015a      	lsls	r2, r3, #5
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	4413      	add	r3, r2
 8001aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ace:	461a      	mov	r2, r3
 8001ad0:	2310      	movs	r3, #16
 8001ad2:	6093      	str	r3, [r2, #8]
}
 8001ad4:	e1e2      	b.n	8001e9c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	015a      	lsls	r2, r3, #5
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	4413      	add	r3, r2
 8001ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae8:	2b80      	cmp	r3, #128	; 0x80
 8001aea:	d164      	bne.n	8001bb6 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d111      	bne.n	8001b18 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	212c      	movs	r1, #44	; 0x2c
 8001afa:	fb01 f303 	mul.w	r3, r1, r3
 8001afe:	4413      	add	r3, r2
 8001b00:	3361      	adds	r3, #97	; 0x61
 8001b02:	2206      	movs	r2, #6
 8001b04:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	4611      	mov	r1, r2
 8001b10:	4618      	mov	r0, r3
 8001b12:	f000 fd25 	bl	8002560 <USB_HC_Halt>
 8001b16:	e044      	b.n	8001ba2 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	212c      	movs	r1, #44	; 0x2c
 8001b1e:	fb01 f303 	mul.w	r3, r1, r3
 8001b22:	4413      	add	r3, r2
 8001b24:	335c      	adds	r3, #92	; 0x5c
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	202c      	movs	r0, #44	; 0x2c
 8001b30:	fb00 f303 	mul.w	r3, r0, r3
 8001b34:	440b      	add	r3, r1
 8001b36:	335c      	adds	r3, #92	; 0x5c
 8001b38:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	212c      	movs	r1, #44	; 0x2c
 8001b40:	fb01 f303 	mul.w	r3, r1, r3
 8001b44:	4413      	add	r3, r2
 8001b46:	335c      	adds	r3, #92	; 0x5c
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d920      	bls.n	8001b90 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	212c      	movs	r1, #44	; 0x2c
 8001b54:	fb01 f303 	mul.w	r3, r1, r3
 8001b58:	4413      	add	r3, r2
 8001b5a:	335c      	adds	r3, #92	; 0x5c
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	212c      	movs	r1, #44	; 0x2c
 8001b66:	fb01 f303 	mul.w	r3, r1, r3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3360      	adds	r3, #96	; 0x60
 8001b6e:	2204      	movs	r2, #4
 8001b70:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	b2d9      	uxtb	r1, r3
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	202c      	movs	r0, #44	; 0x2c
 8001b7c:	fb00 f303 	mul.w	r3, r0, r3
 8001b80:	4413      	add	r3, r2
 8001b82:	3360      	adds	r3, #96	; 0x60
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff fabf 	bl	800110c <HAL_HCD_HC_NotifyURBChange_Callback>
 8001b8e:	e008      	b.n	8001ba2 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	212c      	movs	r1, #44	; 0x2c
 8001b96:	fb01 f303 	mul.w	r3, r1, r3
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3360      	adds	r3, #96	; 0x60
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	015a      	lsls	r2, r3, #5
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	4413      	add	r3, r2
 8001baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bae:	461a      	mov	r2, r3
 8001bb0:	2380      	movs	r3, #128	; 0x80
 8001bb2:	6093      	str	r3, [r2, #8]
}
 8001bb4:	e172      	b.n	8001e9c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	015a      	lsls	r2, r3, #5
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bcc:	d11b      	bne.n	8001c06 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	212c      	movs	r1, #44	; 0x2c
 8001bd4:	fb01 f303 	mul.w	r3, r1, r3
 8001bd8:	4413      	add	r3, r2
 8001bda:	3361      	adds	r3, #97	; 0x61
 8001bdc:	2208      	movs	r2, #8
 8001bde:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	4611      	mov	r1, r2
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 fcb8 	bl	8002560 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	015a      	lsls	r2, r3, #5
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c02:	6093      	str	r3, [r2, #8]
}
 8001c04:	e14a      	b.n	8001e9c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	015a      	lsls	r2, r3, #5
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	f040 813f 	bne.w	8001e9c <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	212c      	movs	r1, #44	; 0x2c
 8001c24:	fb01 f303 	mul.w	r3, r1, r3
 8001c28:	4413      	add	r3, r2
 8001c2a:	3361      	adds	r3, #97	; 0x61
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d17d      	bne.n	8001d2e <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	212c      	movs	r1, #44	; 0x2c
 8001c38:	fb01 f303 	mul.w	r3, r1, r3
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3360      	adds	r3, #96	; 0x60
 8001c40:	2201      	movs	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	212c      	movs	r1, #44	; 0x2c
 8001c4a:	fb01 f303 	mul.w	r3, r1, r3
 8001c4e:	4413      	add	r3, r2
 8001c50:	333f      	adds	r3, #63	; 0x3f
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d00a      	beq.n	8001c6e <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	212c      	movs	r1, #44	; 0x2c
 8001c5e:	fb01 f303 	mul.w	r3, r1, r3
 8001c62:	4413      	add	r3, r2
 8001c64:	333f      	adds	r3, #63	; 0x3f
 8001c66:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	f040 8100 	bne.w	8001e6e <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d113      	bne.n	8001c9e <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	212c      	movs	r1, #44	; 0x2c
 8001c7c:	fb01 f303 	mul.w	r3, r1, r3
 8001c80:	4413      	add	r3, r2
 8001c82:	3355      	adds	r3, #85	; 0x55
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	f083 0301 	eor.w	r3, r3, #1
 8001c8a:	b2d8      	uxtb	r0, r3
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	212c      	movs	r1, #44	; 0x2c
 8001c92:	fb01 f303 	mul.w	r3, r1, r3
 8001c96:	4413      	add	r3, r2
 8001c98:	3355      	adds	r3, #85	; 0x55
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	f040 80e3 	bne.w	8001e6e <HCD_HC_OUT_IRQHandler+0x69c>
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	212c      	movs	r1, #44	; 0x2c
 8001cae:	fb01 f303 	mul.w	r3, r1, r3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	334c      	adds	r3, #76	; 0x4c
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f000 80d8 	beq.w	8001e6e <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	212c      	movs	r1, #44	; 0x2c
 8001cc4:	fb01 f303 	mul.w	r3, r1, r3
 8001cc8:	4413      	add	r3, r2
 8001cca:	334c      	adds	r3, #76	; 0x4c
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	202c      	movs	r0, #44	; 0x2c
 8001cd4:	fb00 f202 	mul.w	r2, r0, r2
 8001cd8:	440a      	add	r2, r1
 8001cda:	3240      	adds	r2, #64	; 0x40
 8001cdc:	8812      	ldrh	r2, [r2, #0]
 8001cde:	4413      	add	r3, r2
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	202c      	movs	r0, #44	; 0x2c
 8001ce8:	fb00 f202 	mul.w	r2, r0, r2
 8001cec:	440a      	add	r2, r1
 8001cee:	3240      	adds	r2, #64	; 0x40
 8001cf0:	8812      	ldrh	r2, [r2, #0]
 8001cf2:	fbb3 f3f2 	udiv	r3, r3, r2
 8001cf6:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 80b5 	beq.w	8001e6e <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	212c      	movs	r1, #44	; 0x2c
 8001d0a:	fb01 f303 	mul.w	r3, r1, r3
 8001d0e:	4413      	add	r3, r2
 8001d10:	3355      	adds	r3, #85	; 0x55
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	f083 0301 	eor.w	r3, r3, #1
 8001d18:	b2d8      	uxtb	r0, r3
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	212c      	movs	r1, #44	; 0x2c
 8001d20:	fb01 f303 	mul.w	r3, r1, r3
 8001d24:	4413      	add	r3, r2
 8001d26:	3355      	adds	r3, #85	; 0x55
 8001d28:	4602      	mov	r2, r0
 8001d2a:	701a      	strb	r2, [r3, #0]
 8001d2c:	e09f      	b.n	8001e6e <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	212c      	movs	r1, #44	; 0x2c
 8001d34:	fb01 f303 	mul.w	r3, r1, r3
 8001d38:	4413      	add	r3, r2
 8001d3a:	3361      	adds	r3, #97	; 0x61
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d109      	bne.n	8001d56 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	212c      	movs	r1, #44	; 0x2c
 8001d48:	fb01 f303 	mul.w	r3, r1, r3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3360      	adds	r3, #96	; 0x60
 8001d50:	2202      	movs	r2, #2
 8001d52:	701a      	strb	r2, [r3, #0]
 8001d54:	e08b      	b.n	8001e6e <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	212c      	movs	r1, #44	; 0x2c
 8001d5c:	fb01 f303 	mul.w	r3, r1, r3
 8001d60:	4413      	add	r3, r2
 8001d62:	3361      	adds	r3, #97	; 0x61
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	d109      	bne.n	8001d7e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	212c      	movs	r1, #44	; 0x2c
 8001d70:	fb01 f303 	mul.w	r3, r1, r3
 8001d74:	4413      	add	r3, r2
 8001d76:	3360      	adds	r3, #96	; 0x60
 8001d78:	2202      	movs	r2, #2
 8001d7a:	701a      	strb	r2, [r3, #0]
 8001d7c:	e077      	b.n	8001e6e <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	212c      	movs	r1, #44	; 0x2c
 8001d84:	fb01 f303 	mul.w	r3, r1, r3
 8001d88:	4413      	add	r3, r2
 8001d8a:	3361      	adds	r3, #97	; 0x61
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b05      	cmp	r3, #5
 8001d90:	d109      	bne.n	8001da6 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	212c      	movs	r1, #44	; 0x2c
 8001d98:	fb01 f303 	mul.w	r3, r1, r3
 8001d9c:	4413      	add	r3, r2
 8001d9e:	3360      	adds	r3, #96	; 0x60
 8001da0:	2205      	movs	r2, #5
 8001da2:	701a      	strb	r2, [r3, #0]
 8001da4:	e063      	b.n	8001e6e <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	212c      	movs	r1, #44	; 0x2c
 8001dac:	fb01 f303 	mul.w	r3, r1, r3
 8001db0:	4413      	add	r3, r2
 8001db2:	3361      	adds	r3, #97	; 0x61
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d009      	beq.n	8001dce <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	212c      	movs	r1, #44	; 0x2c
 8001dc0:	fb01 f303 	mul.w	r3, r1, r3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3361      	adds	r3, #97	; 0x61
 8001dc8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001dca:	2b08      	cmp	r3, #8
 8001dcc:	d14f      	bne.n	8001e6e <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	212c      	movs	r1, #44	; 0x2c
 8001dd4:	fb01 f303 	mul.w	r3, r1, r3
 8001dd8:	4413      	add	r3, r2
 8001dda:	335c      	adds	r3, #92	; 0x5c
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	1c5a      	adds	r2, r3, #1
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	202c      	movs	r0, #44	; 0x2c
 8001de6:	fb00 f303 	mul.w	r3, r0, r3
 8001dea:	440b      	add	r3, r1
 8001dec:	335c      	adds	r3, #92	; 0x5c
 8001dee:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	212c      	movs	r1, #44	; 0x2c
 8001df6:	fb01 f303 	mul.w	r3, r1, r3
 8001dfa:	4413      	add	r3, r2
 8001dfc:	335c      	adds	r3, #92	; 0x5c
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d912      	bls.n	8001e2a <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	212c      	movs	r1, #44	; 0x2c
 8001e0a:	fb01 f303 	mul.w	r3, r1, r3
 8001e0e:	4413      	add	r3, r2
 8001e10:	335c      	adds	r3, #92	; 0x5c
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	212c      	movs	r1, #44	; 0x2c
 8001e1c:	fb01 f303 	mul.w	r3, r1, r3
 8001e20:	4413      	add	r3, r2
 8001e22:	3360      	adds	r3, #96	; 0x60
 8001e24:	2204      	movs	r2, #4
 8001e26:	701a      	strb	r2, [r3, #0]
 8001e28:	e021      	b.n	8001e6e <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	212c      	movs	r1, #44	; 0x2c
 8001e30:	fb01 f303 	mul.w	r3, r1, r3
 8001e34:	4413      	add	r3, r2
 8001e36:	3360      	adds	r3, #96	; 0x60
 8001e38:	2202      	movs	r2, #2
 8001e3a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	015a      	lsls	r2, r3, #5
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	4413      	add	r3, r2
 8001e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e52:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e5a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	015a      	lsls	r2, r3, #5
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e68:	461a      	mov	r2, r3
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	015a      	lsls	r2, r3, #5
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	4413      	add	r3, r2
 8001e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	b2d9      	uxtb	r1, r3
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	202c      	movs	r0, #44	; 0x2c
 8001e8a:	fb00 f303 	mul.w	r3, r0, r3
 8001e8e:	4413      	add	r3, r2
 8001e90:	3360      	adds	r3, #96	; 0x60
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff f938 	bl	800110c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001e9c:	bf00      	nop
 8001e9e:	3720      	adds	r7, #32
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08a      	sub	sp, #40	; 0x28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	f003 030f 	and.w	r3, r3, #15
 8001ec4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	0c5b      	lsrs	r3, r3, #17
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	091b      	lsrs	r3, r3, #4
 8001ed4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ed8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d004      	beq.n	8001eea <HCD_RXQLVL_IRQHandler+0x46>
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	2b05      	cmp	r3, #5
 8001ee4:	f000 80a9 	beq.w	800203a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8001ee8:	e0aa      	b.n	8002040 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 80a6 	beq.w	800203e <HCD_RXQLVL_IRQHandler+0x19a>
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	212c      	movs	r1, #44	; 0x2c
 8001ef8:	fb01 f303 	mul.w	r3, r1, r3
 8001efc:	4413      	add	r3, r2
 8001efe:	3344      	adds	r3, #68	; 0x44
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 809b 	beq.w	800203e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	212c      	movs	r1, #44	; 0x2c
 8001f0e:	fb01 f303 	mul.w	r3, r1, r3
 8001f12:	4413      	add	r3, r2
 8001f14:	3350      	adds	r3, #80	; 0x50
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	441a      	add	r2, r3
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	202c      	movs	r0, #44	; 0x2c
 8001f22:	fb00 f303 	mul.w	r3, r0, r3
 8001f26:	440b      	add	r3, r1
 8001f28:	334c      	adds	r3, #76	; 0x4c
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d87a      	bhi.n	8002026 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	212c      	movs	r1, #44	; 0x2c
 8001f3a:	fb01 f303 	mul.w	r3, r1, r3
 8001f3e:	4413      	add	r3, r2
 8001f40:	3344      	adds	r3, #68	; 0x44
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	b292      	uxth	r2, r2
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f000 fa45 	bl	80023d8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	212c      	movs	r1, #44	; 0x2c
 8001f54:	fb01 f303 	mul.w	r3, r1, r3
 8001f58:	4413      	add	r3, r2
 8001f5a:	3344      	adds	r3, #68	; 0x44
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	441a      	add	r2, r3
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	202c      	movs	r0, #44	; 0x2c
 8001f68:	fb00 f303 	mul.w	r3, r0, r3
 8001f6c:	440b      	add	r3, r1
 8001f6e:	3344      	adds	r3, #68	; 0x44
 8001f70:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	212c      	movs	r1, #44	; 0x2c
 8001f78:	fb01 f303 	mul.w	r3, r1, r3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3350      	adds	r3, #80	; 0x50
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	441a      	add	r2, r3
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	202c      	movs	r0, #44	; 0x2c
 8001f8c:	fb00 f303 	mul.w	r3, r0, r3
 8001f90:	440b      	add	r3, r1
 8001f92:	3350      	adds	r3, #80	; 0x50
 8001f94:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	015a      	lsls	r2, r3, #5
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	0cdb      	lsrs	r3, r3, #19
 8001fa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001faa:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	212c      	movs	r1, #44	; 0x2c
 8001fb2:	fb01 f303 	mul.w	r3, r1, r3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3340      	adds	r3, #64	; 0x40
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d13c      	bne.n	800203e <HCD_RXQLVL_IRQHandler+0x19a>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d039      	beq.n	800203e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	015a      	lsls	r2, r3, #5
 8001fce:	6a3b      	ldr	r3, [r7, #32]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001fe0:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001fe8:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	015a      	lsls	r2, r3, #5
 8001fee:	6a3b      	ldr	r3, [r7, #32]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	212c      	movs	r1, #44	; 0x2c
 8002002:	fb01 f303 	mul.w	r3, r1, r3
 8002006:	4413      	add	r3, r2
 8002008:	3354      	adds	r3, #84	; 0x54
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	f083 0301 	eor.w	r3, r3, #1
 8002010:	b2d8      	uxtb	r0, r3
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	212c      	movs	r1, #44	; 0x2c
 8002018:	fb01 f303 	mul.w	r3, r1, r3
 800201c:	4413      	add	r3, r2
 800201e:	3354      	adds	r3, #84	; 0x54
 8002020:	4602      	mov	r2, r0
 8002022:	701a      	strb	r2, [r3, #0]
      break;
 8002024:	e00b      	b.n	800203e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	212c      	movs	r1, #44	; 0x2c
 800202c:	fb01 f303 	mul.w	r3, r1, r3
 8002030:	4413      	add	r3, r2
 8002032:	3360      	adds	r3, #96	; 0x60
 8002034:	2204      	movs	r2, #4
 8002036:	701a      	strb	r2, [r3, #0]
      break;
 8002038:	e001      	b.n	800203e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800203a:	bf00      	nop
 800203c:	e000      	b.n	8002040 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800203e:	bf00      	nop
  }
}
 8002040:	bf00      	nop
 8002042:	3728      	adds	r7, #40	; 0x28
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002074:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b02      	cmp	r3, #2
 800207e:	d10b      	bne.n	8002098 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b01      	cmp	r3, #1
 8002088:	d102      	bne.n	8002090 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff f816 	bl	80010bc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	f043 0302 	orr.w	r3, r3, #2
 8002096:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d132      	bne.n	8002108 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f043 0308 	orr.w	r3, r3, #8
 80020a8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d126      	bne.n	8002102 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d113      	bne.n	80020e4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80020c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80020c6:	d106      	bne.n	80020d6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2102      	movs	r1, #2
 80020ce:	4618      	mov	r0, r3
 80020d0:	f000 f9fb 	bl	80024ca <USB_InitFSLSPClkSel>
 80020d4:	e011      	b.n	80020fa <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2101      	movs	r1, #1
 80020dc:	4618      	mov	r0, r3
 80020de:	f000 f9f4 	bl	80024ca <USB_InitFSLSPClkSel>
 80020e2:	e00a      	b.n	80020fa <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d106      	bne.n	80020fa <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020f2:	461a      	mov	r2, r3
 80020f4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80020f8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7fe fff2 	bl	80010e4 <HAL_HCD_PortEnabled_Callback>
 8002100:	e002      	b.n	8002108 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7fe fff8 	bl	80010f8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f003 0320 	and.w	r3, r3, #32
 800210e:	2b20      	cmp	r3, #32
 8002110:	d103      	bne.n	800211a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	f043 0320 	orr.w	r3, r3, #32
 8002118:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002120:	461a      	mov	r2, r3
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	6013      	str	r3, [r2, #0]
}
 8002126:	bf00      	nop
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
	...

08002130 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b00      	cmp	r3, #0
 800214a:	d105      	bne.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002154:	2b00      	cmp	r3, #0
 8002156:	d038      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002158:	4b68      	ldr	r3, [pc, #416]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800215e:	f7fe fc09 	bl	8000974 <HAL_GetTick>
 8002162:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002164:	e008      	b.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002166:	f7fe fc05 	bl	8000974 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e0bd      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002178:	4b61      	ldr	r3, [pc, #388]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1f0      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	019b      	lsls	r3, r3, #6
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	071b      	lsls	r3, r3, #28
 8002196:	495a      	ldr	r1, [pc, #360]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002198:	4313      	orrs	r3, r2
 800219a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800219e:	4b57      	ldr	r3, [pc, #348]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80021a4:	f7fe fbe6 	bl	8000974 <HAL_GetTick>
 80021a8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80021ac:	f7fe fbe2 	bl	8000974 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e09a      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021be:	4b50      	ldr	r3, [pc, #320]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0f0      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 8083 	beq.w	80022de <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80021d8:	2300      	movs	r3, #0
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	4b48      	ldr	r3, [pc, #288]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	4a47      	ldr	r2, [pc, #284]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e6:	6413      	str	r3, [r2, #64]	; 0x40
 80021e8:	4b45      	ldr	r3, [pc, #276]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80021f4:	4b43      	ldr	r3, [pc, #268]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a42      	ldr	r2, [pc, #264]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021fe:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002200:	f7fe fbb8 	bl	8000974 <HAL_GetTick>
 8002204:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002206:	e008      	b.n	800221a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002208:	f7fe fbb4 	bl	8000974 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e06c      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800221a:	4b3a      	ldr	r3, [pc, #232]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0f0      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002226:	4b36      	ldr	r3, [pc, #216]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800222e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d02f      	beq.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	429a      	cmp	r2, r3
 8002242:	d028      	beq.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002244:	4b2e      	ldr	r3, [pc, #184]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800224c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800224e:	4b2e      	ldr	r3, [pc, #184]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002250:	2201      	movs	r2, #1
 8002252:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002254:	4b2c      	ldr	r3, [pc, #176]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800225a:	4a29      	ldr	r2, [pc, #164]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002260:	4b27      	ldr	r3, [pc, #156]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b01      	cmp	r3, #1
 800226a:	d114      	bne.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800226c:	f7fe fb82 	bl	8000974 <HAL_GetTick>
 8002270:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002272:	e00a      	b.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002274:	f7fe fb7e 	bl	8000974 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002282:	4293      	cmp	r3, r2
 8002284:	d901      	bls.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e034      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800228a:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800228c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0ee      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800229e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022a2:	d10d      	bne.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80022a4:	4b16      	ldr	r3, [pc, #88]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80022b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022b8:	4911      	ldr	r1, [pc, #68]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	608b      	str	r3, [r1, #8]
 80022be:	e005      	b.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80022c0:	4b0f      	ldr	r3, [pc, #60]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	4a0e      	ldr	r2, [pc, #56]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80022ca:	6093      	str	r3, [r2, #8]
 80022cc:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022d8:	4909      	ldr	r1, [pc, #36]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	7d1a      	ldrb	r2, [r3, #20]
 80022ee:	4b07      	ldr	r3, [pc, #28]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80022f0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	42470068 	.word	0x42470068
 8002300:	40023800 	.word	0x40023800
 8002304:	40007000 	.word	0x40007000
 8002308:	42470e40 	.word	0x42470e40
 800230c:	424711e0 	.word	0x424711e0

08002310 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	3301      	adds	r3, #1
 8002322:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4a13      	ldr	r2, [pc, #76]	; (8002374 <USB_FlushTxFifo+0x64>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d901      	bls.n	8002330 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e01b      	b.n	8002368 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	2b00      	cmp	r3, #0
 8002336:	daf2      	bge.n	800231e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	019b      	lsls	r3, r3, #6
 8002340:	f043 0220 	orr.w	r2, r3, #32
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	3301      	adds	r3, #1
 800234c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4a08      	ldr	r2, [pc, #32]	; (8002374 <USB_FlushTxFifo+0x64>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d901      	bls.n	800235a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e006      	b.n	8002368 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	f003 0320 	and.w	r3, r3, #32
 8002362:	2b20      	cmp	r3, #32
 8002364:	d0f0      	beq.n	8002348 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	00030d40 	.word	0x00030d40

08002378 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	3301      	adds	r3, #1
 8002388:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	4a11      	ldr	r2, [pc, #68]	; (80023d4 <USB_FlushRxFifo+0x5c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d901      	bls.n	8002396 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e018      	b.n	80023c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	2b00      	cmp	r3, #0
 800239c:	daf2      	bge.n	8002384 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2210      	movs	r2, #16
 80023a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	3301      	adds	r3, #1
 80023ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	4a08      	ldr	r2, [pc, #32]	; (80023d4 <USB_FlushRxFifo+0x5c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d901      	bls.n	80023ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e006      	b.n	80023c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	f003 0310 	and.w	r3, r3, #16
 80023c2:	2b10      	cmp	r3, #16
 80023c4:	d0f0      	beq.n	80023a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	00030d40 	.word	0x00030d40

080023d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80023d8:	b480      	push	{r7}
 80023da:	b08b      	sub	sp, #44	; 0x2c
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	4613      	mov	r3, r2
 80023e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80023ee:	88fb      	ldrh	r3, [r7, #6]
 80023f0:	089b      	lsrs	r3, r3, #2
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80023f6:	88fb      	ldrh	r3, [r7, #6]
 80023f8:	f003 0303 	and.w	r3, r3, #3
 80023fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80023fe:	2300      	movs	r3, #0
 8002400:	623b      	str	r3, [r7, #32]
 8002402:	e014      	b.n	800242e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	601a      	str	r2, [r3, #0]
    pDest++;
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	3301      	adds	r3, #1
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	3301      	adds	r3, #1
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	3301      	adds	r3, #1
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	3301      	adds	r3, #1
 8002426:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8002428:	6a3b      	ldr	r3, [r7, #32]
 800242a:	3301      	adds	r3, #1
 800242c:	623b      	str	r3, [r7, #32]
 800242e:	6a3a      	ldr	r2, [r7, #32]
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	429a      	cmp	r2, r3
 8002434:	d3e6      	bcc.n	8002404 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8002436:	8bfb      	ldrh	r3, [r7, #30]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d01e      	beq.n	800247a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002446:	461a      	mov	r2, r3
 8002448:	f107 0310 	add.w	r3, r7, #16
 800244c:	6812      	ldr	r2, [r2, #0]
 800244e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	6a3b      	ldr	r3, [r7, #32]
 8002454:	b2db      	uxtb	r3, r3
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	fa22 f303 	lsr.w	r3, r2, r3
 800245c:	b2da      	uxtb	r2, r3
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	701a      	strb	r2, [r3, #0]
      i++;
 8002462:	6a3b      	ldr	r3, [r7, #32]
 8002464:	3301      	adds	r3, #1
 8002466:	623b      	str	r3, [r7, #32]
      pDest++;
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	3301      	adds	r3, #1
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800246e:	8bfb      	ldrh	r3, [r7, #30]
 8002470:	3b01      	subs	r3, #1
 8002472:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8002474:	8bfb      	ldrh	r3, [r7, #30]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1ea      	bne.n	8002450 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800247c:	4618      	mov	r0, r3
 800247e:	372c      	adds	r7, #44	; 0x2c
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	4013      	ands	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80024a0:	68fb      	ldr	r3, [r7, #12]
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	f003 0301 	and.w	r3, r3, #1
}
 80024be:	4618      	mov	r0, r3
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b085      	sub	sp, #20
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	460b      	mov	r3, r1
 80024d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024e8:	f023 0303 	bic.w	r3, r3, #3
 80024ec:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	78fb      	ldrb	r3, [r7, #3]
 80024f8:	f003 0303 	and.w	r3, r3, #3
 80024fc:	68f9      	ldr	r1, [r7, #12]
 80024fe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002502:	4313      	orrs	r3, r2
 8002504:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8002506:	78fb      	ldrb	r3, [r7, #3]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d107      	bne.n	800251c <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002512:	461a      	mov	r2, r3
 8002514:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8002518:	6053      	str	r3, [r2, #4]
 800251a:	e009      	b.n	8002530 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800251c:	78fb      	ldrb	r3, [r7, #3]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d106      	bne.n	8002530 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002528:	461a      	mov	r2, r3
 800252a:	f241 7370 	movw	r3, #6000	; 0x1770
 800252e:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800253e:	b480      	push	{r7}
 8002540:	b085      	sub	sp, #20
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	b29b      	uxth	r3, r3
}
 8002554:	4618      	mov	r0, r3
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8002560:	b480      	push	{r7}
 8002562:	b089      	sub	sp, #36	; 0x24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8002570:	78fb      	ldrb	r3, [r7, #3]
 8002572:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	015a      	lsls	r2, r3, #5
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	4413      	add	r3, r2
 8002580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	0c9b      	lsrs	r3, r3, #18
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	015a      	lsls	r2, r3, #5
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	4413      	add	r3, r2
 8002596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	0fdb      	lsrs	r3, r3, #31
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 0320 	and.w	r3, r3, #32
 80025ac:	2b20      	cmp	r3, #32
 80025ae:	d104      	bne.n	80025ba <USB_HC_Halt+0x5a>
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80025b6:	2300      	movs	r3, #0
 80025b8:	e0c8      	b.n	800274c <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d002      	beq.n	80025c6 <USB_HC_Halt+0x66>
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d163      	bne.n	800268e <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	015a      	lsls	r2, r3, #5
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	4413      	add	r3, r2
 80025ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	0151      	lsls	r1, r2, #5
 80025d8:	69fa      	ldr	r2, [r7, #28]
 80025da:	440a      	add	r2, r1
 80025dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80025e4:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 0320 	and.w	r3, r3, #32
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f040 80ab 	bne.w	800274a <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d133      	bne.n	8002668 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	015a      	lsls	r2, r3, #5
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	4413      	add	r3, r2
 8002608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	0151      	lsls	r1, r2, #5
 8002612:	69fa      	ldr	r2, [r7, #28]
 8002614:	440a      	add	r2, r1
 8002616:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800261a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800261e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	015a      	lsls	r2, r3, #5
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	4413      	add	r3, r2
 8002628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	0151      	lsls	r1, r2, #5
 8002632:	69fa      	ldr	r2, [r7, #28]
 8002634:	440a      	add	r2, r1
 8002636:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800263a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800263e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	3301      	adds	r3, #1
 8002644:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800264c:	d81d      	bhi.n	800268a <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	015a      	lsls	r2, r3, #5
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	4413      	add	r3, r2
 8002656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002660:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002664:	d0ec      	beq.n	8002640 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002666:	e070      	b.n	800274a <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	4413      	add	r3, r2
 8002670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	0151      	lsls	r1, r2, #5
 800267a:	69fa      	ldr	r2, [r7, #28]
 800267c:	440a      	add	r2, r1
 800267e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002682:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002686:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002688:	e05f      	b.n	800274a <USB_HC_Halt+0x1ea>
            break;
 800268a:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800268c:	e05d      	b.n	800274a <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	015a      	lsls	r2, r3, #5
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	4413      	add	r3, r2
 8002696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	0151      	lsls	r1, r2, #5
 80026a0:	69fa      	ldr	r2, [r7, #28]
 80026a2:	440a      	add	r2, r1
 80026a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80026ac:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d133      	bne.n	8002726 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	015a      	lsls	r2, r3, #5
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	4413      	add	r3, r2
 80026c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	0151      	lsls	r1, r2, #5
 80026d0:	69fa      	ldr	r2, [r7, #28]
 80026d2:	440a      	add	r2, r1
 80026d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026dc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	015a      	lsls	r2, r3, #5
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	4413      	add	r3, r2
 80026e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	0151      	lsls	r1, r2, #5
 80026f0:	69fa      	ldr	r2, [r7, #28]
 80026f2:	440a      	add	r2, r1
 80026f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026fc:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	3301      	adds	r3, #1
 8002702:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800270a:	d81d      	bhi.n	8002748 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	015a      	lsls	r2, r3, #5
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	4413      	add	r3, r2
 8002714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800271e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002722:	d0ec      	beq.n	80026fe <USB_HC_Halt+0x19e>
 8002724:	e011      	b.n	800274a <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	015a      	lsls	r2, r3, #5
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	4413      	add	r3, r2
 800272e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	0151      	lsls	r1, r2, #5
 8002738:	69fa      	ldr	r2, [r7, #28]
 800273a:	440a      	add	r2, r1
 800273c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002740:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	e000      	b.n	800274a <USB_HC_Halt+0x1ea>
          break;
 8002748:	bf00      	nop
    }
  }

  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3724      	adds	r7, #36	; 0x24
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002766:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800276a:	2b84      	cmp	r3, #132	; 0x84
 800276c:	d005      	beq.n	800277a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800276e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	4413      	add	r3, r2
 8002776:	3303      	adds	r3, #3
 8002778:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800277a:	68fb      	ldr	r3, [r7, #12]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800278c:	f000 ff58 	bl	8003640 <vTaskStartScheduler>
  
  return osOK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	bd80      	pop	{r7, pc}

08002796 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002796:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002798:	b089      	sub	sp, #36	; 0x24
 800279a:	af04      	add	r7, sp, #16
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d020      	beq.n	80027ea <osThreadCreate+0x54>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d01c      	beq.n	80027ea <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685c      	ldr	r4, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681d      	ldr	r5, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691e      	ldr	r6, [r3, #16]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff ffc8 	bl	8002758 <makeFreeRtosPriority>
 80027c8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027d2:	9202      	str	r2, [sp, #8]
 80027d4:	9301      	str	r3, [sp, #4]
 80027d6:	9100      	str	r1, [sp, #0]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	4632      	mov	r2, r6
 80027dc:	4629      	mov	r1, r5
 80027de:	4620      	mov	r0, r4
 80027e0:	f000 fd66 	bl	80032b0 <xTaskCreateStatic>
 80027e4:	4603      	mov	r3, r0
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	e01c      	b.n	8002824 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685c      	ldr	r4, [r3, #4]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027f6:	b29e      	uxth	r6, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff ffaa 	bl	8002758 <makeFreeRtosPriority>
 8002804:	4602      	mov	r2, r0
 8002806:	f107 030c 	add.w	r3, r7, #12
 800280a:	9301      	str	r3, [sp, #4]
 800280c:	9200      	str	r2, [sp, #0]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	4632      	mov	r2, r6
 8002812:	4629      	mov	r1, r5
 8002814:	4620      	mov	r0, r4
 8002816:	f000 fda8 	bl	800336a <xTaskCreate>
 800281a:	4603      	mov	r3, r0
 800281c:	2b01      	cmp	r3, #1
 800281e:	d001      	beq.n	8002824 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002820:	2300      	movs	r3, #0
 8002822:	e000      	b.n	8002826 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002824:	68fb      	ldr	r3, [r7, #12]
}
 8002826:	4618      	mov	r0, r3
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800282e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <osDelay+0x16>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	e000      	b.n	8002846 <osDelay+0x18>
 8002844:	2301      	movs	r3, #1
 8002846:	4618      	mov	r0, r3
 8002848:	f000 fec6 	bl	80035d8 <vTaskDelay>
  
  return osOK;
 800284c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002856:	b580      	push	{r7, lr}
 8002858:	b086      	sub	sp, #24
 800285a:	af02      	add	r7, sp, #8
 800285c:	6078      	str	r0, [r7, #4]
 800285e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00f      	beq.n	8002888 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d10a      	bne.n	8002884 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2203      	movs	r2, #3
 8002874:	9200      	str	r2, [sp, #0]
 8002876:	2200      	movs	r2, #0
 8002878:	2100      	movs	r1, #0
 800287a:	2001      	movs	r0, #1
 800287c:	f000 f93a 	bl	8002af4 <xQueueGenericCreateStatic>
 8002880:	4603      	mov	r3, r0
 8002882:	e016      	b.n	80028b2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002884:	2300      	movs	r3, #0
 8002886:	e014      	b.n	80028b2 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d110      	bne.n	80028b0 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800288e:	2203      	movs	r2, #3
 8002890:	2100      	movs	r1, #0
 8002892:	2001      	movs	r0, #1
 8002894:	f000 f9a6 	bl	8002be4 <xQueueGenericCreate>
 8002898:	60f8      	str	r0, [r7, #12]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d005      	beq.n	80028ac <osSemaphoreCreate+0x56>
 80028a0:	2300      	movs	r3, #0
 80028a2:	2200      	movs	r2, #0
 80028a4:	2100      	movs	r1, #0
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 f9f6 	bl	8002c98 <xQueueGenericSend>
      return sema;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	e000      	b.n	80028b2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80028b0:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f103 0208 	add.w	r2, r3, #8
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f04f 32ff 	mov.w	r2, #4294967295
 80028d2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f103 0208 	add.w	r2, r3, #8
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f103 0208 	add.w	r2, r3, #8
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	1c5a      	adds	r2, r3, #1
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	601a      	str	r2, [r3, #0]
}
 8002950:	bf00      	nop
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002972:	d103      	bne.n	800297c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	e00c      	b.n	8002996 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3308      	adds	r3, #8
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	e002      	b.n	800298a <vListInsert+0x2e>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	429a      	cmp	r2, r3
 8002994:	d2f6      	bcs.n	8002984 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	601a      	str	r2, [r3, #0]
}
 80029c2:	bf00      	nop
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80029ce:	b480      	push	{r7}
 80029d0:	b085      	sub	sp, #20
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	6892      	ldr	r2, [r2, #8]
 80029e4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6852      	ldr	r2, [r2, #4]
 80029ee:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d103      	bne.n	8002a02 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	1e5a      	subs	r2, r3, #1
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
	...

08002a24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10a      	bne.n	8002a4e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3c:	f383 8811 	msr	BASEPRI, r3
 8002a40:	f3bf 8f6f 	isb	sy
 8002a44:	f3bf 8f4f 	dsb	sy
 8002a48:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a4a:	bf00      	nop
 8002a4c:	e7fe      	b.n	8002a4c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002a4e:	f001 fd41 	bl	80044d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5a:	68f9      	ldr	r1, [r7, #12]
 8002a5c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a5e:	fb01 f303 	mul.w	r3, r1, r3
 8002a62:	441a      	add	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	68f9      	ldr	r1, [r7, #12]
 8002a82:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a84:	fb01 f303 	mul.w	r3, r1, r3
 8002a88:	441a      	add	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	22ff      	movs	r2, #255	; 0xff
 8002a92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	22ff      	movs	r2, #255	; 0xff
 8002a9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d114      	bne.n	8002ace <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d01a      	beq.n	8002ae2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	3310      	adds	r3, #16
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f001 f807 	bl	8003ac4 <xTaskRemoveFromEventList>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d012      	beq.n	8002ae2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002abc:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <xQueueGenericReset+0xcc>)
 8002abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	f3bf 8f4f 	dsb	sy
 8002ac8:	f3bf 8f6f 	isb	sy
 8002acc:	e009      	b.n	8002ae2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	3310      	adds	r3, #16
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff fef1 	bl	80028ba <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	3324      	adds	r3, #36	; 0x24
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff feec 	bl	80028ba <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002ae2:	f001 fd27 	bl	8004534 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002ae6:	2301      	movs	r3, #1
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	e000ed04 	.word	0xe000ed04

08002af4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08e      	sub	sp, #56	; 0x38
 8002af8:	af02      	add	r7, sp, #8
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
 8002b00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10a      	bne.n	8002b1e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0c:	f383 8811 	msr	BASEPRI, r3
 8002b10:	f3bf 8f6f 	isb	sy
 8002b14:	f3bf 8f4f 	dsb	sy
 8002b18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b1a:	bf00      	nop
 8002b1c:	e7fe      	b.n	8002b1c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10a      	bne.n	8002b3a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b28:	f383 8811 	msr	BASEPRI, r3
 8002b2c:	f3bf 8f6f 	isb	sy
 8002b30:	f3bf 8f4f 	dsb	sy
 8002b34:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b36:	bf00      	nop
 8002b38:	e7fe      	b.n	8002b38 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d002      	beq.n	8002b46 <xQueueGenericCreateStatic+0x52>
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <xQueueGenericCreateStatic+0x56>
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <xQueueGenericCreateStatic+0x58>
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10a      	bne.n	8002b66 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b54:	f383 8811 	msr	BASEPRI, r3
 8002b58:	f3bf 8f6f 	isb	sy
 8002b5c:	f3bf 8f4f 	dsb	sy
 8002b60:	623b      	str	r3, [r7, #32]
}
 8002b62:	bf00      	nop
 8002b64:	e7fe      	b.n	8002b64 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d102      	bne.n	8002b72 <xQueueGenericCreateStatic+0x7e>
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <xQueueGenericCreateStatic+0x82>
 8002b72:	2301      	movs	r3, #1
 8002b74:	e000      	b.n	8002b78 <xQueueGenericCreateStatic+0x84>
 8002b76:	2300      	movs	r3, #0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10a      	bne.n	8002b92 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b80:	f383 8811 	msr	BASEPRI, r3
 8002b84:	f3bf 8f6f 	isb	sy
 8002b88:	f3bf 8f4f 	dsb	sy
 8002b8c:	61fb      	str	r3, [r7, #28]
}
 8002b8e:	bf00      	nop
 8002b90:	e7fe      	b.n	8002b90 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002b92:	2348      	movs	r3, #72	; 0x48
 8002b94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	2b48      	cmp	r3, #72	; 0x48
 8002b9a:	d00a      	beq.n	8002bb2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba0:	f383 8811 	msr	BASEPRI, r3
 8002ba4:	f3bf 8f6f 	isb	sy
 8002ba8:	f3bf 8f4f 	dsb	sy
 8002bac:	61bb      	str	r3, [r7, #24]
}
 8002bae:	bf00      	nop
 8002bb0:	e7fe      	b.n	8002bb0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002bb2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00d      	beq.n	8002bda <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002bc6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	68b9      	ldr	r1, [r7, #8]
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 f83f 	bl	8002c58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3730      	adds	r7, #48	; 0x30
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b08a      	sub	sp, #40	; 0x28
 8002be8:	af02      	add	r7, sp, #8
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10a      	bne.n	8002c0e <xQueueGenericCreate+0x2a>
	__asm volatile
 8002bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfc:	f383 8811 	msr	BASEPRI, r3
 8002c00:	f3bf 8f6f 	isb	sy
 8002c04:	f3bf 8f4f 	dsb	sy
 8002c08:	613b      	str	r3, [r7, #16]
}
 8002c0a:	bf00      	nop
 8002c0c:	e7fe      	b.n	8002c0c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	fb02 f303 	mul.w	r3, r2, r3
 8002c16:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	3348      	adds	r3, #72	; 0x48
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f001 fd3b 	bl	8004698 <pvPortMalloc>
 8002c22:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d011      	beq.n	8002c4e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	3348      	adds	r3, #72	; 0x48
 8002c32:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c3c:	79fa      	ldrb	r2, [r7, #7]
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	4613      	mov	r3, r2
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	68b9      	ldr	r1, [r7, #8]
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f000 f805 	bl	8002c58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c4e:	69bb      	ldr	r3, [r7, #24]
	}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3720      	adds	r7, #32
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
 8002c64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d103      	bne.n	8002c74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	e002      	b.n	8002c7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c86:	2101      	movs	r1, #1
 8002c88:	69b8      	ldr	r0, [r7, #24]
 8002c8a:	f7ff fecb 	bl	8002a24 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002c8e:	bf00      	nop
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
	...

08002c98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08e      	sub	sp, #56	; 0x38
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
 8002ca4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10a      	bne.n	8002cca <xQueueGenericSend+0x32>
	__asm volatile
 8002cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb8:	f383 8811 	msr	BASEPRI, r3
 8002cbc:	f3bf 8f6f 	isb	sy
 8002cc0:	f3bf 8f4f 	dsb	sy
 8002cc4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002cc6:	bf00      	nop
 8002cc8:	e7fe      	b.n	8002cc8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d103      	bne.n	8002cd8 <xQueueGenericSend+0x40>
 8002cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <xQueueGenericSend+0x44>
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e000      	b.n	8002cde <xQueueGenericSend+0x46>
 8002cdc:	2300      	movs	r3, #0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10a      	bne.n	8002cf8 <xQueueGenericSend+0x60>
	__asm volatile
 8002ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce6:	f383 8811 	msr	BASEPRI, r3
 8002cea:	f3bf 8f6f 	isb	sy
 8002cee:	f3bf 8f4f 	dsb	sy
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002cf4:	bf00      	nop
 8002cf6:	e7fe      	b.n	8002cf6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d103      	bne.n	8002d06 <xQueueGenericSend+0x6e>
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d101      	bne.n	8002d0a <xQueueGenericSend+0x72>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <xQueueGenericSend+0x74>
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10a      	bne.n	8002d26 <xQueueGenericSend+0x8e>
	__asm volatile
 8002d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d14:	f383 8811 	msr	BASEPRI, r3
 8002d18:	f3bf 8f6f 	isb	sy
 8002d1c:	f3bf 8f4f 	dsb	sy
 8002d20:	623b      	str	r3, [r7, #32]
}
 8002d22:	bf00      	nop
 8002d24:	e7fe      	b.n	8002d24 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d26:	f001 f889 	bl	8003e3c <xTaskGetSchedulerState>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d102      	bne.n	8002d36 <xQueueGenericSend+0x9e>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <xQueueGenericSend+0xa2>
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <xQueueGenericSend+0xa4>
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10a      	bne.n	8002d56 <xQueueGenericSend+0xbe>
	__asm volatile
 8002d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d44:	f383 8811 	msr	BASEPRI, r3
 8002d48:	f3bf 8f6f 	isb	sy
 8002d4c:	f3bf 8f4f 	dsb	sy
 8002d50:	61fb      	str	r3, [r7, #28]
}
 8002d52:	bf00      	nop
 8002d54:	e7fe      	b.n	8002d54 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d56:	f001 fbbd 	bl	80044d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d302      	bcc.n	8002d6c <xQueueGenericSend+0xd4>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d129      	bne.n	8002dc0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	68b9      	ldr	r1, [r7, #8]
 8002d70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d72:	f000 f9b3 	bl	80030dc <prvCopyDataToQueue>
 8002d76:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d010      	beq.n	8002da2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d82:	3324      	adds	r3, #36	; 0x24
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 fe9d 	bl	8003ac4 <xTaskRemoveFromEventList>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d013      	beq.n	8002db8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002d90:	4b3f      	ldr	r3, [pc, #252]	; (8002e90 <xQueueGenericSend+0x1f8>)
 8002d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	f3bf 8f6f 	isb	sy
 8002da0:	e00a      	b.n	8002db8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d007      	beq.n	8002db8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002da8:	4b39      	ldr	r3, [pc, #228]	; (8002e90 <xQueueGenericSend+0x1f8>)
 8002daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	f3bf 8f4f 	dsb	sy
 8002db4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002db8:	f001 fbbc 	bl	8004534 <vPortExitCritical>
				return pdPASS;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e063      	b.n	8002e88 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d103      	bne.n	8002dce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002dc6:	f001 fbb5 	bl	8004534 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	e05c      	b.n	8002e88 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d106      	bne.n	8002de2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002dd4:	f107 0314 	add.w	r3, r7, #20
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 fed5 	bl	8003b88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002dde:	2301      	movs	r3, #1
 8002de0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002de2:	f001 fba7 	bl	8004534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002de6:	f000 fc8b 	bl	8003700 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002dea:	f001 fb73 	bl	80044d4 <vPortEnterCritical>
 8002dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002df4:	b25b      	sxtb	r3, r3
 8002df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfa:	d103      	bne.n	8002e04 <xQueueGenericSend+0x16c>
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e0a:	b25b      	sxtb	r3, r3
 8002e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e10:	d103      	bne.n	8002e1a <xQueueGenericSend+0x182>
 8002e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e1a:	f001 fb8b 	bl	8004534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e1e:	1d3a      	adds	r2, r7, #4
 8002e20:	f107 0314 	add.w	r3, r7, #20
 8002e24:	4611      	mov	r1, r2
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 fec4 	bl	8003bb4 <xTaskCheckForTimeOut>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d124      	bne.n	8002e7c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e34:	f000 fa24 	bl	8003280 <prvIsQueueFull>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d018      	beq.n	8002e70 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e40:	3310      	adds	r3, #16
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	4611      	mov	r1, r2
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 fe18 	bl	8003a7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002e4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e4e:	f000 f9af 	bl	80031b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002e52:	f000 fc63 	bl	800371c <xTaskResumeAll>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f47f af7c 	bne.w	8002d56 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002e5e:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <xQueueGenericSend+0x1f8>)
 8002e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	f3bf 8f4f 	dsb	sy
 8002e6a:	f3bf 8f6f 	isb	sy
 8002e6e:	e772      	b.n	8002d56 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002e70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e72:	f000 f99d 	bl	80031b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e76:	f000 fc51 	bl	800371c <xTaskResumeAll>
 8002e7a:	e76c      	b.n	8002d56 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002e7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e7e:	f000 f997 	bl	80031b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e82:	f000 fc4b 	bl	800371c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002e86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3738      	adds	r7, #56	; 0x38
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	e000ed04 	.word	0xe000ed04

08002e94 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b08e      	sub	sp, #56	; 0x38
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10a      	bne.n	8002ec6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb4:	f383 8811 	msr	BASEPRI, r3
 8002eb8:	f3bf 8f6f 	isb	sy
 8002ebc:	f3bf 8f4f 	dsb	sy
 8002ec0:	623b      	str	r3, [r7, #32]
}
 8002ec2:	bf00      	nop
 8002ec4:	e7fe      	b.n	8002ec4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00a      	beq.n	8002ee4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8002ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed2:	f383 8811 	msr	BASEPRI, r3
 8002ed6:	f3bf 8f6f 	isb	sy
 8002eda:	f3bf 8f4f 	dsb	sy
 8002ede:	61fb      	str	r3, [r7, #28]
}
 8002ee0:	bf00      	nop
 8002ee2:	e7fe      	b.n	8002ee2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ee4:	f000 ffaa 	bl	8003e3c <xTaskGetSchedulerState>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d102      	bne.n	8002ef4 <xQueueSemaphoreTake+0x60>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <xQueueSemaphoreTake+0x64>
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e000      	b.n	8002efa <xQueueSemaphoreTake+0x66>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10a      	bne.n	8002f14 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8002efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f02:	f383 8811 	msr	BASEPRI, r3
 8002f06:	f3bf 8f6f 	isb	sy
 8002f0a:	f3bf 8f4f 	dsb	sy
 8002f0e:	61bb      	str	r3, [r7, #24]
}
 8002f10:	bf00      	nop
 8002f12:	e7fe      	b.n	8002f12 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f14:	f001 fade 	bl	80044d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d024      	beq.n	8002f6e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f26:	1e5a      	subs	r2, r3, #1
 8002f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d104      	bne.n	8002f3e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002f34:	f001 f92a 	bl	800418c <pvTaskIncrementMutexHeldCount>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f3c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00f      	beq.n	8002f66 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f48:	3310      	adds	r3, #16
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 fdba 	bl	8003ac4 <xTaskRemoveFromEventList>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d007      	beq.n	8002f66 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002f56:	4b54      	ldr	r3, [pc, #336]	; (80030a8 <xQueueSemaphoreTake+0x214>)
 8002f58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	f3bf 8f4f 	dsb	sy
 8002f62:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002f66:	f001 fae5 	bl	8004534 <vPortExitCritical>
				return pdPASS;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e097      	b.n	800309e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d111      	bne.n	8002f98 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00a      	beq.n	8002f90 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8002f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7e:	f383 8811 	msr	BASEPRI, r3
 8002f82:	f3bf 8f6f 	isb	sy
 8002f86:	f3bf 8f4f 	dsb	sy
 8002f8a:	617b      	str	r3, [r7, #20]
}
 8002f8c:	bf00      	nop
 8002f8e:	e7fe      	b.n	8002f8e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002f90:	f001 fad0 	bl	8004534 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f94:	2300      	movs	r3, #0
 8002f96:	e082      	b.n	800309e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d106      	bne.n	8002fac <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f9e:	f107 030c 	add.w	r3, r7, #12
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 fdf0 	bl	8003b88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002fac:	f001 fac2 	bl	8004534 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002fb0:	f000 fba6 	bl	8003700 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002fb4:	f001 fa8e 	bl	80044d4 <vPortEnterCritical>
 8002fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fbe:	b25b      	sxtb	r3, r3
 8002fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc4:	d103      	bne.n	8002fce <xQueueSemaphoreTake+0x13a>
 8002fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fd4:	b25b      	sxtb	r3, r3
 8002fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fda:	d103      	bne.n	8002fe4 <xQueueSemaphoreTake+0x150>
 8002fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fe4:	f001 faa6 	bl	8004534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fe8:	463a      	mov	r2, r7
 8002fea:	f107 030c 	add.w	r3, r7, #12
 8002fee:	4611      	mov	r1, r2
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 fddf 	bl	8003bb4 <xTaskCheckForTimeOut>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d132      	bne.n	8003062 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ffc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ffe:	f000 f929 	bl	8003254 <prvIsQueueEmpty>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d026      	beq.n	8003056 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d109      	bne.n	8003024 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003010:	f001 fa60 	bl	80044d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	4618      	mov	r0, r3
 800301a:	f000 ff2d 	bl	8003e78 <xTaskPriorityInherit>
 800301e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003020:	f001 fa88 	bl	8004534 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003026:	3324      	adds	r3, #36	; 0x24
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	4611      	mov	r1, r2
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fd25 	bl	8003a7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003032:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003034:	f000 f8bc 	bl	80031b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003038:	f000 fb70 	bl	800371c <xTaskResumeAll>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	f47f af68 	bne.w	8002f14 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003044:	4b18      	ldr	r3, [pc, #96]	; (80030a8 <xQueueSemaphoreTake+0x214>)
 8003046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	f3bf 8f4f 	dsb	sy
 8003050:	f3bf 8f6f 	isb	sy
 8003054:	e75e      	b.n	8002f14 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003056:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003058:	f000 f8aa 	bl	80031b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800305c:	f000 fb5e 	bl	800371c <xTaskResumeAll>
 8003060:	e758      	b.n	8002f14 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003062:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003064:	f000 f8a4 	bl	80031b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003068:	f000 fb58 	bl	800371c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800306c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800306e:	f000 f8f1 	bl	8003254 <prvIsQueueEmpty>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	f43f af4d 	beq.w	8002f14 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800307a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00d      	beq.n	800309c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003080:	f001 fa28 	bl	80044d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003084:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003086:	f000 f811 	bl	80030ac <prvGetDisinheritPriorityAfterTimeout>
 800308a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800308c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003092:	4618      	mov	r0, r3
 8003094:	f000 ffec 	bl	8004070 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003098:	f001 fa4c 	bl	8004534 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800309c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3738      	adds	r7, #56	; 0x38
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	e000ed04 	.word	0xe000ed04

080030ac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d006      	beq.n	80030ca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f1c3 0307 	rsb	r3, r3, #7
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	e001      	b.n	80030ce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80030ce:	68fb      	ldr	r3, [r7, #12]
	}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80030e8:	2300      	movs	r3, #0
 80030ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10d      	bne.n	8003116 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d14d      	bne.n	800319e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	4618      	mov	r0, r3
 8003108:	f000 ff2c 	bl	8003f64 <xTaskPriorityDisinherit>
 800310c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	609a      	str	r2, [r3, #8]
 8003114:	e043      	b.n	800319e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d119      	bne.n	8003150 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6858      	ldr	r0, [r3, #4]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	461a      	mov	r2, r3
 8003126:	68b9      	ldr	r1, [r7, #8]
 8003128:	f001 fcc4 	bl	8004ab4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	441a      	add	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	429a      	cmp	r2, r3
 8003144:	d32b      	bcc.n	800319e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	e026      	b.n	800319e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	68d8      	ldr	r0, [r3, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	461a      	mov	r2, r3
 800315a:	68b9      	ldr	r1, [r7, #8]
 800315c:	f001 fcaa 	bl	8004ab4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	425b      	negs	r3, r3
 800316a:	441a      	add	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	68da      	ldr	r2, [r3, #12]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	429a      	cmp	r2, r3
 800317a:	d207      	bcs.n	800318c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	425b      	negs	r3, r3
 8003186:	441a      	add	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d105      	bne.n	800319e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d002      	beq.n	800319e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	3b01      	subs	r3, #1
 800319c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80031a6:	697b      	ldr	r3, [r7, #20]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80031b8:	f001 f98c 	bl	80044d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80031c4:	e011      	b.n	80031ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d012      	beq.n	80031f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	3324      	adds	r3, #36	; 0x24
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 fc76 	bl	8003ac4 <xTaskRemoveFromEventList>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80031de:	f000 fd4b 	bl	8003c78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
 80031e4:	3b01      	subs	r3, #1
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80031ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	dce9      	bgt.n	80031c6 <prvUnlockQueue+0x16>
 80031f2:	e000      	b.n	80031f6 <prvUnlockQueue+0x46>
					break;
 80031f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	22ff      	movs	r2, #255	; 0xff
 80031fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80031fe:	f001 f999 	bl	8004534 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003202:	f001 f967 	bl	80044d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800320c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800320e:	e011      	b.n	8003234 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d012      	beq.n	800323e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3310      	adds	r3, #16
 800321c:	4618      	mov	r0, r3
 800321e:	f000 fc51 	bl	8003ac4 <xTaskRemoveFromEventList>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003228:	f000 fd26 	bl	8003c78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800322c:	7bbb      	ldrb	r3, [r7, #14]
 800322e:	3b01      	subs	r3, #1
 8003230:	b2db      	uxtb	r3, r3
 8003232:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003234:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003238:	2b00      	cmp	r3, #0
 800323a:	dce9      	bgt.n	8003210 <prvUnlockQueue+0x60>
 800323c:	e000      	b.n	8003240 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800323e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	22ff      	movs	r2, #255	; 0xff
 8003244:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003248:	f001 f974 	bl	8004534 <vPortExitCritical>
}
 800324c:	bf00      	nop
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800325c:	f001 f93a 	bl	80044d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003264:	2b00      	cmp	r3, #0
 8003266:	d102      	bne.n	800326e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003268:	2301      	movs	r3, #1
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	e001      	b.n	8003272 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003272:	f001 f95f 	bl	8004534 <vPortExitCritical>

	return xReturn;
 8003276:	68fb      	ldr	r3, [r7, #12]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003288:	f001 f924 	bl	80044d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003294:	429a      	cmp	r2, r3
 8003296:	d102      	bne.n	800329e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003298:	2301      	movs	r3, #1
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	e001      	b.n	80032a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80032a2:	f001 f947 	bl	8004534 <vPortExitCritical>

	return xReturn;
 80032a6:	68fb      	ldr	r3, [r7, #12]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08e      	sub	sp, #56	; 0x38
 80032b4:	af04      	add	r7, sp, #16
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80032be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10a      	bne.n	80032da <xTaskCreateStatic+0x2a>
	__asm volatile
 80032c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c8:	f383 8811 	msr	BASEPRI, r3
 80032cc:	f3bf 8f6f 	isb	sy
 80032d0:	f3bf 8f4f 	dsb	sy
 80032d4:	623b      	str	r3, [r7, #32]
}
 80032d6:	bf00      	nop
 80032d8:	e7fe      	b.n	80032d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80032da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10a      	bne.n	80032f6 <xTaskCreateStatic+0x46>
	__asm volatile
 80032e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e4:	f383 8811 	msr	BASEPRI, r3
 80032e8:	f3bf 8f6f 	isb	sy
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	61fb      	str	r3, [r7, #28]
}
 80032f2:	bf00      	nop
 80032f4:	e7fe      	b.n	80032f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80032f6:	2354      	movs	r3, #84	; 0x54
 80032f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	2b54      	cmp	r3, #84	; 0x54
 80032fe:	d00a      	beq.n	8003316 <xTaskCreateStatic+0x66>
	__asm volatile
 8003300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003304:	f383 8811 	msr	BASEPRI, r3
 8003308:	f3bf 8f6f 	isb	sy
 800330c:	f3bf 8f4f 	dsb	sy
 8003310:	61bb      	str	r3, [r7, #24]
}
 8003312:	bf00      	nop
 8003314:	e7fe      	b.n	8003314 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003316:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331a:	2b00      	cmp	r3, #0
 800331c:	d01e      	beq.n	800335c <xTaskCreateStatic+0xac>
 800331e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003320:	2b00      	cmp	r3, #0
 8003322:	d01b      	beq.n	800335c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800332c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	2202      	movs	r2, #2
 8003332:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003336:	2300      	movs	r3, #0
 8003338:	9303      	str	r3, [sp, #12]
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	9302      	str	r3, [sp, #8]
 800333e:	f107 0314 	add.w	r3, r7, #20
 8003342:	9301      	str	r3, [sp, #4]
 8003344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	68b9      	ldr	r1, [r7, #8]
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f850 	bl	80033f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003354:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003356:	f000 f8d5 	bl	8003504 <prvAddNewTaskToReadyList>
 800335a:	e001      	b.n	8003360 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003360:	697b      	ldr	r3, [r7, #20]
	}
 8003362:	4618      	mov	r0, r3
 8003364:	3728      	adds	r7, #40	; 0x28
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800336a:	b580      	push	{r7, lr}
 800336c:	b08c      	sub	sp, #48	; 0x30
 800336e:	af04      	add	r7, sp, #16
 8003370:	60f8      	str	r0, [r7, #12]
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	603b      	str	r3, [r7, #0]
 8003376:	4613      	mov	r3, r2
 8003378:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800337a:	88fb      	ldrh	r3, [r7, #6]
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4618      	mov	r0, r3
 8003380:	f001 f98a 	bl	8004698 <pvPortMalloc>
 8003384:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00e      	beq.n	80033aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800338c:	2054      	movs	r0, #84	; 0x54
 800338e:	f001 f983 	bl	8004698 <pvPortMalloc>
 8003392:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	631a      	str	r2, [r3, #48]	; 0x30
 80033a0:	e005      	b.n	80033ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80033a2:	6978      	ldr	r0, [r7, #20]
 80033a4:	f001 fa44 	bl	8004830 <vPortFree>
 80033a8:	e001      	b.n	80033ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80033aa:	2300      	movs	r3, #0
 80033ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d017      	beq.n	80033e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80033bc:	88fa      	ldrh	r2, [r7, #6]
 80033be:	2300      	movs	r3, #0
 80033c0:	9303      	str	r3, [sp, #12]
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	9302      	str	r3, [sp, #8]
 80033c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c8:	9301      	str	r3, [sp, #4]
 80033ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 f80e 	bl	80033f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033d8:	69f8      	ldr	r0, [r7, #28]
 80033da:	f000 f893 	bl	8003504 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80033de:	2301      	movs	r3, #1
 80033e0:	61bb      	str	r3, [r7, #24]
 80033e2:	e002      	b.n	80033ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80033e4:	f04f 33ff 	mov.w	r3, #4294967295
 80033e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80033ea:	69bb      	ldr	r3, [r7, #24]
	}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3720      	adds	r7, #32
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b088      	sub	sp, #32
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
 8003400:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800340c:	3b01      	subs	r3, #1
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	f023 0307 	bic.w	r3, r3, #7
 800341a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00a      	beq.n	800343c <prvInitialiseNewTask+0x48>
	__asm volatile
 8003426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342a:	f383 8811 	msr	BASEPRI, r3
 800342e:	f3bf 8f6f 	isb	sy
 8003432:	f3bf 8f4f 	dsb	sy
 8003436:	617b      	str	r3, [r7, #20]
}
 8003438:	bf00      	nop
 800343a:	e7fe      	b.n	800343a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d01f      	beq.n	8003482 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003442:	2300      	movs	r3, #0
 8003444:	61fb      	str	r3, [r7, #28]
 8003446:	e012      	b.n	800346e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	4413      	add	r3, r2
 800344e:	7819      	ldrb	r1, [r3, #0]
 8003450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	4413      	add	r3, r2
 8003456:	3334      	adds	r3, #52	; 0x34
 8003458:	460a      	mov	r2, r1
 800345a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	4413      	add	r3, r2
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d006      	beq.n	8003476 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	3301      	adds	r3, #1
 800346c:	61fb      	str	r3, [r7, #28]
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	2b0f      	cmp	r3, #15
 8003472:	d9e9      	bls.n	8003448 <prvInitialiseNewTask+0x54>
 8003474:	e000      	b.n	8003478 <prvInitialiseNewTask+0x84>
			{
				break;
 8003476:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003480:	e003      	b.n	800348a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800348a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348c:	2b06      	cmp	r3, #6
 800348e:	d901      	bls.n	8003494 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003490:	2306      	movs	r3, #6
 8003492:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003496:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003498:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800349a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800349e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80034a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a2:	2200      	movs	r2, #0
 80034a4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80034a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a8:	3304      	adds	r3, #4
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7ff fa25 	bl	80028fa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80034b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b2:	3318      	adds	r3, #24
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff fa20 	bl	80028fa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80034ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c2:	f1c3 0207 	rsb	r2, r3, #7
 80034c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80034ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80034d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d2:	2200      	movs	r2, #0
 80034d4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80034d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	68f9      	ldr	r1, [r7, #12]
 80034e2:	69b8      	ldr	r0, [r7, #24]
 80034e4:	f000 fecc 	bl	8004280 <pxPortInitialiseStack>
 80034e8:	4602      	mov	r2, r0
 80034ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80034ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80034f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034fa:	bf00      	nop
 80034fc:	3720      	adds	r7, #32
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
	...

08003504 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800350c:	f000 ffe2 	bl	80044d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003510:	4b2a      	ldr	r3, [pc, #168]	; (80035bc <prvAddNewTaskToReadyList+0xb8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	3301      	adds	r3, #1
 8003516:	4a29      	ldr	r2, [pc, #164]	; (80035bc <prvAddNewTaskToReadyList+0xb8>)
 8003518:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800351a:	4b29      	ldr	r3, [pc, #164]	; (80035c0 <prvAddNewTaskToReadyList+0xbc>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d109      	bne.n	8003536 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003522:	4a27      	ldr	r2, [pc, #156]	; (80035c0 <prvAddNewTaskToReadyList+0xbc>)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003528:	4b24      	ldr	r3, [pc, #144]	; (80035bc <prvAddNewTaskToReadyList+0xb8>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d110      	bne.n	8003552 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003530:	f000 fbc6 	bl	8003cc0 <prvInitialiseTaskLists>
 8003534:	e00d      	b.n	8003552 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003536:	4b23      	ldr	r3, [pc, #140]	; (80035c4 <prvAddNewTaskToReadyList+0xc0>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d109      	bne.n	8003552 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800353e:	4b20      	ldr	r3, [pc, #128]	; (80035c0 <prvAddNewTaskToReadyList+0xbc>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003548:	429a      	cmp	r2, r3
 800354a:	d802      	bhi.n	8003552 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800354c:	4a1c      	ldr	r2, [pc, #112]	; (80035c0 <prvAddNewTaskToReadyList+0xbc>)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003552:	4b1d      	ldr	r3, [pc, #116]	; (80035c8 <prvAddNewTaskToReadyList+0xc4>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	3301      	adds	r3, #1
 8003558:	4a1b      	ldr	r2, [pc, #108]	; (80035c8 <prvAddNewTaskToReadyList+0xc4>)
 800355a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003560:	2201      	movs	r2, #1
 8003562:	409a      	lsls	r2, r3
 8003564:	4b19      	ldr	r3, [pc, #100]	; (80035cc <prvAddNewTaskToReadyList+0xc8>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4313      	orrs	r3, r2
 800356a:	4a18      	ldr	r2, [pc, #96]	; (80035cc <prvAddNewTaskToReadyList+0xc8>)
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4a15      	ldr	r2, [pc, #84]	; (80035d0 <prvAddNewTaskToReadyList+0xcc>)
 800357c:	441a      	add	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	3304      	adds	r3, #4
 8003582:	4619      	mov	r1, r3
 8003584:	4610      	mov	r0, r2
 8003586:	f7ff f9c5 	bl	8002914 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800358a:	f000 ffd3 	bl	8004534 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800358e:	4b0d      	ldr	r3, [pc, #52]	; (80035c4 <prvAddNewTaskToReadyList+0xc0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00e      	beq.n	80035b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003596:	4b0a      	ldr	r3, [pc, #40]	; (80035c0 <prvAddNewTaskToReadyList+0xbc>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d207      	bcs.n	80035b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80035a4:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <prvAddNewTaskToReadyList+0xd0>)
 80035a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035b4:	bf00      	nop
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	2000069c 	.word	0x2000069c
 80035c0:	2000059c 	.word	0x2000059c
 80035c4:	200006a8 	.word	0x200006a8
 80035c8:	200006b8 	.word	0x200006b8
 80035cc:	200006a4 	.word	0x200006a4
 80035d0:	200005a0 	.word	0x200005a0
 80035d4:	e000ed04 	.word	0xe000ed04

080035d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80035e0:	2300      	movs	r3, #0
 80035e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d017      	beq.n	800361a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80035ea:	4b13      	ldr	r3, [pc, #76]	; (8003638 <vTaskDelay+0x60>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00a      	beq.n	8003608 <vTaskDelay+0x30>
	__asm volatile
 80035f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f6:	f383 8811 	msr	BASEPRI, r3
 80035fa:	f3bf 8f6f 	isb	sy
 80035fe:	f3bf 8f4f 	dsb	sy
 8003602:	60bb      	str	r3, [r7, #8]
}
 8003604:	bf00      	nop
 8003606:	e7fe      	b.n	8003606 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003608:	f000 f87a 	bl	8003700 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800360c:	2100      	movs	r1, #0
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 fdd0 	bl	80041b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003614:	f000 f882 	bl	800371c <xTaskResumeAll>
 8003618:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d107      	bne.n	8003630 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003620:	4b06      	ldr	r3, [pc, #24]	; (800363c <vTaskDelay+0x64>)
 8003622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003630:	bf00      	nop
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	200006c4 	.word	0x200006c4
 800363c:	e000ed04 	.word	0xe000ed04

08003640 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b08a      	sub	sp, #40	; 0x28
 8003644:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003646:	2300      	movs	r3, #0
 8003648:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800364a:	2300      	movs	r3, #0
 800364c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800364e:	463a      	mov	r2, r7
 8003650:	1d39      	adds	r1, r7, #4
 8003652:	f107 0308 	add.w	r3, r7, #8
 8003656:	4618      	mov	r0, r3
 8003658:	f7fc fdc2 	bl	80001e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800365c:	6839      	ldr	r1, [r7, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	9202      	str	r2, [sp, #8]
 8003664:	9301      	str	r3, [sp, #4]
 8003666:	2300      	movs	r3, #0
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	2300      	movs	r3, #0
 800366c:	460a      	mov	r2, r1
 800366e:	491e      	ldr	r1, [pc, #120]	; (80036e8 <vTaskStartScheduler+0xa8>)
 8003670:	481e      	ldr	r0, [pc, #120]	; (80036ec <vTaskStartScheduler+0xac>)
 8003672:	f7ff fe1d 	bl	80032b0 <xTaskCreateStatic>
 8003676:	4603      	mov	r3, r0
 8003678:	4a1d      	ldr	r2, [pc, #116]	; (80036f0 <vTaskStartScheduler+0xb0>)
 800367a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800367c:	4b1c      	ldr	r3, [pc, #112]	; (80036f0 <vTaskStartScheduler+0xb0>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d002      	beq.n	800368a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003684:	2301      	movs	r3, #1
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	e001      	b.n	800368e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800368a:	2300      	movs	r3, #0
 800368c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d116      	bne.n	80036c2 <vTaskStartScheduler+0x82>
	__asm volatile
 8003694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003698:	f383 8811 	msr	BASEPRI, r3
 800369c:	f3bf 8f6f 	isb	sy
 80036a0:	f3bf 8f4f 	dsb	sy
 80036a4:	613b      	str	r3, [r7, #16]
}
 80036a6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80036a8:	4b12      	ldr	r3, [pc, #72]	; (80036f4 <vTaskStartScheduler+0xb4>)
 80036aa:	f04f 32ff 	mov.w	r2, #4294967295
 80036ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80036b0:	4b11      	ldr	r3, [pc, #68]	; (80036f8 <vTaskStartScheduler+0xb8>)
 80036b2:	2201      	movs	r2, #1
 80036b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80036b6:	4b11      	ldr	r3, [pc, #68]	; (80036fc <vTaskStartScheduler+0xbc>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80036bc:	f000 fe68 	bl	8004390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80036c0:	e00e      	b.n	80036e0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c8:	d10a      	bne.n	80036e0 <vTaskStartScheduler+0xa0>
	__asm volatile
 80036ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ce:	f383 8811 	msr	BASEPRI, r3
 80036d2:	f3bf 8f6f 	isb	sy
 80036d6:	f3bf 8f4f 	dsb	sy
 80036da:	60fb      	str	r3, [r7, #12]
}
 80036dc:	bf00      	nop
 80036de:	e7fe      	b.n	80036de <vTaskStartScheduler+0x9e>
}
 80036e0:	bf00      	nop
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	08004b64 	.word	0x08004b64
 80036ec:	08003c91 	.word	0x08003c91
 80036f0:	200006c0 	.word	0x200006c0
 80036f4:	200006bc 	.word	0x200006bc
 80036f8:	200006a8 	.word	0x200006a8
 80036fc:	200006a0 	.word	0x200006a0

08003700 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003704:	4b04      	ldr	r3, [pc, #16]	; (8003718 <vTaskSuspendAll+0x18>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	3301      	adds	r3, #1
 800370a:	4a03      	ldr	r2, [pc, #12]	; (8003718 <vTaskSuspendAll+0x18>)
 800370c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800370e:	bf00      	nop
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	200006c4 	.word	0x200006c4

0800371c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003722:	2300      	movs	r3, #0
 8003724:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003726:	2300      	movs	r3, #0
 8003728:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800372a:	4b41      	ldr	r3, [pc, #260]	; (8003830 <xTaskResumeAll+0x114>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10a      	bne.n	8003748 <xTaskResumeAll+0x2c>
	__asm volatile
 8003732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003736:	f383 8811 	msr	BASEPRI, r3
 800373a:	f3bf 8f6f 	isb	sy
 800373e:	f3bf 8f4f 	dsb	sy
 8003742:	603b      	str	r3, [r7, #0]
}
 8003744:	bf00      	nop
 8003746:	e7fe      	b.n	8003746 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003748:	f000 fec4 	bl	80044d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800374c:	4b38      	ldr	r3, [pc, #224]	; (8003830 <xTaskResumeAll+0x114>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	3b01      	subs	r3, #1
 8003752:	4a37      	ldr	r2, [pc, #220]	; (8003830 <xTaskResumeAll+0x114>)
 8003754:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003756:	4b36      	ldr	r3, [pc, #216]	; (8003830 <xTaskResumeAll+0x114>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d161      	bne.n	8003822 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800375e:	4b35      	ldr	r3, [pc, #212]	; (8003834 <xTaskResumeAll+0x118>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d05d      	beq.n	8003822 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003766:	e02e      	b.n	80037c6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003768:	4b33      	ldr	r3, [pc, #204]	; (8003838 <xTaskResumeAll+0x11c>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	3318      	adds	r3, #24
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff f92a 	bl	80029ce <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	3304      	adds	r3, #4
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff f925 	bl	80029ce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003788:	2201      	movs	r2, #1
 800378a:	409a      	lsls	r2, r3
 800378c:	4b2b      	ldr	r3, [pc, #172]	; (800383c <xTaskResumeAll+0x120>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4313      	orrs	r3, r2
 8003792:	4a2a      	ldr	r2, [pc, #168]	; (800383c <xTaskResumeAll+0x120>)
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800379a:	4613      	mov	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4a27      	ldr	r2, [pc, #156]	; (8003840 <xTaskResumeAll+0x124>)
 80037a4:	441a      	add	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	3304      	adds	r3, #4
 80037aa:	4619      	mov	r1, r3
 80037ac:	4610      	mov	r0, r2
 80037ae:	f7ff f8b1 	bl	8002914 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b6:	4b23      	ldr	r3, [pc, #140]	; (8003844 <xTaskResumeAll+0x128>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037bc:	429a      	cmp	r2, r3
 80037be:	d302      	bcc.n	80037c6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80037c0:	4b21      	ldr	r3, [pc, #132]	; (8003848 <xTaskResumeAll+0x12c>)
 80037c2:	2201      	movs	r2, #1
 80037c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037c6:	4b1c      	ldr	r3, [pc, #112]	; (8003838 <xTaskResumeAll+0x11c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1cc      	bne.n	8003768 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80037d4:	f000 fb12 	bl	8003dfc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80037d8:	4b1c      	ldr	r3, [pc, #112]	; (800384c <xTaskResumeAll+0x130>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d010      	beq.n	8003806 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80037e4:	f000 f836 	bl	8003854 <xTaskIncrementTick>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80037ee:	4b16      	ldr	r3, [pc, #88]	; (8003848 <xTaskResumeAll+0x12c>)
 80037f0:	2201      	movs	r2, #1
 80037f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3b01      	subs	r3, #1
 80037f8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1f1      	bne.n	80037e4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003800:	4b12      	ldr	r3, [pc, #72]	; (800384c <xTaskResumeAll+0x130>)
 8003802:	2200      	movs	r2, #0
 8003804:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003806:	4b10      	ldr	r3, [pc, #64]	; (8003848 <xTaskResumeAll+0x12c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d009      	beq.n	8003822 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800380e:	2301      	movs	r3, #1
 8003810:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003812:	4b0f      	ldr	r3, [pc, #60]	; (8003850 <xTaskResumeAll+0x134>)
 8003814:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	f3bf 8f4f 	dsb	sy
 800381e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003822:	f000 fe87 	bl	8004534 <vPortExitCritical>

	return xAlreadyYielded;
 8003826:	68bb      	ldr	r3, [r7, #8]
}
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	200006c4 	.word	0x200006c4
 8003834:	2000069c 	.word	0x2000069c
 8003838:	2000065c 	.word	0x2000065c
 800383c:	200006a4 	.word	0x200006a4
 8003840:	200005a0 	.word	0x200005a0
 8003844:	2000059c 	.word	0x2000059c
 8003848:	200006b0 	.word	0x200006b0
 800384c:	200006ac 	.word	0x200006ac
 8003850:	e000ed04 	.word	0xe000ed04

08003854 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800385a:	2300      	movs	r3, #0
 800385c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800385e:	4b4e      	ldr	r3, [pc, #312]	; (8003998 <xTaskIncrementTick+0x144>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	f040 808e 	bne.w	8003984 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003868:	4b4c      	ldr	r3, [pc, #304]	; (800399c <xTaskIncrementTick+0x148>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3301      	adds	r3, #1
 800386e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003870:	4a4a      	ldr	r2, [pc, #296]	; (800399c <xTaskIncrementTick+0x148>)
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d120      	bne.n	80038be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800387c:	4b48      	ldr	r3, [pc, #288]	; (80039a0 <xTaskIncrementTick+0x14c>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00a      	beq.n	800389c <xTaskIncrementTick+0x48>
	__asm volatile
 8003886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388a:	f383 8811 	msr	BASEPRI, r3
 800388e:	f3bf 8f6f 	isb	sy
 8003892:	f3bf 8f4f 	dsb	sy
 8003896:	603b      	str	r3, [r7, #0]
}
 8003898:	bf00      	nop
 800389a:	e7fe      	b.n	800389a <xTaskIncrementTick+0x46>
 800389c:	4b40      	ldr	r3, [pc, #256]	; (80039a0 <xTaskIncrementTick+0x14c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	4b40      	ldr	r3, [pc, #256]	; (80039a4 <xTaskIncrementTick+0x150>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a3e      	ldr	r2, [pc, #248]	; (80039a0 <xTaskIncrementTick+0x14c>)
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	4a3e      	ldr	r2, [pc, #248]	; (80039a4 <xTaskIncrementTick+0x150>)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6013      	str	r3, [r2, #0]
 80038b0:	4b3d      	ldr	r3, [pc, #244]	; (80039a8 <xTaskIncrementTick+0x154>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	3301      	adds	r3, #1
 80038b6:	4a3c      	ldr	r2, [pc, #240]	; (80039a8 <xTaskIncrementTick+0x154>)
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	f000 fa9f 	bl	8003dfc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80038be:	4b3b      	ldr	r3, [pc, #236]	; (80039ac <xTaskIncrementTick+0x158>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d348      	bcc.n	800395a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038c8:	4b35      	ldr	r3, [pc, #212]	; (80039a0 <xTaskIncrementTick+0x14c>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d104      	bne.n	80038dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038d2:	4b36      	ldr	r3, [pc, #216]	; (80039ac <xTaskIncrementTick+0x158>)
 80038d4:	f04f 32ff 	mov.w	r2, #4294967295
 80038d8:	601a      	str	r2, [r3, #0]
					break;
 80038da:	e03e      	b.n	800395a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038dc:	4b30      	ldr	r3, [pc, #192]	; (80039a0 <xTaskIncrementTick+0x14c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d203      	bcs.n	80038fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80038f4:	4a2d      	ldr	r2, [pc, #180]	; (80039ac <xTaskIncrementTick+0x158>)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80038fa:	e02e      	b.n	800395a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	3304      	adds	r3, #4
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff f864 	bl	80029ce <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	2b00      	cmp	r3, #0
 800390c:	d004      	beq.n	8003918 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	3318      	adds	r3, #24
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff f85b 	bl	80029ce <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391c:	2201      	movs	r2, #1
 800391e:	409a      	lsls	r2, r3
 8003920:	4b23      	ldr	r3, [pc, #140]	; (80039b0 <xTaskIncrementTick+0x15c>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4313      	orrs	r3, r2
 8003926:	4a22      	ldr	r2, [pc, #136]	; (80039b0 <xTaskIncrementTick+0x15c>)
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800392e:	4613      	mov	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4a1f      	ldr	r2, [pc, #124]	; (80039b4 <xTaskIncrementTick+0x160>)
 8003938:	441a      	add	r2, r3
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	3304      	adds	r3, #4
 800393e:	4619      	mov	r1, r3
 8003940:	4610      	mov	r0, r2
 8003942:	f7fe ffe7 	bl	8002914 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800394a:	4b1b      	ldr	r3, [pc, #108]	; (80039b8 <xTaskIncrementTick+0x164>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003950:	429a      	cmp	r2, r3
 8003952:	d3b9      	bcc.n	80038c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003954:	2301      	movs	r3, #1
 8003956:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003958:	e7b6      	b.n	80038c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800395a:	4b17      	ldr	r3, [pc, #92]	; (80039b8 <xTaskIncrementTick+0x164>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003960:	4914      	ldr	r1, [pc, #80]	; (80039b4 <xTaskIncrementTick+0x160>)
 8003962:	4613      	mov	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4413      	add	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d901      	bls.n	8003976 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003972:	2301      	movs	r3, #1
 8003974:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003976:	4b11      	ldr	r3, [pc, #68]	; (80039bc <xTaskIncrementTick+0x168>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d007      	beq.n	800398e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800397e:	2301      	movs	r3, #1
 8003980:	617b      	str	r3, [r7, #20]
 8003982:	e004      	b.n	800398e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003984:	4b0e      	ldr	r3, [pc, #56]	; (80039c0 <xTaskIncrementTick+0x16c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	3301      	adds	r3, #1
 800398a:	4a0d      	ldr	r2, [pc, #52]	; (80039c0 <xTaskIncrementTick+0x16c>)
 800398c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800398e:	697b      	ldr	r3, [r7, #20]
}
 8003990:	4618      	mov	r0, r3
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	200006c4 	.word	0x200006c4
 800399c:	200006a0 	.word	0x200006a0
 80039a0:	20000654 	.word	0x20000654
 80039a4:	20000658 	.word	0x20000658
 80039a8:	200006b4 	.word	0x200006b4
 80039ac:	200006bc 	.word	0x200006bc
 80039b0:	200006a4 	.word	0x200006a4
 80039b4:	200005a0 	.word	0x200005a0
 80039b8:	2000059c 	.word	0x2000059c
 80039bc:	200006b0 	.word	0x200006b0
 80039c0:	200006ac 	.word	0x200006ac

080039c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80039c4:	b480      	push	{r7}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80039ca:	4b27      	ldr	r3, [pc, #156]	; (8003a68 <vTaskSwitchContext+0xa4>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80039d2:	4b26      	ldr	r3, [pc, #152]	; (8003a6c <vTaskSwitchContext+0xa8>)
 80039d4:	2201      	movs	r2, #1
 80039d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80039d8:	e03f      	b.n	8003a5a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80039da:	4b24      	ldr	r3, [pc, #144]	; (8003a6c <vTaskSwitchContext+0xa8>)
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039e0:	4b23      	ldr	r3, [pc, #140]	; (8003a70 <vTaskSwitchContext+0xac>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	fab3 f383 	clz	r3, r3
 80039ec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80039ee:	7afb      	ldrb	r3, [r7, #11]
 80039f0:	f1c3 031f 	rsb	r3, r3, #31
 80039f4:	617b      	str	r3, [r7, #20]
 80039f6:	491f      	ldr	r1, [pc, #124]	; (8003a74 <vTaskSwitchContext+0xb0>)
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	440b      	add	r3, r1
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10a      	bne.n	8003a20 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0e:	f383 8811 	msr	BASEPRI, r3
 8003a12:	f3bf 8f6f 	isb	sy
 8003a16:	f3bf 8f4f 	dsb	sy
 8003a1a:	607b      	str	r3, [r7, #4]
}
 8003a1c:	bf00      	nop
 8003a1e:	e7fe      	b.n	8003a1e <vTaskSwitchContext+0x5a>
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	4613      	mov	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4413      	add	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4a12      	ldr	r2, [pc, #72]	; (8003a74 <vTaskSwitchContext+0xb0>)
 8003a2c:	4413      	add	r3, r2
 8003a2e:	613b      	str	r3, [r7, #16]
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	605a      	str	r2, [r3, #4]
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	3308      	adds	r3, #8
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d104      	bne.n	8003a50 <vTaskSwitchContext+0x8c>
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	605a      	str	r2, [r3, #4]
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	4a08      	ldr	r2, [pc, #32]	; (8003a78 <vTaskSwitchContext+0xb4>)
 8003a58:	6013      	str	r3, [r2, #0]
}
 8003a5a:	bf00      	nop
 8003a5c:	371c      	adds	r7, #28
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	200006c4 	.word	0x200006c4
 8003a6c:	200006b0 	.word	0x200006b0
 8003a70:	200006a4 	.word	0x200006a4
 8003a74:	200005a0 	.word	0x200005a0
 8003a78:	2000059c 	.word	0x2000059c

08003a7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10a      	bne.n	8003aa2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a90:	f383 8811 	msr	BASEPRI, r3
 8003a94:	f3bf 8f6f 	isb	sy
 8003a98:	f3bf 8f4f 	dsb	sy
 8003a9c:	60fb      	str	r3, [r7, #12]
}
 8003a9e:	bf00      	nop
 8003aa0:	e7fe      	b.n	8003aa0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003aa2:	4b07      	ldr	r3, [pc, #28]	; (8003ac0 <vTaskPlaceOnEventList+0x44>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3318      	adds	r3, #24
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7fe ff56 	bl	800295c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	6838      	ldr	r0, [r7, #0]
 8003ab4:	f000 fb7e 	bl	80041b4 <prvAddCurrentTaskToDelayedList>
}
 8003ab8:	bf00      	nop
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	2000059c 	.word	0x2000059c

08003ac4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10a      	bne.n	8003af0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ade:	f383 8811 	msr	BASEPRI, r3
 8003ae2:	f3bf 8f6f 	isb	sy
 8003ae6:	f3bf 8f4f 	dsb	sy
 8003aea:	60fb      	str	r3, [r7, #12]
}
 8003aec:	bf00      	nop
 8003aee:	e7fe      	b.n	8003aee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	3318      	adds	r3, #24
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fe ff6a 	bl	80029ce <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003afa:	4b1d      	ldr	r3, [pc, #116]	; (8003b70 <xTaskRemoveFromEventList+0xac>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d11c      	bne.n	8003b3c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	3304      	adds	r3, #4
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fe ff61 	bl	80029ce <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b10:	2201      	movs	r2, #1
 8003b12:	409a      	lsls	r2, r3
 8003b14:	4b17      	ldr	r3, [pc, #92]	; (8003b74 <xTaskRemoveFromEventList+0xb0>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	4a16      	ldr	r2, [pc, #88]	; (8003b74 <xTaskRemoveFromEventList+0xb0>)
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b22:	4613      	mov	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4a13      	ldr	r2, [pc, #76]	; (8003b78 <xTaskRemoveFromEventList+0xb4>)
 8003b2c:	441a      	add	r2, r3
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	3304      	adds	r3, #4
 8003b32:	4619      	mov	r1, r3
 8003b34:	4610      	mov	r0, r2
 8003b36:	f7fe feed 	bl	8002914 <vListInsertEnd>
 8003b3a:	e005      	b.n	8003b48 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	3318      	adds	r3, #24
 8003b40:	4619      	mov	r1, r3
 8003b42:	480e      	ldr	r0, [pc, #56]	; (8003b7c <xTaskRemoveFromEventList+0xb8>)
 8003b44:	f7fe fee6 	bl	8002914 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b4c:	4b0c      	ldr	r3, [pc, #48]	; (8003b80 <xTaskRemoveFromEventList+0xbc>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d905      	bls.n	8003b62 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003b56:	2301      	movs	r3, #1
 8003b58:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003b5a:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <xTaskRemoveFromEventList+0xc0>)
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	e001      	b.n	8003b66 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003b62:	2300      	movs	r3, #0
 8003b64:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003b66:	697b      	ldr	r3, [r7, #20]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3718      	adds	r7, #24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	200006c4 	.word	0x200006c4
 8003b74:	200006a4 	.word	0x200006a4
 8003b78:	200005a0 	.word	0x200005a0
 8003b7c:	2000065c 	.word	0x2000065c
 8003b80:	2000059c 	.word	0x2000059c
 8003b84:	200006b0 	.word	0x200006b0

08003b88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b90:	4b06      	ldr	r3, [pc, #24]	; (8003bac <vTaskInternalSetTimeOutState+0x24>)
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003b98:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <vTaskInternalSetTimeOutState+0x28>)
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	605a      	str	r2, [r3, #4]
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	200006b4 	.word	0x200006b4
 8003bb0:	200006a0 	.word	0x200006a0

08003bb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b088      	sub	sp, #32
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10a      	bne.n	8003bda <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	613b      	str	r3, [r7, #16]
}
 8003bd6:	bf00      	nop
 8003bd8:	e7fe      	b.n	8003bd8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10a      	bne.n	8003bf6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be4:	f383 8811 	msr	BASEPRI, r3
 8003be8:	f3bf 8f6f 	isb	sy
 8003bec:	f3bf 8f4f 	dsb	sy
 8003bf0:	60fb      	str	r3, [r7, #12]
}
 8003bf2:	bf00      	nop
 8003bf4:	e7fe      	b.n	8003bf4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003bf6:	f000 fc6d 	bl	80044d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003bfa:	4b1d      	ldr	r3, [pc, #116]	; (8003c70 <xTaskCheckForTimeOut+0xbc>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c12:	d102      	bne.n	8003c1a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003c14:	2300      	movs	r3, #0
 8003c16:	61fb      	str	r3, [r7, #28]
 8003c18:	e023      	b.n	8003c62 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	4b15      	ldr	r3, [pc, #84]	; (8003c74 <xTaskCheckForTimeOut+0xc0>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d007      	beq.n	8003c36 <xTaskCheckForTimeOut+0x82>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d302      	bcc.n	8003c36 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003c30:	2301      	movs	r3, #1
 8003c32:	61fb      	str	r3, [r7, #28]
 8003c34:	e015      	b.n	8003c62 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d20b      	bcs.n	8003c58 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	1ad2      	subs	r2, r2, r3
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7ff ff9b 	bl	8003b88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003c52:	2300      	movs	r3, #0
 8003c54:	61fb      	str	r3, [r7, #28]
 8003c56:	e004      	b.n	8003c62 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003c62:	f000 fc67 	bl	8004534 <vPortExitCritical>

	return xReturn;
 8003c66:	69fb      	ldr	r3, [r7, #28]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3720      	adds	r7, #32
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	200006a0 	.word	0x200006a0
 8003c74:	200006b4 	.word	0x200006b4

08003c78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003c7c:	4b03      	ldr	r3, [pc, #12]	; (8003c8c <vTaskMissedYield+0x14>)
 8003c7e:	2201      	movs	r2, #1
 8003c80:	601a      	str	r2, [r3, #0]
}
 8003c82:	bf00      	nop
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	200006b0 	.word	0x200006b0

08003c90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003c98:	f000 f852 	bl	8003d40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c9c:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <prvIdleTask+0x28>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d9f9      	bls.n	8003c98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003ca4:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <prvIdleTask+0x2c>)
 8003ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003cb4:	e7f0      	b.n	8003c98 <prvIdleTask+0x8>
 8003cb6:	bf00      	nop
 8003cb8:	200005a0 	.word	0x200005a0
 8003cbc:	e000ed04 	.word	0xe000ed04

08003cc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	607b      	str	r3, [r7, #4]
 8003cca:	e00c      	b.n	8003ce6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4a12      	ldr	r2, [pc, #72]	; (8003d20 <prvInitialiseTaskLists+0x60>)
 8003cd8:	4413      	add	r3, r2
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fe fded 	bl	80028ba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	607b      	str	r3, [r7, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b06      	cmp	r3, #6
 8003cea:	d9ef      	bls.n	8003ccc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003cec:	480d      	ldr	r0, [pc, #52]	; (8003d24 <prvInitialiseTaskLists+0x64>)
 8003cee:	f7fe fde4 	bl	80028ba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003cf2:	480d      	ldr	r0, [pc, #52]	; (8003d28 <prvInitialiseTaskLists+0x68>)
 8003cf4:	f7fe fde1 	bl	80028ba <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003cf8:	480c      	ldr	r0, [pc, #48]	; (8003d2c <prvInitialiseTaskLists+0x6c>)
 8003cfa:	f7fe fdde 	bl	80028ba <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003cfe:	480c      	ldr	r0, [pc, #48]	; (8003d30 <prvInitialiseTaskLists+0x70>)
 8003d00:	f7fe fddb 	bl	80028ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d04:	480b      	ldr	r0, [pc, #44]	; (8003d34 <prvInitialiseTaskLists+0x74>)
 8003d06:	f7fe fdd8 	bl	80028ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d0a:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <prvInitialiseTaskLists+0x78>)
 8003d0c:	4a05      	ldr	r2, [pc, #20]	; (8003d24 <prvInitialiseTaskLists+0x64>)
 8003d0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d10:	4b0a      	ldr	r3, [pc, #40]	; (8003d3c <prvInitialiseTaskLists+0x7c>)
 8003d12:	4a05      	ldr	r2, [pc, #20]	; (8003d28 <prvInitialiseTaskLists+0x68>)
 8003d14:	601a      	str	r2, [r3, #0]
}
 8003d16:	bf00      	nop
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	200005a0 	.word	0x200005a0
 8003d24:	2000062c 	.word	0x2000062c
 8003d28:	20000640 	.word	0x20000640
 8003d2c:	2000065c 	.word	0x2000065c
 8003d30:	20000670 	.word	0x20000670
 8003d34:	20000688 	.word	0x20000688
 8003d38:	20000654 	.word	0x20000654
 8003d3c:	20000658 	.word	0x20000658

08003d40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d46:	e019      	b.n	8003d7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003d48:	f000 fbc4 	bl	80044d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d4c:	4b10      	ldr	r3, [pc, #64]	; (8003d90 <prvCheckTasksWaitingTermination+0x50>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3304      	adds	r3, #4
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7fe fe38 	bl	80029ce <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003d5e:	4b0d      	ldr	r3, [pc, #52]	; (8003d94 <prvCheckTasksWaitingTermination+0x54>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	4a0b      	ldr	r2, [pc, #44]	; (8003d94 <prvCheckTasksWaitingTermination+0x54>)
 8003d66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d68:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <prvCheckTasksWaitingTermination+0x58>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	4a0a      	ldr	r2, [pc, #40]	; (8003d98 <prvCheckTasksWaitingTermination+0x58>)
 8003d70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003d72:	f000 fbdf 	bl	8004534 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f810 	bl	8003d9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d7c:	4b06      	ldr	r3, [pc, #24]	; (8003d98 <prvCheckTasksWaitingTermination+0x58>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1e1      	bne.n	8003d48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003d84:	bf00      	nop
 8003d86:	bf00      	nop
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	20000670 	.word	0x20000670
 8003d94:	2000069c 	.word	0x2000069c
 8003d98:	20000684 	.word	0x20000684

08003d9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d108      	bne.n	8003dc0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 fd3c 	bl	8004830 <vPortFree>
				vPortFree( pxTCB );
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 fd39 	bl	8004830 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003dbe:	e018      	b.n	8003df2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d103      	bne.n	8003dd2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 fd30 	bl	8004830 <vPortFree>
	}
 8003dd0:	e00f      	b.n	8003df2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d00a      	beq.n	8003df2 <prvDeleteTCB+0x56>
	__asm volatile
 8003ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de0:	f383 8811 	msr	BASEPRI, r3
 8003de4:	f3bf 8f6f 	isb	sy
 8003de8:	f3bf 8f4f 	dsb	sy
 8003dec:	60fb      	str	r3, [r7, #12]
}
 8003dee:	bf00      	nop
 8003df0:	e7fe      	b.n	8003df0 <prvDeleteTCB+0x54>
	}
 8003df2:	bf00      	nop
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
	...

08003dfc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e02:	4b0c      	ldr	r3, [pc, #48]	; (8003e34 <prvResetNextTaskUnblockTime+0x38>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d104      	bne.n	8003e16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e0c:	4b0a      	ldr	r3, [pc, #40]	; (8003e38 <prvResetNextTaskUnblockTime+0x3c>)
 8003e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e14:	e008      	b.n	8003e28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e16:	4b07      	ldr	r3, [pc, #28]	; (8003e34 <prvResetNextTaskUnblockTime+0x38>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	4a04      	ldr	r2, [pc, #16]	; (8003e38 <prvResetNextTaskUnblockTime+0x3c>)
 8003e26:	6013      	str	r3, [r2, #0]
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	20000654 	.word	0x20000654
 8003e38:	200006bc 	.word	0x200006bc

08003e3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003e42:	4b0b      	ldr	r3, [pc, #44]	; (8003e70 <xTaskGetSchedulerState+0x34>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d102      	bne.n	8003e50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	607b      	str	r3, [r7, #4]
 8003e4e:	e008      	b.n	8003e62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e50:	4b08      	ldr	r3, [pc, #32]	; (8003e74 <xTaskGetSchedulerState+0x38>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d102      	bne.n	8003e5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003e58:	2302      	movs	r3, #2
 8003e5a:	607b      	str	r3, [r7, #4]
 8003e5c:	e001      	b.n	8003e62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003e62:	687b      	ldr	r3, [r7, #4]
	}
 8003e64:	4618      	mov	r0, r3
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	200006a8 	.word	0x200006a8
 8003e74:	200006c4 	.word	0x200006c4

08003e78 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003e84:	2300      	movs	r3, #0
 8003e86:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d05e      	beq.n	8003f4c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e92:	4b31      	ldr	r3, [pc, #196]	; (8003f58 <xTaskPriorityInherit+0xe0>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d24e      	bcs.n	8003f3a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	db06      	blt.n	8003eb2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ea4:	4b2c      	ldr	r3, [pc, #176]	; (8003f58 <xTaskPriorityInherit+0xe0>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eaa:	f1c3 0207 	rsb	r2, r3, #7
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	6959      	ldr	r1, [r3, #20]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eba:	4613      	mov	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4a26      	ldr	r2, [pc, #152]	; (8003f5c <xTaskPriorityInherit+0xe4>)
 8003ec4:	4413      	add	r3, r2
 8003ec6:	4299      	cmp	r1, r3
 8003ec8:	d12f      	bne.n	8003f2a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	3304      	adds	r3, #4
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fe fd7d 	bl	80029ce <uxListRemove>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10a      	bne.n	8003ef0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	2201      	movs	r2, #1
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	43da      	mvns	r2, r3
 8003ee6:	4b1e      	ldr	r3, [pc, #120]	; (8003f60 <xTaskPriorityInherit+0xe8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4013      	ands	r3, r2
 8003eec:	4a1c      	ldr	r2, [pc, #112]	; (8003f60 <xTaskPriorityInherit+0xe8>)
 8003eee:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003ef0:	4b19      	ldr	r3, [pc, #100]	; (8003f58 <xTaskPriorityInherit+0xe0>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efe:	2201      	movs	r2, #1
 8003f00:	409a      	lsls	r2, r3
 8003f02:	4b17      	ldr	r3, [pc, #92]	; (8003f60 <xTaskPriorityInherit+0xe8>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	4a15      	ldr	r2, [pc, #84]	; (8003f60 <xTaskPriorityInherit+0xe8>)
 8003f0a:	6013      	str	r3, [r2, #0]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f10:	4613      	mov	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4413      	add	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4a10      	ldr	r2, [pc, #64]	; (8003f5c <xTaskPriorityInherit+0xe4>)
 8003f1a:	441a      	add	r2, r3
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	3304      	adds	r3, #4
 8003f20:	4619      	mov	r1, r3
 8003f22:	4610      	mov	r0, r2
 8003f24:	f7fe fcf6 	bl	8002914 <vListInsertEnd>
 8003f28:	e004      	b.n	8003f34 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003f2a:	4b0b      	ldr	r3, [pc, #44]	; (8003f58 <xTaskPriorityInherit+0xe0>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003f34:	2301      	movs	r3, #1
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	e008      	b.n	8003f4c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f3e:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <xTaskPriorityInherit+0xe0>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d201      	bcs.n	8003f4c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
	}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	2000059c 	.word	0x2000059c
 8003f5c:	200005a0 	.word	0x200005a0
 8003f60:	200006a4 	.word	0x200006a4

08003f64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003f70:	2300      	movs	r3, #0
 8003f72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d06e      	beq.n	8004058 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003f7a:	4b3a      	ldr	r3, [pc, #232]	; (8004064 <xTaskPriorityDisinherit+0x100>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d00a      	beq.n	8003f9a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f88:	f383 8811 	msr	BASEPRI, r3
 8003f8c:	f3bf 8f6f 	isb	sy
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	60fb      	str	r3, [r7, #12]
}
 8003f96:	bf00      	nop
 8003f98:	e7fe      	b.n	8003f98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10a      	bne.n	8003fb8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa6:	f383 8811 	msr	BASEPRI, r3
 8003faa:	f3bf 8f6f 	isb	sy
 8003fae:	f3bf 8f4f 	dsb	sy
 8003fb2:	60bb      	str	r3, [r7, #8]
}
 8003fb4:	bf00      	nop
 8003fb6:	e7fe      	b.n	8003fb6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fbc:	1e5a      	subs	r2, r3, #1
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d044      	beq.n	8004058 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d140      	bne.n	8004058 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	3304      	adds	r3, #4
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fe fcf7 	bl	80029ce <uxListRemove>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d115      	bne.n	8004012 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fea:	491f      	ldr	r1, [pc, #124]	; (8004068 <xTaskPriorityDisinherit+0x104>)
 8003fec:	4613      	mov	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10a      	bne.n	8004012 <xTaskPriorityDisinherit+0xae>
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	2201      	movs	r2, #1
 8004002:	fa02 f303 	lsl.w	r3, r2, r3
 8004006:	43da      	mvns	r2, r3
 8004008:	4b18      	ldr	r3, [pc, #96]	; (800406c <xTaskPriorityDisinherit+0x108>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4013      	ands	r3, r2
 800400e:	4a17      	ldr	r2, [pc, #92]	; (800406c <xTaskPriorityDisinherit+0x108>)
 8004010:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401e:	f1c3 0207 	rsb	r2, r3, #7
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402a:	2201      	movs	r2, #1
 800402c:	409a      	lsls	r2, r3
 800402e:	4b0f      	ldr	r3, [pc, #60]	; (800406c <xTaskPriorityDisinherit+0x108>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4313      	orrs	r3, r2
 8004034:	4a0d      	ldr	r2, [pc, #52]	; (800406c <xTaskPriorityDisinherit+0x108>)
 8004036:	6013      	str	r3, [r2, #0]
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800403c:	4613      	mov	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	4413      	add	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4a08      	ldr	r2, [pc, #32]	; (8004068 <xTaskPriorityDisinherit+0x104>)
 8004046:	441a      	add	r2, r3
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	3304      	adds	r3, #4
 800404c:	4619      	mov	r1, r3
 800404e:	4610      	mov	r0, r2
 8004050:	f7fe fc60 	bl	8002914 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004054:	2301      	movs	r3, #1
 8004056:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004058:	697b      	ldr	r3, [r7, #20]
	}
 800405a:	4618      	mov	r0, r3
 800405c:	3718      	adds	r7, #24
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	2000059c 	.word	0x2000059c
 8004068:	200005a0 	.word	0x200005a0
 800406c:	200006a4 	.word	0x200006a4

08004070 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004070:	b580      	push	{r7, lr}
 8004072:	b088      	sub	sp, #32
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800407e:	2301      	movs	r3, #1
 8004080:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d077      	beq.n	8004178 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10a      	bne.n	80040a6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004094:	f383 8811 	msr	BASEPRI, r3
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	60fb      	str	r3, [r7, #12]
}
 80040a2:	bf00      	nop
 80040a4:	e7fe      	b.n	80040a4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d902      	bls.n	80040b6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	61fb      	str	r3, [r7, #28]
 80040b4:	e002      	b.n	80040bc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ba:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c0:	69fa      	ldr	r2, [r7, #28]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d058      	beq.n	8004178 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d153      	bne.n	8004178 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80040d0:	4b2b      	ldr	r3, [pc, #172]	; (8004180 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d10a      	bne.n	80040f0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80040da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040de:	f383 8811 	msr	BASEPRI, r3
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	f3bf 8f4f 	dsb	sy
 80040ea:	60bb      	str	r3, [r7, #8]
}
 80040ec:	bf00      	nop
 80040ee:	e7fe      	b.n	80040ee <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	69fa      	ldr	r2, [r7, #28]
 80040fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	2b00      	cmp	r3, #0
 8004102:	db04      	blt.n	800410e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f1c3 0207 	rsb	r2, r3, #7
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	6959      	ldr	r1, [r3, #20]
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4613      	mov	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4a19      	ldr	r2, [pc, #100]	; (8004184 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800411e:	4413      	add	r3, r2
 8004120:	4299      	cmp	r1, r3
 8004122:	d129      	bne.n	8004178 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	3304      	adds	r3, #4
 8004128:	4618      	mov	r0, r3
 800412a:	f7fe fc50 	bl	80029ce <uxListRemove>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10a      	bne.n	800414a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004138:	2201      	movs	r2, #1
 800413a:	fa02 f303 	lsl.w	r3, r2, r3
 800413e:	43da      	mvns	r2, r3
 8004140:	4b11      	ldr	r3, [pc, #68]	; (8004188 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4013      	ands	r3, r2
 8004146:	4a10      	ldr	r2, [pc, #64]	; (8004188 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004148:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414e:	2201      	movs	r2, #1
 8004150:	409a      	lsls	r2, r3
 8004152:	4b0d      	ldr	r3, [pc, #52]	; (8004188 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4313      	orrs	r3, r2
 8004158:	4a0b      	ldr	r2, [pc, #44]	; (8004188 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800415a:	6013      	str	r3, [r2, #0]
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004160:	4613      	mov	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4a06      	ldr	r2, [pc, #24]	; (8004184 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800416a:	441a      	add	r2, r3
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	3304      	adds	r3, #4
 8004170:	4619      	mov	r1, r3
 8004172:	4610      	mov	r0, r2
 8004174:	f7fe fbce 	bl	8002914 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004178:	bf00      	nop
 800417a:	3720      	adds	r7, #32
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	2000059c 	.word	0x2000059c
 8004184:	200005a0 	.word	0x200005a0
 8004188:	200006a4 	.word	0x200006a4

0800418c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004190:	4b07      	ldr	r3, [pc, #28]	; (80041b0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d004      	beq.n	80041a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004198:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800419e:	3201      	adds	r2, #1
 80041a0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80041a2:	4b03      	ldr	r3, [pc, #12]	; (80041b0 <pvTaskIncrementMutexHeldCount+0x24>)
 80041a4:	681b      	ldr	r3, [r3, #0]
	}
 80041a6:	4618      	mov	r0, r3
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	2000059c 	.word	0x2000059c

080041b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80041be:	4b29      	ldr	r3, [pc, #164]	; (8004264 <prvAddCurrentTaskToDelayedList+0xb0>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041c4:	4b28      	ldr	r3, [pc, #160]	; (8004268 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3304      	adds	r3, #4
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fe fbff 	bl	80029ce <uxListRemove>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10b      	bne.n	80041ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80041d6:	4b24      	ldr	r3, [pc, #144]	; (8004268 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041dc:	2201      	movs	r2, #1
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	43da      	mvns	r2, r3
 80041e4:	4b21      	ldr	r3, [pc, #132]	; (800426c <prvAddCurrentTaskToDelayedList+0xb8>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4013      	ands	r3, r2
 80041ea:	4a20      	ldr	r2, [pc, #128]	; (800426c <prvAddCurrentTaskToDelayedList+0xb8>)
 80041ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f4:	d10a      	bne.n	800420c <prvAddCurrentTaskToDelayedList+0x58>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d007      	beq.n	800420c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041fc:	4b1a      	ldr	r3, [pc, #104]	; (8004268 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3304      	adds	r3, #4
 8004202:	4619      	mov	r1, r3
 8004204:	481a      	ldr	r0, [pc, #104]	; (8004270 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004206:	f7fe fb85 	bl	8002914 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800420a:	e026      	b.n	800425a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4413      	add	r3, r2
 8004212:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004214:	4b14      	ldr	r3, [pc, #80]	; (8004268 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	429a      	cmp	r2, r3
 8004222:	d209      	bcs.n	8004238 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004224:	4b13      	ldr	r3, [pc, #76]	; (8004274 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	4b0f      	ldr	r3, [pc, #60]	; (8004268 <prvAddCurrentTaskToDelayedList+0xb4>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3304      	adds	r3, #4
 800422e:	4619      	mov	r1, r3
 8004230:	4610      	mov	r0, r2
 8004232:	f7fe fb93 	bl	800295c <vListInsert>
}
 8004236:	e010      	b.n	800425a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004238:	4b0f      	ldr	r3, [pc, #60]	; (8004278 <prvAddCurrentTaskToDelayedList+0xc4>)
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	4b0a      	ldr	r3, [pc, #40]	; (8004268 <prvAddCurrentTaskToDelayedList+0xb4>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	3304      	adds	r3, #4
 8004242:	4619      	mov	r1, r3
 8004244:	4610      	mov	r0, r2
 8004246:	f7fe fb89 	bl	800295c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800424a:	4b0c      	ldr	r3, [pc, #48]	; (800427c <prvAddCurrentTaskToDelayedList+0xc8>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	429a      	cmp	r2, r3
 8004252:	d202      	bcs.n	800425a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004254:	4a09      	ldr	r2, [pc, #36]	; (800427c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	6013      	str	r3, [r2, #0]
}
 800425a:	bf00      	nop
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	200006a0 	.word	0x200006a0
 8004268:	2000059c 	.word	0x2000059c
 800426c:	200006a4 	.word	0x200006a4
 8004270:	20000688 	.word	0x20000688
 8004274:	20000658 	.word	0x20000658
 8004278:	20000654 	.word	0x20000654
 800427c:	200006bc 	.word	0x200006bc

08004280 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	3b04      	subs	r3, #4
 8004290:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004298:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	3b04      	subs	r3, #4
 800429e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f023 0201 	bic.w	r2, r3, #1
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	3b04      	subs	r3, #4
 80042ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80042b0:	4a0c      	ldr	r2, [pc, #48]	; (80042e4 <pxPortInitialiseStack+0x64>)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	3b14      	subs	r3, #20
 80042ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	3b04      	subs	r3, #4
 80042c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f06f 0202 	mvn.w	r2, #2
 80042ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	3b20      	subs	r3, #32
 80042d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80042d6:	68fb      	ldr	r3, [r7, #12]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	080042e9 	.word	0x080042e9

080042e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80042ee:	2300      	movs	r3, #0
 80042f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80042f2:	4b12      	ldr	r3, [pc, #72]	; (800433c <prvTaskExitError+0x54>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fa:	d00a      	beq.n	8004312 <prvTaskExitError+0x2a>
	__asm volatile
 80042fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004300:	f383 8811 	msr	BASEPRI, r3
 8004304:	f3bf 8f6f 	isb	sy
 8004308:	f3bf 8f4f 	dsb	sy
 800430c:	60fb      	str	r3, [r7, #12]
}
 800430e:	bf00      	nop
 8004310:	e7fe      	b.n	8004310 <prvTaskExitError+0x28>
	__asm volatile
 8004312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004316:	f383 8811 	msr	BASEPRI, r3
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	f3bf 8f4f 	dsb	sy
 8004322:	60bb      	str	r3, [r7, #8]
}
 8004324:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004326:	bf00      	nop
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0fc      	beq.n	8004328 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800432e:	bf00      	nop
 8004330:	bf00      	nop
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	2000000c 	.word	0x2000000c

08004340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004340:	4b07      	ldr	r3, [pc, #28]	; (8004360 <pxCurrentTCBConst2>)
 8004342:	6819      	ldr	r1, [r3, #0]
 8004344:	6808      	ldr	r0, [r1, #0]
 8004346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800434a:	f380 8809 	msr	PSP, r0
 800434e:	f3bf 8f6f 	isb	sy
 8004352:	f04f 0000 	mov.w	r0, #0
 8004356:	f380 8811 	msr	BASEPRI, r0
 800435a:	4770      	bx	lr
 800435c:	f3af 8000 	nop.w

08004360 <pxCurrentTCBConst2>:
 8004360:	2000059c 	.word	0x2000059c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004364:	bf00      	nop
 8004366:	bf00      	nop

08004368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004368:	4808      	ldr	r0, [pc, #32]	; (800438c <prvPortStartFirstTask+0x24>)
 800436a:	6800      	ldr	r0, [r0, #0]
 800436c:	6800      	ldr	r0, [r0, #0]
 800436e:	f380 8808 	msr	MSP, r0
 8004372:	f04f 0000 	mov.w	r0, #0
 8004376:	f380 8814 	msr	CONTROL, r0
 800437a:	b662      	cpsie	i
 800437c:	b661      	cpsie	f
 800437e:	f3bf 8f4f 	dsb	sy
 8004382:	f3bf 8f6f 	isb	sy
 8004386:	df00      	svc	0
 8004388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800438a:	bf00      	nop
 800438c:	e000ed08 	.word	0xe000ed08

08004390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004396:	4b46      	ldr	r3, [pc, #280]	; (80044b0 <xPortStartScheduler+0x120>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a46      	ldr	r2, [pc, #280]	; (80044b4 <xPortStartScheduler+0x124>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d10a      	bne.n	80043b6 <xPortStartScheduler+0x26>
	__asm volatile
 80043a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	613b      	str	r3, [r7, #16]
}
 80043b2:	bf00      	nop
 80043b4:	e7fe      	b.n	80043b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80043b6:	4b3e      	ldr	r3, [pc, #248]	; (80044b0 <xPortStartScheduler+0x120>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a3f      	ldr	r2, [pc, #252]	; (80044b8 <xPortStartScheduler+0x128>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d10a      	bne.n	80043d6 <xPortStartScheduler+0x46>
	__asm volatile
 80043c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c4:	f383 8811 	msr	BASEPRI, r3
 80043c8:	f3bf 8f6f 	isb	sy
 80043cc:	f3bf 8f4f 	dsb	sy
 80043d0:	60fb      	str	r3, [r7, #12]
}
 80043d2:	bf00      	nop
 80043d4:	e7fe      	b.n	80043d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80043d6:	4b39      	ldr	r3, [pc, #228]	; (80044bc <xPortStartScheduler+0x12c>)
 80043d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	22ff      	movs	r2, #255	; 0xff
 80043e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80043f0:	78fb      	ldrb	r3, [r7, #3]
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	4b31      	ldr	r3, [pc, #196]	; (80044c0 <xPortStartScheduler+0x130>)
 80043fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80043fe:	4b31      	ldr	r3, [pc, #196]	; (80044c4 <xPortStartScheduler+0x134>)
 8004400:	2207      	movs	r2, #7
 8004402:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004404:	e009      	b.n	800441a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004406:	4b2f      	ldr	r3, [pc, #188]	; (80044c4 <xPortStartScheduler+0x134>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	3b01      	subs	r3, #1
 800440c:	4a2d      	ldr	r2, [pc, #180]	; (80044c4 <xPortStartScheduler+0x134>)
 800440e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004410:	78fb      	ldrb	r3, [r7, #3]
 8004412:	b2db      	uxtb	r3, r3
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	b2db      	uxtb	r3, r3
 8004418:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800441a:	78fb      	ldrb	r3, [r7, #3]
 800441c:	b2db      	uxtb	r3, r3
 800441e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004422:	2b80      	cmp	r3, #128	; 0x80
 8004424:	d0ef      	beq.n	8004406 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004426:	4b27      	ldr	r3, [pc, #156]	; (80044c4 <xPortStartScheduler+0x134>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f1c3 0307 	rsb	r3, r3, #7
 800442e:	2b04      	cmp	r3, #4
 8004430:	d00a      	beq.n	8004448 <xPortStartScheduler+0xb8>
	__asm volatile
 8004432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004436:	f383 8811 	msr	BASEPRI, r3
 800443a:	f3bf 8f6f 	isb	sy
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	60bb      	str	r3, [r7, #8]
}
 8004444:	bf00      	nop
 8004446:	e7fe      	b.n	8004446 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004448:	4b1e      	ldr	r3, [pc, #120]	; (80044c4 <xPortStartScheduler+0x134>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	021b      	lsls	r3, r3, #8
 800444e:	4a1d      	ldr	r2, [pc, #116]	; (80044c4 <xPortStartScheduler+0x134>)
 8004450:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004452:	4b1c      	ldr	r3, [pc, #112]	; (80044c4 <xPortStartScheduler+0x134>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800445a:	4a1a      	ldr	r2, [pc, #104]	; (80044c4 <xPortStartScheduler+0x134>)
 800445c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	b2da      	uxtb	r2, r3
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004466:	4b18      	ldr	r3, [pc, #96]	; (80044c8 <xPortStartScheduler+0x138>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a17      	ldr	r2, [pc, #92]	; (80044c8 <xPortStartScheduler+0x138>)
 800446c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004470:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004472:	4b15      	ldr	r3, [pc, #84]	; (80044c8 <xPortStartScheduler+0x138>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a14      	ldr	r2, [pc, #80]	; (80044c8 <xPortStartScheduler+0x138>)
 8004478:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800447c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800447e:	f000 f8dd 	bl	800463c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004482:	4b12      	ldr	r3, [pc, #72]	; (80044cc <xPortStartScheduler+0x13c>)
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004488:	f000 f8fc 	bl	8004684 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800448c:	4b10      	ldr	r3, [pc, #64]	; (80044d0 <xPortStartScheduler+0x140>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a0f      	ldr	r2, [pc, #60]	; (80044d0 <xPortStartScheduler+0x140>)
 8004492:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004496:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004498:	f7ff ff66 	bl	8004368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800449c:	f7ff fa92 	bl	80039c4 <vTaskSwitchContext>
	prvTaskExitError();
 80044a0:	f7ff ff22 	bl	80042e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3718      	adds	r7, #24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	e000ed00 	.word	0xe000ed00
 80044b4:	410fc271 	.word	0x410fc271
 80044b8:	410fc270 	.word	0x410fc270
 80044bc:	e000e400 	.word	0xe000e400
 80044c0:	200006c8 	.word	0x200006c8
 80044c4:	200006cc 	.word	0x200006cc
 80044c8:	e000ed20 	.word	0xe000ed20
 80044cc:	2000000c 	.word	0x2000000c
 80044d0:	e000ef34 	.word	0xe000ef34

080044d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
	__asm volatile
 80044da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044de:	f383 8811 	msr	BASEPRI, r3
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	f3bf 8f4f 	dsb	sy
 80044ea:	607b      	str	r3, [r7, #4]
}
 80044ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80044ee:	4b0f      	ldr	r3, [pc, #60]	; (800452c <vPortEnterCritical+0x58>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	3301      	adds	r3, #1
 80044f4:	4a0d      	ldr	r2, [pc, #52]	; (800452c <vPortEnterCritical+0x58>)
 80044f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80044f8:	4b0c      	ldr	r3, [pc, #48]	; (800452c <vPortEnterCritical+0x58>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d10f      	bne.n	8004520 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004500:	4b0b      	ldr	r3, [pc, #44]	; (8004530 <vPortEnterCritical+0x5c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00a      	beq.n	8004520 <vPortEnterCritical+0x4c>
	__asm volatile
 800450a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	603b      	str	r3, [r7, #0]
}
 800451c:	bf00      	nop
 800451e:	e7fe      	b.n	800451e <vPortEnterCritical+0x4a>
	}
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	2000000c 	.word	0x2000000c
 8004530:	e000ed04 	.word	0xe000ed04

08004534 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800453a:	4b12      	ldr	r3, [pc, #72]	; (8004584 <vPortExitCritical+0x50>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10a      	bne.n	8004558 <vPortExitCritical+0x24>
	__asm volatile
 8004542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	607b      	str	r3, [r7, #4]
}
 8004554:	bf00      	nop
 8004556:	e7fe      	b.n	8004556 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004558:	4b0a      	ldr	r3, [pc, #40]	; (8004584 <vPortExitCritical+0x50>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3b01      	subs	r3, #1
 800455e:	4a09      	ldr	r2, [pc, #36]	; (8004584 <vPortExitCritical+0x50>)
 8004560:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004562:	4b08      	ldr	r3, [pc, #32]	; (8004584 <vPortExitCritical+0x50>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d105      	bne.n	8004576 <vPortExitCritical+0x42>
 800456a:	2300      	movs	r3, #0
 800456c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004574:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004576:	bf00      	nop
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	2000000c 	.word	0x2000000c
	...

08004590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004590:	f3ef 8009 	mrs	r0, PSP
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	4b15      	ldr	r3, [pc, #84]	; (80045f0 <pxCurrentTCBConst>)
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	f01e 0f10 	tst.w	lr, #16
 80045a0:	bf08      	it	eq
 80045a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80045a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045aa:	6010      	str	r0, [r2, #0]
 80045ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80045b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80045b4:	f380 8811 	msr	BASEPRI, r0
 80045b8:	f3bf 8f4f 	dsb	sy
 80045bc:	f3bf 8f6f 	isb	sy
 80045c0:	f7ff fa00 	bl	80039c4 <vTaskSwitchContext>
 80045c4:	f04f 0000 	mov.w	r0, #0
 80045c8:	f380 8811 	msr	BASEPRI, r0
 80045cc:	bc09      	pop	{r0, r3}
 80045ce:	6819      	ldr	r1, [r3, #0]
 80045d0:	6808      	ldr	r0, [r1, #0]
 80045d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045d6:	f01e 0f10 	tst.w	lr, #16
 80045da:	bf08      	it	eq
 80045dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80045e0:	f380 8809 	msr	PSP, r0
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	f3af 8000 	nop.w

080045f0 <pxCurrentTCBConst>:
 80045f0:	2000059c 	.word	0x2000059c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80045f4:	bf00      	nop
 80045f6:	bf00      	nop

080045f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
	__asm volatile
 80045fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004602:	f383 8811 	msr	BASEPRI, r3
 8004606:	f3bf 8f6f 	isb	sy
 800460a:	f3bf 8f4f 	dsb	sy
 800460e:	607b      	str	r3, [r7, #4]
}
 8004610:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004612:	f7ff f91f 	bl	8003854 <xTaskIncrementTick>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d003      	beq.n	8004624 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800461c:	4b06      	ldr	r3, [pc, #24]	; (8004638 <xPortSysTickHandler+0x40>)
 800461e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004622:	601a      	str	r2, [r3, #0]
 8004624:	2300      	movs	r3, #0
 8004626:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	f383 8811 	msr	BASEPRI, r3
}
 800462e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004630:	bf00      	nop
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	e000ed04 	.word	0xe000ed04

0800463c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004640:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <vPortSetupTimerInterrupt+0x34>)
 8004642:	2200      	movs	r2, #0
 8004644:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004646:	4b0b      	ldr	r3, [pc, #44]	; (8004674 <vPortSetupTimerInterrupt+0x38>)
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800464c:	4b0a      	ldr	r3, [pc, #40]	; (8004678 <vPortSetupTimerInterrupt+0x3c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a0a      	ldr	r2, [pc, #40]	; (800467c <vPortSetupTimerInterrupt+0x40>)
 8004652:	fba2 2303 	umull	r2, r3, r2, r3
 8004656:	099b      	lsrs	r3, r3, #6
 8004658:	4a09      	ldr	r2, [pc, #36]	; (8004680 <vPortSetupTimerInterrupt+0x44>)
 800465a:	3b01      	subs	r3, #1
 800465c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800465e:	4b04      	ldr	r3, [pc, #16]	; (8004670 <vPortSetupTimerInterrupt+0x34>)
 8004660:	2207      	movs	r2, #7
 8004662:	601a      	str	r2, [r3, #0]
}
 8004664:	bf00      	nop
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	e000e010 	.word	0xe000e010
 8004674:	e000e018 	.word	0xe000e018
 8004678:	20000000 	.word	0x20000000
 800467c:	10624dd3 	.word	0x10624dd3
 8004680:	e000e014 	.word	0xe000e014

08004684 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004684:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004694 <vPortEnableVFP+0x10>
 8004688:	6801      	ldr	r1, [r0, #0]
 800468a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800468e:	6001      	str	r1, [r0, #0]
 8004690:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004692:	bf00      	nop
 8004694:	e000ed88 	.word	0xe000ed88

08004698 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b08a      	sub	sp, #40	; 0x28
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80046a0:	2300      	movs	r3, #0
 80046a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80046a4:	f7ff f82c 	bl	8003700 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80046a8:	4b5b      	ldr	r3, [pc, #364]	; (8004818 <pvPortMalloc+0x180>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80046b0:	f000 f920 	bl	80048f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80046b4:	4b59      	ldr	r3, [pc, #356]	; (800481c <pvPortMalloc+0x184>)
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4013      	ands	r3, r2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f040 8093 	bne.w	80047e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d01d      	beq.n	8004704 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80046c8:	2208      	movs	r2, #8
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4413      	add	r3, r2
 80046ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f003 0307 	and.w	r3, r3, #7
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d014      	beq.n	8004704 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f023 0307 	bic.w	r3, r3, #7
 80046e0:	3308      	adds	r3, #8
 80046e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f003 0307 	and.w	r3, r3, #7
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <pvPortMalloc+0x6c>
	__asm volatile
 80046ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f2:	f383 8811 	msr	BASEPRI, r3
 80046f6:	f3bf 8f6f 	isb	sy
 80046fa:	f3bf 8f4f 	dsb	sy
 80046fe:	617b      	str	r3, [r7, #20]
}
 8004700:	bf00      	nop
 8004702:	e7fe      	b.n	8004702 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d06e      	beq.n	80047e8 <pvPortMalloc+0x150>
 800470a:	4b45      	ldr	r3, [pc, #276]	; (8004820 <pvPortMalloc+0x188>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	429a      	cmp	r2, r3
 8004712:	d869      	bhi.n	80047e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004714:	4b43      	ldr	r3, [pc, #268]	; (8004824 <pvPortMalloc+0x18c>)
 8004716:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004718:	4b42      	ldr	r3, [pc, #264]	; (8004824 <pvPortMalloc+0x18c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800471e:	e004      	b.n	800472a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004722:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	429a      	cmp	r2, r3
 8004732:	d903      	bls.n	800473c <pvPortMalloc+0xa4>
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1f1      	bne.n	8004720 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800473c:	4b36      	ldr	r3, [pc, #216]	; (8004818 <pvPortMalloc+0x180>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004742:	429a      	cmp	r2, r3
 8004744:	d050      	beq.n	80047e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2208      	movs	r2, #8
 800474c:	4413      	add	r3, r2
 800474e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	6a3b      	ldr	r3, [r7, #32]
 8004756:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	1ad2      	subs	r2, r2, r3
 8004760:	2308      	movs	r3, #8
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	429a      	cmp	r2, r3
 8004766:	d91f      	bls.n	80047a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4413      	add	r3, r2
 800476e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	f003 0307 	and.w	r3, r3, #7
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <pvPortMalloc+0xf8>
	__asm volatile
 800477a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477e:	f383 8811 	msr	BASEPRI, r3
 8004782:	f3bf 8f6f 	isb	sy
 8004786:	f3bf 8f4f 	dsb	sy
 800478a:	613b      	str	r3, [r7, #16]
}
 800478c:	bf00      	nop
 800478e:	e7fe      	b.n	800478e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	1ad2      	subs	r2, r2, r3
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80047a2:	69b8      	ldr	r0, [r7, #24]
 80047a4:	f000 f908 	bl	80049b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80047a8:	4b1d      	ldr	r3, [pc, #116]	; (8004820 <pvPortMalloc+0x188>)
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	4a1b      	ldr	r2, [pc, #108]	; (8004820 <pvPortMalloc+0x188>)
 80047b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80047b6:	4b1a      	ldr	r3, [pc, #104]	; (8004820 <pvPortMalloc+0x188>)
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	4b1b      	ldr	r3, [pc, #108]	; (8004828 <pvPortMalloc+0x190>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d203      	bcs.n	80047ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80047c2:	4b17      	ldr	r3, [pc, #92]	; (8004820 <pvPortMalloc+0x188>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a18      	ldr	r2, [pc, #96]	; (8004828 <pvPortMalloc+0x190>)
 80047c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	4b13      	ldr	r3, [pc, #76]	; (800481c <pvPortMalloc+0x184>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	431a      	orrs	r2, r3
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	2200      	movs	r2, #0
 80047dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80047de:	4b13      	ldr	r3, [pc, #76]	; (800482c <pvPortMalloc+0x194>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3301      	adds	r3, #1
 80047e4:	4a11      	ldr	r2, [pc, #68]	; (800482c <pvPortMalloc+0x194>)
 80047e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80047e8:	f7fe ff98 	bl	800371c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <pvPortMalloc+0x174>
	__asm volatile
 80047f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fa:	f383 8811 	msr	BASEPRI, r3
 80047fe:	f3bf 8f6f 	isb	sy
 8004802:	f3bf 8f4f 	dsb	sy
 8004806:	60fb      	str	r3, [r7, #12]
}
 8004808:	bf00      	nop
 800480a:	e7fe      	b.n	800480a <pvPortMalloc+0x172>
	return pvReturn;
 800480c:	69fb      	ldr	r3, [r7, #28]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3728      	adds	r7, #40	; 0x28
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	200042d8 	.word	0x200042d8
 800481c:	200042ec 	.word	0x200042ec
 8004820:	200042dc 	.word	0x200042dc
 8004824:	200042d0 	.word	0x200042d0
 8004828:	200042e0 	.word	0x200042e0
 800482c:	200042e4 	.word	0x200042e4

08004830 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d04d      	beq.n	80048de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004842:	2308      	movs	r3, #8
 8004844:	425b      	negs	r3, r3
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	4413      	add	r3, r2
 800484a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	4b24      	ldr	r3, [pc, #144]	; (80048e8 <vPortFree+0xb8>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4013      	ands	r3, r2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10a      	bne.n	8004874 <vPortFree+0x44>
	__asm volatile
 800485e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004862:	f383 8811 	msr	BASEPRI, r3
 8004866:	f3bf 8f6f 	isb	sy
 800486a:	f3bf 8f4f 	dsb	sy
 800486e:	60fb      	str	r3, [r7, #12]
}
 8004870:	bf00      	nop
 8004872:	e7fe      	b.n	8004872 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00a      	beq.n	8004892 <vPortFree+0x62>
	__asm volatile
 800487c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004880:	f383 8811 	msr	BASEPRI, r3
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	60bb      	str	r3, [r7, #8]
}
 800488e:	bf00      	nop
 8004890:	e7fe      	b.n	8004890 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	4b14      	ldr	r3, [pc, #80]	; (80048e8 <vPortFree+0xb8>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4013      	ands	r3, r2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d01e      	beq.n	80048de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d11a      	bne.n	80048de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	4b0e      	ldr	r3, [pc, #56]	; (80048e8 <vPortFree+0xb8>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	43db      	mvns	r3, r3
 80048b2:	401a      	ands	r2, r3
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80048b8:	f7fe ff22 	bl	8003700 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	4b0a      	ldr	r3, [pc, #40]	; (80048ec <vPortFree+0xbc>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4413      	add	r3, r2
 80048c6:	4a09      	ldr	r2, [pc, #36]	; (80048ec <vPortFree+0xbc>)
 80048c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80048ca:	6938      	ldr	r0, [r7, #16]
 80048cc:	f000 f874 	bl	80049b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80048d0:	4b07      	ldr	r3, [pc, #28]	; (80048f0 <vPortFree+0xc0>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	3301      	adds	r3, #1
 80048d6:	4a06      	ldr	r2, [pc, #24]	; (80048f0 <vPortFree+0xc0>)
 80048d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80048da:	f7fe ff1f 	bl	800371c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80048de:	bf00      	nop
 80048e0:	3718      	adds	r7, #24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	200042ec 	.word	0x200042ec
 80048ec:	200042dc 	.word	0x200042dc
 80048f0:	200042e8 	.word	0x200042e8

080048f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80048fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80048fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004900:	4b27      	ldr	r3, [pc, #156]	; (80049a0 <prvHeapInit+0xac>)
 8004902:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f003 0307 	and.w	r3, r3, #7
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00c      	beq.n	8004928 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	3307      	adds	r3, #7
 8004912:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f023 0307 	bic.w	r3, r3, #7
 800491a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	4a1f      	ldr	r2, [pc, #124]	; (80049a0 <prvHeapInit+0xac>)
 8004924:	4413      	add	r3, r2
 8004926:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800492c:	4a1d      	ldr	r2, [pc, #116]	; (80049a4 <prvHeapInit+0xb0>)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004932:	4b1c      	ldr	r3, [pc, #112]	; (80049a4 <prvHeapInit+0xb0>)
 8004934:	2200      	movs	r2, #0
 8004936:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	4413      	add	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004940:	2208      	movs	r2, #8
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	1a9b      	subs	r3, r3, r2
 8004946:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f023 0307 	bic.w	r3, r3, #7
 800494e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4a15      	ldr	r2, [pc, #84]	; (80049a8 <prvHeapInit+0xb4>)
 8004954:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004956:	4b14      	ldr	r3, [pc, #80]	; (80049a8 <prvHeapInit+0xb4>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2200      	movs	r2, #0
 800495c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800495e:	4b12      	ldr	r3, [pc, #72]	; (80049a8 <prvHeapInit+0xb4>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	1ad2      	subs	r2, r2, r3
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004974:	4b0c      	ldr	r3, [pc, #48]	; (80049a8 <prvHeapInit+0xb4>)
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	4a0a      	ldr	r2, [pc, #40]	; (80049ac <prvHeapInit+0xb8>)
 8004982:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	4a09      	ldr	r2, [pc, #36]	; (80049b0 <prvHeapInit+0xbc>)
 800498a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800498c:	4b09      	ldr	r3, [pc, #36]	; (80049b4 <prvHeapInit+0xc0>)
 800498e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004992:	601a      	str	r2, [r3, #0]
}
 8004994:	bf00      	nop
 8004996:	3714      	adds	r7, #20
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	200006d0 	.word	0x200006d0
 80049a4:	200042d0 	.word	0x200042d0
 80049a8:	200042d8 	.word	0x200042d8
 80049ac:	200042e0 	.word	0x200042e0
 80049b0:	200042dc 	.word	0x200042dc
 80049b4:	200042ec 	.word	0x200042ec

080049b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80049c0:	4b28      	ldr	r3, [pc, #160]	; (8004a64 <prvInsertBlockIntoFreeList+0xac>)
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	e002      	b.n	80049cc <prvInsertBlockIntoFreeList+0x14>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d8f7      	bhi.n	80049c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	4413      	add	r3, r2
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d108      	bne.n	80049fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	441a      	add	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	441a      	add	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d118      	bne.n	8004a40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	4b15      	ldr	r3, [pc, #84]	; (8004a68 <prvInsertBlockIntoFreeList+0xb0>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d00d      	beq.n	8004a36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	441a      	add	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	e008      	b.n	8004a48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a36:	4b0c      	ldr	r3, [pc, #48]	; (8004a68 <prvInsertBlockIntoFreeList+0xb0>)
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	e003      	b.n	8004a48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d002      	beq.n	8004a56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a56:	bf00      	nop
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	200042d0 	.word	0x200042d0
 8004a68:	200042d8 	.word	0x200042d8

08004a6c <__libc_init_array>:
 8004a6c:	b570      	push	{r4, r5, r6, lr}
 8004a6e:	4d0d      	ldr	r5, [pc, #52]	; (8004aa4 <__libc_init_array+0x38>)
 8004a70:	4c0d      	ldr	r4, [pc, #52]	; (8004aa8 <__libc_init_array+0x3c>)
 8004a72:	1b64      	subs	r4, r4, r5
 8004a74:	10a4      	asrs	r4, r4, #2
 8004a76:	2600      	movs	r6, #0
 8004a78:	42a6      	cmp	r6, r4
 8004a7a:	d109      	bne.n	8004a90 <__libc_init_array+0x24>
 8004a7c:	4d0b      	ldr	r5, [pc, #44]	; (8004aac <__libc_init_array+0x40>)
 8004a7e:	4c0c      	ldr	r4, [pc, #48]	; (8004ab0 <__libc_init_array+0x44>)
 8004a80:	f000 f826 	bl	8004ad0 <_init>
 8004a84:	1b64      	subs	r4, r4, r5
 8004a86:	10a4      	asrs	r4, r4, #2
 8004a88:	2600      	movs	r6, #0
 8004a8a:	42a6      	cmp	r6, r4
 8004a8c:	d105      	bne.n	8004a9a <__libc_init_array+0x2e>
 8004a8e:	bd70      	pop	{r4, r5, r6, pc}
 8004a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a94:	4798      	blx	r3
 8004a96:	3601      	adds	r6, #1
 8004a98:	e7ee      	b.n	8004a78 <__libc_init_array+0xc>
 8004a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a9e:	4798      	blx	r3
 8004aa0:	3601      	adds	r6, #1
 8004aa2:	e7f2      	b.n	8004a8a <__libc_init_array+0x1e>
 8004aa4:	08004b6c 	.word	0x08004b6c
 8004aa8:	08004b6c 	.word	0x08004b6c
 8004aac:	08004b6c 	.word	0x08004b6c
 8004ab0:	08004b70 	.word	0x08004b70

08004ab4 <memcpy>:
 8004ab4:	440a      	add	r2, r1
 8004ab6:	4291      	cmp	r1, r2
 8004ab8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004abc:	d100      	bne.n	8004ac0 <memcpy+0xc>
 8004abe:	4770      	bx	lr
 8004ac0:	b510      	push	{r4, lr}
 8004ac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ac6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004aca:	4291      	cmp	r1, r2
 8004acc:	d1f9      	bne.n	8004ac2 <memcpy+0xe>
 8004ace:	bd10      	pop	{r4, pc}

08004ad0 <_init>:
 8004ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad2:	bf00      	nop
 8004ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ad6:	bc08      	pop	{r3}
 8004ad8:	469e      	mov	lr, r3
 8004ada:	4770      	bx	lr

08004adc <_fini>:
 8004adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ade:	bf00      	nop
 8004ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ae2:	bc08      	pop	{r3}
 8004ae4:	469e      	mov	lr, r3
 8004ae6:	4770      	bx	lr
